"""
–ú–æ–¥—É–ª—å Real Trading –∫–æ–º–∞–Ω–¥ –¥–ª—è Telegram –±–æ—Ç–∞
–°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ–π –Ω–∞ Bybit
"""

import aiohttp
import asyncio
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes
from config import (
	REAL_MAX_DAILY_LOSS, REAL_MAX_POSITION_SIZE,
	REAL_ORDER_TYPE, REAL_LIMIT_ORDER_OFFSET_PERCENT
)
from data_provider import DataProvider
from signal_generator import SignalGenerator
from logger import logger
from telegram_formatters import TelegramFormatters
from safety_limits import SafetyLimits


class TelegramRealTrading:
	"""–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Real Trading –∫–æ–º–∞–Ω–¥"""
	
	def __init__(self, bot_instance):
		self.bot = bot_instance
		self.formatters = TelegramFormatters()
		self.safety_limits = SafetyLimits()
	
	def _is_authorized(self, update: Update) -> bool:
		"""–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞"""
		if self.bot.owner_chat_id is None:
			return True
		return update.effective_chat.id == self.bot.owner_chat_id
	
	def _check_real_trader(self, update):
		"""–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ RealTrader"""
		if not hasattr(self.bot, 'real_trader') or self.bot.real_trader is None:
			return False, "‚ùå Real Trading –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
		return True, None

	async def real_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		"""–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥"""
		if not self._is_authorized(update):
			await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
			return
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é RealTrader
		is_ready, error_msg = self._check_real_trader(update)
		if not is_ready:
			await update.message.reply_text(error_msg)
			return
		
		if self.bot.real_trader.is_running:
			await update.message.reply_text("‚ö†Ô∏è Real Trading —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
			return
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
		if not self.safety_limits.check_daily_loss_limit():
			await update.message.reply_text(f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —É–±—ã—Ç–∫–æ–≤: ${self.safety_limits.get_daily_loss():.2f}")
			return
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
		if not hasattr(self.bot.real_trader, 'api_key') or not self.bot.real_trader.api_key or not self.bot.real_trader.api_secret:
			await update.message.reply_text("‚ùå BYBIT_API_KEY –∏ BYBIT_API_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env")
			return
		
		# –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
		try:
			async with aiohttp.ClientSession() as session:
				balance = await self.bot.real_trader.get_balance(session)
				if not balance:
					await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å —Å –±–∏—Ä–∂–∏")
					return
				usdt_balance = balance.get("USDT", 0.0)
				
				if usdt_balance <= 0:
					await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –±–∏—Ä–∂–µ")
					return
				
		except Exception as e:
			await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit API: {e}")
			return
		
		# –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥
		success = self.bot.real_trader.start()
		if success:
			self.bot.real_trader.save_state()
			
			text = (
				f"<b>üöÄ Real Trading –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
				f"üí∞ USDT –±–∞–ª–∞–Ω—Å: ${usdt_balance:.2f}\n"
				f"üìä –¢–∏–ø –æ—Ä–¥–µ—Ä–æ–≤: {REAL_ORDER_TYPE}\n"
				f"üõ°Ô∏è –õ–∏–º–∏—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n"
				f"  ‚Ä¢ –ú–∞–∫—Å —É–±—ã—Ç–æ–∫ –≤ –¥–µ–Ω—å: ${REAL_MAX_DAILY_LOSS}\n"
				f"  ‚Ä¢ –ú–∞–∫—Å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${REAL_MAX_POSITION_SIZE}\n"
				f"  ‚Ä¢ –ú–∞–∫—Å –ø–æ–∑–∏—Ü–∏–π: –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞)\n\n"
				f"‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï:</b> –†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–µ–Ω—å–≥–∞–º–∏!\n"
				f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /real_status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è."
			)
			await update.message.reply_text(text, parse_mode="HTML")
		else:
			await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Real Trading")

	async def real_stop(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		"""–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏"""
		if not self._is_authorized(update):
			await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
			return
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é RealTrader
		is_ready, error_msg = self._check_real_trader(update)
		if not is_ready:
			await update.message.reply_text(error_msg)
			return
		
		if not self.bot.real_trader.is_running:
			await update.message.reply_text("‚ö†Ô∏è Real Trading –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
			return
		
		# –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
		if self.bot.real_trader.positions:
			msg = await update.message.reply_text("‚è≥ –ó–∞–∫—Ä—ã–≤–∞—é –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏...")
			
			# –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
			closed_count = await self.bot.real_trader.stop_and_close_all()
			
			positions_text = f"–ó–∞–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π: {closed_count}" if closed_count > 0 else "–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è"
		else:
			positions_text = "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"
			self.bot.real_trader.stop()
		
		self.bot.real_trader.save_state()
		
		# –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
		status = await self.bot.real_trader.get_status()
		
		text = (
			f"<b>‚è∏ Real Trading –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
			f"–ó–∞–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π:\n{positions_text}\n\n"
			f"üí∞ USDT –±–∞–ª–∞–Ω—Å: ${status.get('usdt_balance', 0):.2f}\n"
			f"üìä –î–Ω–µ–≤–Ω–æ–π —É–±—ã—Ç–æ–∫: ${status.get('daily_loss', 0):.2f}"
		)
		
		if self.bot.real_trader.positions:
			await msg.edit_text(text, parse_mode="HTML")
		else:
			await update.message.reply_text(text, parse_mode="HTML")

	async def real_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		"""–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞"""
		if not self._is_authorized(update):
			await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
			return
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é RealTrader
		is_ready, error_msg = self._check_real_trader(update)
		if not is_ready:
			await update.message.reply_text(error_msg)
			return
		
		status = await self.bot.real_trader.get_status()
		
		if "error" in status:
			await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {status['error']}")
			return
		
		# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ PnL
		current_prices = {}
		if status['positions']:
			async with aiohttp.ClientSession() as session:
				provider = DataProvider(session)
				for pos in status['positions']:
					symbol = pos['symbol']
					try:
						klines = await provider.fetch_klines(symbol=symbol, interval=self.bot.default_interval, limit=1)
						df = provider.klines_to_dataframe(klines)
						if not df.empty:
							current_prices[symbol] = float(df['close'].iloc[-1])
					except:
						current_prices[symbol] = pos.get('current_price', 0)
		
		# –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏—è—Ö
		positions_text = ""
		total_pnl = 0.0
		total_current_value = 0.0
		
		for pos in status['positions']:
			symbol = pos['symbol']
			quantity = pos['quantity']
			entry_price = pos.get('entry_price', 0)
			current_price = current_prices.get(symbol, pos.get('current_price', entry_price))
			
			if current_price > 0:
				# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL –ø—Ä–∞–≤–∏–ª—å–Ω–æ
				entry_value = quantity * entry_price
				current_value = quantity * current_price
				pnl = current_value - entry_value
				pnl_percent = (pnl / entry_value) * 100 if entry_value > 0 else 0
				total_pnl += pnl
				total_current_value += current_value
				
				emoji = "üü¢" if pnl > 0 else "üî¥" if pnl < 0 else "‚ö™"
				
				# –ü–æ–ª—É—á–∞–µ–º SL/TP –∏–∑ –ø–æ–∑–∏—Ü–∏–∏
				stop_loss = pos.get('stop_loss', 0)
				take_profit = pos.get('take_profit', 0)
				
				positions_text += (
					f"  {emoji} <b>{symbol}</b>\n"
					f"    –í—Ö–æ–¥: {self.formatters.format_price(entry_price)} ‚Üí –°–µ–π—á–∞—Å: {self.formatters.format_price(current_price)}\n"
					f"    PnL: ${pnl:+.2f} ({pnl_percent:+.2f}%)\n"
					f"    –°—Ç–æ–∏–º–æ—Å—Ç—å: ${current_value:.2f}\n"
				)
				
				# –î–æ–±–∞–≤–ª—è–µ–º SL/TP –µ—Å–ª–∏ –æ–Ω–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
				if stop_loss > 0 or take_profit > 0:
					sl_text = f"SL: {self.formatters.format_price(stop_loss)}" if stop_loss > 0 else "SL: ‚Äî"
					tp_text = f"TP: {self.formatters.format_price(take_profit)}" if take_profit > 0 else "TP: ‚Äî"
					positions_text += f"    {sl_text} | {tp_text}\n"
				
				positions_text += "\n"
		
		status_emoji = "üü¢" if status['is_running'] else "‚è∏"
		
		# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤–∫–ª—é—á–∞—è –ø–æ–∑–∏—Ü–∏–∏
		usdt_balance = status.get('usdt_balance', 0)
		total_balance = usdt_balance + total_current_value
		
		text = (
			f"<b>{status_emoji} Real Trading Status</b>\n\n"
			f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b>\n"
			f"  ‚Ä¢ USDT: ${usdt_balance:.2f}\n"
			f"  ‚Ä¢ –ü–æ–∑–∏—Ü–∏–∏: ${total_current_value:.2f}\n"
			f"  ‚Ä¢ –û–±—â–∏–π: ${total_balance:.2f}\n"
			f"  ‚Ä¢ PnL: ${total_pnl:+.2f}\n\n"
			f"üìä <b>–ü–æ–∑–∏—Ü–∏–∏ ({len(status['positions'])}/{status.get('max_positions', 'N/A')}):</b>\n"
		)
		
		if positions_text:
			text += positions_text
		else:
			text += "  –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π\n\n"
		
		text += (
			f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
			f"  ‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {status['stats']['total_trades']}\n"
			f"  ‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {status['stats']['win_rate']:.1f}%\n"
			f"  ‚Ä¢ –ö–æ–º–∏—Å—Å–∏–∏: ${status['stats']['total_commission']:.4f}\n"
			f"  ‚Ä¢ Stop-loss: {status['stats']['stop_loss_triggers']}\n"
			f"  ‚Ä¢ Take-profit: {status['stats']['take_profit_triggers']}\n"
			f"  ‚Ä¢ Trailing-stop: {status['stats']['trailing_stop_triggers']}\n\n"
			f"üõ°Ô∏è <b>–õ–∏–º–∏—Ç—ã:</b>\n"
			f"  ‚Ä¢ –î–Ω–µ–≤–Ω–æ–π —É–±—ã—Ç–æ–∫: ${status.get('daily_loss', 0):.2f} / ${status.get('daily_loss_limit', REAL_MAX_DAILY_LOSS)}\n"
			f"  ‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if status.get('daily_loss', 0) >= status.get('daily_loss_limit', REAL_MAX_DAILY_LOSS) else 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω'}"
		)
		
		await update.message.reply_text(text, parse_mode="HTML")

	async def real_balance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		"""–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å Bybit"""
		if not self._is_authorized(update):
			await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
			return
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é RealTrader
		is_ready, error_msg = self._check_real_trader(update)
		if not is_ready:
			await update.message.reply_text(error_msg)
			return
		
		try:
			async with aiohttp.ClientSession() as session:
				balance_data = await self.bot.real_trader.get_balance(session)
				
				text = "<b>üí∞ Bybit Balance</b>\n\n"
				
				if balance_data:
					for coin, balance in balance_data.items():
						if balance > 0:
							text += f"<b>{coin}:</b> {balance:.6f}\n"
				else:
					text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–ª–∞–Ω—Å–µ"
				
				await update.message.reply_text(text, parse_mode="HTML")
				
		except Exception as e:
			logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
			await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")

	async def real_trades(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		"""–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
		if not self._is_authorized(update):
			await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
			return
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é RealTrader
		is_ready, error_msg = self._check_real_trader(update)
		if not is_ready:
			await update.message.reply_text(error_msg)
			return
		
		limit = 10
		if context.args and len(context.args) > 0:
			try:
				limit = int(context.args[0])
				limit = min(max(limit, 1), 50)  # –û—Ç 1 –¥–æ 50
			except ValueError:
				pass
		
		trades = self.bot.real_trader.trades_history[-limit:]
		
		if not trades:
			await update.message.reply_text("üìù –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –ø—É—Å—Ç–∞.")
			return
		
		text = f"<b>üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(trades)} —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:</b>\n\n"
		
		for trade in reversed(trades):
			trade_type = trade['type']
			symbol = trade.get('symbol', 'N/A')
			price = trade.get('price', 0)
			order_id = trade.get('order_id', 'N/A')
			
			if trade_type == "BUY":
				emoji = "üü¢"
				details = f"  –ö—É–ø–∏–ª {trade['amount']:.6f} @ {self.formatters.format_price(price)}\n  –í–ª–æ–∂–µ–Ω–æ: ${trade['invest_amount']:.2f}\n  Order ID: {order_id}"
			elif trade_type in ["SELL", "MANUAL-CLOSE"]:
				emoji = "üî¥"
				profit_emoji = "üìà" if trade['profit'] >= 0 else "üìâ"
				details = f"  –ü—Ä–æ–¥–∞–ª {trade['amount']:.6f} @ {self.formatters.format_price(price)}\n  {profit_emoji} –ü—Ä–∏–±—ã–ª—å: ${trade['profit']:+.2f} ({trade['profit_percent']:+.2f}%)\n  Order ID: {order_id}"
			elif trade_type == "STOP-LOSS":
				emoji = "üõë"
				details = f"  –°—Ç–æ–ø-–ª–æ—Å—Å {trade['amount']:.6f} @ {self.formatters.format_price(price)}\n  üìâ –£–±—ã—Ç–æ–∫: ${trade['profit']:+.2f} ({trade['profit_percent']:+.2f}%)\n  Order ID: {order_id}"
			elif trade_type == "TAKE-PROFIT":
				emoji = "üíé"
				details = f"  –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç {trade['amount']:.6f} @ {self.formatters.format_price(price)}\n  üìà –ü—Ä–∏–±—ã–ª—å: ${trade['profit']:+.2f} ({trade['profit_percent']:+.2f}%)\n  Order ID: {order_id}"
			else:
				emoji = "‚ö™"
				details = f"  {trade.get('amount', 0):.6f} @ {self.formatters.format_price(price)}\n  Order ID: {order_id}"
			
			time_str = trade.get('time', 'N/A')
			if isinstance(time_str, datetime):
				time_str = time_str.strftime('%H:%M:%S')
			elif isinstance(time_str, str) and 'T' in time_str:
				time_str = time_str.split('T')[1].split('.')[0]
			
			text += f"{emoji} <b>{trade_type}</b> {symbol} [{time_str}]\n{details}\n\n"
		
		await update.message.reply_text(text, parse_mode="HTML")

	async def real_limits(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		"""–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç/–∏–∑–º–µ–Ω—è–µ—Ç –ª–∏–º–∏—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
		if not self._is_authorized(update):
			await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
			return
		
		limits_status = self.safety_limits.get_status()
		
		text = (
			f"<b>üõ°Ô∏è –õ–∏–º–∏—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</b>\n\n"
			f"<b>–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —É–±—ã—Ç–∫–æ–≤:</b>\n"
			f"  ‚Ä¢ –¢–µ–∫—É—â–∏–π —É–±—ã—Ç–æ–∫: ${limits_status['daily_loss']:.2f}\n"
			f"  ‚Ä¢ –õ–∏–º–∏—Ç: ${limits_status['daily_loss_limit']:.2f}\n"
			f"  ‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: ${limits_status['remaining_daily_loss']:.2f}\n"
			f"  ‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üî¥ –ü—Ä–µ–≤—ã—à–µ–Ω' if limits_status['is_daily_limit_reached'] else 'üü¢ –í –Ω–æ—Ä–º–µ'}\n\n"
			f"<b>–õ–∏–º–∏—Ç—ã –ø–æ–∑–∏—Ü–∏–π:</b>\n"
			f"  ‚Ä¢ –ú–∞–∫—Å —Ä–∞–∑–º–µ—Ä: ${limits_status['max_position_size']:.2f}\n"
			f"  ‚Ä¢ –ú–∞–∫—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {limits_status['max_positions']}\n\n"
			f"<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤:</b>\n"
			f"  ‚Ä¢ –¢–∏–ø: {REAL_ORDER_TYPE}\n"
			f"  ‚Ä¢ –û—Ñ—Ñ—Å–µ—Ç –ª–∏–º–∏—Ç–Ω—ã—Ö: {REAL_LIMIT_ORDER_OFFSET_PERCENT*100:.1f}%"
		)
		
		await update.message.reply_text(text, parse_mode="HTML")

	async def real_emergency_stop(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		"""–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
		if not self._is_authorized(update):
			await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
			return
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é RealTrader
		is_ready, error_msg = self._check_real_trader(update)
		if not is_ready:
			await update.message.reply_text(error_msg)
			return
		
		# –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
		self.bot.real_trader.stop()
		self.bot.real_trader.save_state()
		
		# –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
		closed_count = 0
		if self.bot.real_trader.positions:
			async with aiohttp.ClientSession() as session:
				provider = DataProvider(session)
				for symbol in list(self.bot.real_trader.positions.keys()):
					try:
						klines = await provider.fetch_klines(symbol=symbol, interval=self.bot.default_interval, limit=1)
						df = provider.klines_to_dataframe(klines)
						if not df.empty:
							current_price = float(df['close'].iloc[-1])
							await self.bot.real_trader.close_position(symbol, current_price, "EMERGENCY-STOP")
							closed_count += 1
					except Exception as e:
						logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è {symbol}: {e}")
		
		text = (
			f"<b>üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê</b>\n\n"
			f"Real Trading –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!\n"
			f"–ó–∞–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π: {closed_count}\n\n"
			f"‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ /real_status"
		)
		
		await update.message.reply_text(text, parse_mode="HTML")
