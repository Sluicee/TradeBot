import asyncio
import pandas as pd
from typing import Dict, Any, Optional
from logger import logger
from config import (
	USE_MULTI_TIMEFRAME, MTF_TIMEFRAMES, MTF_WEIGHTS, MTF_MIN_AGREEMENT, MTF_FULL_ALIGNMENT_BONUS
)

class MultiTimeframeAnalyzer:
	"""
	üîÄ MULTI-TIMEFRAME ANALYSIS
	
	–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö (15m, 1h, 4h) –∏
	–æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏—Ö —á–µ—Ä–µ–∑ weighted voting –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏.
	"""
	
	def __init__(self, signal_generator_factory):
		"""
		–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —Ñ–∞–±—Ä–∏–∫–æ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
		
		–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
		- signal_generator_factory: —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è SignalGenerator
		"""
		self.signal_generator_factory = signal_generator_factory
	
	async def generate_signal_multi_timeframe(
		self,
		data_provider,
		symbol: str,
		strategy: str = "TREND_FOLLOWING"
	) -> Dict[str, Any]:
		"""
		üîÄ MULTI-TIMEFRAME ANALYSIS
		
		–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö (15m, 1h, 4h) –∏
		–æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏—Ö —á–µ—Ä–µ–∑ weighted voting –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏.
		
		–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
		- data_provider: –æ–±—ä–µ–∫—Ç DataProvider –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
		- symbol: —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "BTCUSDT")
		- strategy: "TREND_FOLLOWING", "MEAN_REVERSION", –∏–ª–∏ "HYBRID"
		
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
		- –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
		"""
		if not USE_MULTI_TIMEFRAME:
			# Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π DataFrame –µ—Å–ª–∏ MTF –æ—Ç–∫–ª—é—á–µ–Ω
			sg = self.signal_generator_factory()
			if strategy == "MEAN_REVERSION":
				return sg.generate_signal_mean_reversion()
			elif strategy == "HYBRID":
				return sg.generate_signal_hybrid()
			else:
				return sg.generate_signal()
		
		reasons = []
		timeframe_signals = {}
		
		# ====================================================================
		# 1. –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø –ö–ê–ñ–î–û–ì–û –¢–ê–ô–ú–§–†–ï–ô–ú–ê
		# ====================================================================
		
		async def fetch_all_timeframes():
			"""–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤"""
			tasks = []
			for tf in MTF_TIMEFRAMES:
				tasks.append(data_provider.fetch_klines(symbol, tf, limit=200))
			return await asyncio.gather(*tasks, return_exceptions=True)
		
		# –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
		logger.info(f"MTF: –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö {MTF_TIMEFRAMES}")
		try:
			# –ï—Å–ª–∏ —É–∂–µ –≤ async –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º gather, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞—ë–º event loop
			try:
				loop = asyncio.get_running_loop()
				# –ú—ã —É–∂–µ –≤ async –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ - –ø—Ä–æ—Å—Ç–æ await
				tf_data = await fetch_all_timeframes()
				logger.info(f"MTF: –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–ª—É—á–µ–Ω–æ {len(tf_data)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
			except RuntimeError:
				# –ù–µ—Ç running loop - —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
				tf_data = asyncio.run(fetch_all_timeframes())
				logger.info(f"MTF: –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (new loop), –ø–æ–ª—É—á–µ–Ω–æ {len(tf_data)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
		except Exception as e:
			logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ MTF –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
			# Fallback –Ω–∞ single TF
			sg = self.signal_generator_factory()
			if strategy == "MEAN_REVERSION":
				return sg.generate_signal_mean_reversion()
			elif strategy == "HYBRID":
				return sg.generate_signal_hybrid()
			else:
				return sg.generate_signal()
		
		# ====================================================================
		# 2. –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–ò–ì–ù–ê–õ–û–í –î–õ–Ø –ö–ê–ñ–î–û–ì–û –¢–ê–ô–ú–§–†–ï–ô–ú–ê
		# ====================================================================
		
		for i, tf in enumerate(MTF_TIMEFRAMES):
			logger.debug(f"MTF: –æ–±—Ä–∞–±–æ—Ç–∫–∞ {tf} (index={i})")
			if isinstance(tf_data[i], Exception):
				logger.warning(f"MTF: –æ—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {tf}: {tf_data[i]}")
				timeframe_signals[tf] = {
					"signal": "HOLD",
					"price": 0,
					"RSI": 0,
					"ADX": 0,
					"MACD_hist": 0,
					"market_regime": "NEUTRAL",
					"bullish_votes": 0,
					"bearish_votes": 0,
					"weight": MTF_WEIGHTS.get(tf, 0),
					"confidence": 0,
					"error": str(tf_data[i])
				}
				continue
			
			df = tf_data[i]
			logger.debug(f"MTF: DataFrame –¥–ª—è {tf}: {len(df) if not df.empty else 0} —Å—Ç—Ä–æ–∫")
			if df.empty:
				logger.warning(f"MTF: –ø—É—Å—Ç–æ–π DataFrame –¥–ª—è {tf}")
				timeframe_signals[tf] = {
					"signal": "HOLD",
					"price": 0,
					"RSI": 0,
					"ADX": 0,
					"MACD_hist": 0,
					"market_regime": "NEUTRAL",
					"bullish_votes": 0,
					"bearish_votes": 0,
					"weight": MTF_WEIGHTS.get(tf, 0),
					"confidence": 0,
					"error": "Empty dataframe"
				}
				continue
			
			# –°–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
			try:
				sg = self.signal_generator_factory(df)
				sg.compute_indicators()
				
				# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
				if strategy == "MEAN_REVERSION":
					signal_result = sg.generate_signal_mean_reversion()
				elif strategy == "HYBRID":
					signal_result = sg.generate_signal_hybrid()
				else:
					signal_result = sg.generate_signal()
				
				# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
				signal = signal_result.get("signal", "HOLD")
				price = signal_result.get("price", 0)
				rsi = signal_result.get("RSI", 0)
				adx = signal_result.get("ADX", 0)
				
				logger.info(f"MTF: {tf} ‚Üí {signal} (—Ü–µ–Ω–∞={price:.2f}, RSI={rsi:.1f}, ADX={adx:.1f})")
				
				timeframe_signals[tf] = {
					"signal": signal,
					"price": price,
					"RSI": rsi,
					"ADX": adx,
					"MACD_hist": signal_result.get("MACD_hist", 0),
					"market_regime": signal_result.get("market_regime", "NEUTRAL"),
					"bullish_votes": signal_result.get("bullish_votes", 0),
					"bearish_votes": signal_result.get("bearish_votes", 0),
					"weight": MTF_WEIGHTS.get(tf, 0),
					"confidence": signal_result.get("confidence", 0)
				}
				
			except Exception as e:
				logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {tf}: {e}", exc_info=True)
				timeframe_signals[tf] = {
					"signal": "HOLD",
					"price": 0,
					"RSI": 0,
					"ADX": 0,
					"MACD_hist": 0,
					"market_regime": "NEUTRAL",
					"bullish_votes": 0,
					"bearish_votes": 0,
					"weight": MTF_WEIGHTS.get(tf, 0),
					"confidence": 0,
					"error": str(e)
				}
		
		# ====================================================================
		# 3. WEIGHTED VOTING
		# ====================================================================
		
		buy_score = 0.0
		sell_score = 0.0
		hold_score = 0.0
		
		buy_count = 0
		sell_count = 0
		hold_count = 0
		
		for tf, sig_data in timeframe_signals.items():
			signal = sig_data.get("signal", "HOLD")
			weight = sig_data.get("weight", 0)
			confidence = sig_data.get("confidence", 0.5)
			
			# –í–∑–≤–µ—à–∏–≤–∞–µ–º –ø–æ –≤–µ—Å—É —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–∞
			weighted_score = weight * (1 + confidence)
			
			if signal == "BUY":
				buy_score += weighted_score
				buy_count += 1
				reasons.append(f"üìä {tf}: BUY (–≤–µ—Å={weight:.2f}, conf={confidence:.2f})")
			elif signal == "SELL":
				sell_score += weighted_score
				sell_count += 1
				reasons.append(f"üìä {tf}: SELL (–≤–µ—Å={weight:.2f}, conf={confidence:.2f})")
			else:
				hold_score += weighted_score
				hold_count += 1
				reasons.append(f"üìä {tf}: HOLD (–≤–µ—Å={weight:.2f})")
		
		# ====================================================================
		# 4. –ü–†–û–í–ï–†–ö–ê –°–û–ì–õ–ê–°–û–í–ê–ù–ù–û–°–¢–ò (ALIGNMENT)
		# ====================================================================
		
		total_tf = len(MTF_TIMEFRAMES)
		alignment_strength = 0
		final_signal = "HOLD"
		signal_emoji = "‚ö†Ô∏è"
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ (–≤—Å–µ 3 TF –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ)
		if buy_count == total_tf:
			alignment_strength = 1.0
			final_signal = "BUY"
			signal_emoji = "üü¢üî•"
			buy_score *= MTF_FULL_ALIGNMENT_BONUS
			reasons.append(f"‚úÖ –ü–û–õ–ù–û–ï –°–û–ì–õ–ê–°–ò–ï: –≤—Å–µ {total_tf} —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç BUY! (–±–æ–Ω—É—Å {MTF_FULL_ALIGNMENT_BONUS}x)")
		elif sell_count == total_tf:
			alignment_strength = 1.0
			final_signal = "SELL"
			signal_emoji = "üî¥üî•"
			sell_score *= MTF_FULL_ALIGNMENT_BONUS
			reasons.append(f"‚úÖ –ü–û–õ–ù–û–ï –°–û–ì–õ–ê–°–ò–ï: –≤—Å–µ {total_tf} —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç SELL! (–±–æ–Ω—É—Å {MTF_FULL_ALIGNMENT_BONUS}x)")
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ (–º–∏–Ω–∏–º—É–º MTF_MIN_AGREEMENT)
		elif buy_count >= MTF_MIN_AGREEMENT and buy_score > sell_score:
			alignment_strength = buy_count / total_tf
			final_signal = "BUY"
			signal_emoji = "üü¢"
			reasons.append(f"‚úì –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ: {buy_count}/{total_tf} —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç BUY")
		elif sell_count >= MTF_MIN_AGREEMENT and sell_score > buy_score:
			alignment_strength = sell_count / total_tf
			final_signal = "SELL"
			signal_emoji = "üî¥"
			reasons.append(f"‚úì –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ: {sell_count}/{total_tf} —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç SELL")
		
		# –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ - –æ—Å—Ç–∞—ë–º—Å—è –≤ HOLD
		else:
			final_signal = "HOLD"
			signal_emoji = "‚ö†Ô∏è"
			reasons.append(f"‚ö†Ô∏è –ö–û–ù–§–õ–ò–ö–¢ –¢–ê–ô–ú–§–†–ï–ô–ú–û–í: BUY={buy_count}, SELL={sell_count}, HOLD={hold_count}")
			reasons.append(f"   Weighted scores: BUY={buy_score:.2f}, SELL={sell_score:.2f}, HOLD={hold_score:.2f}")
		
		# ====================================================================
		# 5. –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢
		# ====================================================================
		
		# –ë–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ (–æ–±—ã—á–Ω–æ 1h)
		main_tf = '1h' if '1h' in timeframe_signals else MTF_TIMEFRAMES[0]
		main_data = timeframe_signals.get(main_tf, {})
		
		# –†–∞—Å—á—ë—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞ (–¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏)
		signal_strength = 0
		if final_signal == "BUY":
			signal_strength = int(buy_score * 3)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ scale ~3-15
		elif final_signal == "SELL":
			signal_strength = int(sell_score * 3)
		
		result = {
			"signal": final_signal,
			"signal_emoji": signal_emoji,
			"price": main_data.get("price", 0),
			"strategy": f"{strategy}_MTF",
			
			# Multi-timeframe –¥–∞–Ω–Ω—ã–µ
			"mtf_enabled": True,
			"timeframe_signals": timeframe_signals,
			"alignment_strength": alignment_strength,
			"buy_score": buy_score,
			"sell_score": sell_score,
			"hold_score": hold_score,
			"buy_count": buy_count,
			"sell_count": sell_count,
			"hold_count": hold_count,
			
			# –î–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
			"RSI": main_data.get("RSI", 0),
			"ADX": main_data.get("ADX", 0),
			"MACD_hist": main_data.get("MACD_hist", 0),
			"market_regime": main_data.get("market_regime", "NEUTRAL"),
			
			# –ì–æ–ª–æ—Å–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
			"bullish_votes": signal_strength if final_signal == "BUY" else 0,
			"bearish_votes": signal_strength if final_signal == "SELL" else 0,
			
			# –ü—Ä–∏—á–∏–Ω—ã
			"reasons": reasons
		}
		
		return result
