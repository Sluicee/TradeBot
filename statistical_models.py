import pandas as pd
import numpy as np
from typing import Dict, Any, List, Tuple
import json
import os
from datetime import datetime, timedelta
from logger import logger

# ====================================================================
# BAYESIAN DECISION LAYER
# ====================================================================

class BayesianDecisionLayer:
	"""
	–•—Ä–∞–Ω–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞ –∏ –≤—ã—á–∏—Å–ª—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞.
	P(profit | signal) = —É—Å–ø–µ—à–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã / –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
	"""
	
	def __init__(self, stats_file: str = "signal_statistics.json"):
		self.stats_file = stats_file
		self.stats = self._load_stats()
	
	def _load_stats(self) -> Dict:
		"""–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ñ–∞–π–ª–∞"""
		if os.path.exists(self.stats_file):
			try:
				with open(self.stats_file, 'r', encoding='utf-8') as f:
					return json.load(f)
			except Exception as e:
				logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")
		return {"signals": {}, "last_updated": None}
	
	def _save_stats(self):
		"""–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª"""
		try:
			self.stats["last_updated"] = datetime.now().isoformat()
			with open(self.stats_file, 'w', encoding='utf-8') as f:
				json.dump(self.stats, f, ensure_ascii=False, indent=2)
		except Exception as e:
			logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
	
	def get_signal_signature(self, signal_data: Dict) -> str:
		"""
		–°–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ª–æ–≤–∏–π.
		–ù–∞–ø—Ä–∏–º–µ—Ä: "RSI<30_EMA_CROSS_UP_ADX>25_TRENDING"
		"""
		components = []
		
		# RSI
		rsi = signal_data.get("RSI", 50)
		if rsi < 30:
			components.append("RSI<30")
		elif rsi < 40:
			components.append("RSI<40")
		elif rsi > 70:
			components.append("RSI>70")
		elif rsi > 60:
			components.append("RSI>60")
		else:
			components.append("RSI_NEUTRAL")
		
		# EMA Crossover
		ema_short = signal_data.get("EMA_short", 0)
		ema_long = signal_data.get("EMA_long", 0)
		if ema_short > ema_long:
			components.append("EMA_CROSS_UP")
		else:
			components.append("EMA_CROSS_DOWN")
		
		# ADX
		adx = signal_data.get("ADX", 0)
		if adx > 30:
			components.append("ADX>30")
		elif adx > 25:
			components.append("ADX>25")
		elif adx < 20:
			components.append("ADX<20")
		else:
			components.append("ADX_MODERATE")
		
		# Market Regime
		regime = signal_data.get("market_regime", "NEUTRAL")
		components.append(regime)
		
		# MACD
		macd_hist = signal_data.get("MACD_hist", 0)
		if macd_hist > 0:
			components.append("MACD_POS")
		else:
			components.append("MACD_NEG")
		
		return "_".join(components)
	
	def record_signal(self, signal_signature: str, signal_type: str, entry_price: float):
		"""–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"""
		if signal_signature not in self.stats["signals"]:
			self.stats["signals"][signal_signature] = {
				"total": 0,
				"profitable": 0,
				"losing": 0,
				"total_profit": 0.0,
				"total_loss": 0.0,
				"avg_profit": 0.0,
				"avg_loss": 0.0,
				"pending": []
			}
		
		# –î–æ–±–∞–≤–ª—è–µ–º –≤ pending
		self.stats["signals"][signal_signature]["pending"].append({
			"signal_type": signal_type,
			"entry_price": entry_price,
			"timestamp": datetime.now().isoformat()
		})
		
		self._save_stats()
	
	def complete_signal(self, signal_signature: str, exit_price: float, entry_price: float):
		"""–ó–∞–≤–µ—Ä—à–∞–µ–º —Å–∏–≥–Ω–∞–ª –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
		if signal_signature not in self.stats["signals"]:
			return
		
		sig_stats = self.stats["signals"][signal_signature]
		profit_percent = ((exit_price - entry_price) / entry_price) * 100
		
		sig_stats["total"] += 1
		
		if profit_percent > 0:
			sig_stats["profitable"] += 1
			sig_stats["total_profit"] += profit_percent
			sig_stats["avg_profit"] = sig_stats["total_profit"] / sig_stats["profitable"]
		else:
			sig_stats["losing"] += 1
			sig_stats["total_loss"] += abs(profit_percent)
			sig_stats["avg_loss"] = sig_stats["total_loss"] / sig_stats["losing"] if sig_stats["losing"] > 0 else 0
		
		# –£–±–∏—Ä–∞–µ–º –∏–∑ pending
		sig_stats["pending"] = [p for p in sig_stats["pending"] if abs(p["entry_price"] - entry_price) > 0.0001]
		
		self._save_stats()
	
	def get_success_probability(self, signal_signature: str, min_samples: int = 10) -> float:
		"""
		–í—ã—á–∏—Å–ª—è–µ–º P(profit | signal) —Å —É—á—ë—Ç–æ–º —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è (Bayesian smoothing).
		–ò—Å–ø–æ–ª—å–∑—É–µ–º Beta prior –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è –º–∞–ª—ã—Ö –≤—ã–±–æ—Ä–æ–∫.
		"""
		if signal_signature not in self.stats["signals"]:
			return 0.5  # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö - –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
		
		sig_stats = self.stats["signals"][signal_signature]
		total = sig_stats["total"]
		
		if total < min_samples:
			# –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö - –∏—Å–ø–æ–ª—å–∑—É–µ–º Bayesian prior
			# Prior: Beta(alpha=5, beta=5) = —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Å –Ω–µ–±–æ–ª—å—à–∏–º —Å–º–µ—â–µ–Ω–∏–µ–º –∫ 0.5
			alpha_prior = 5
			beta_prior = 5
			
			# Posterior: Beta(alpha + successes, beta + failures)
			alpha_post = alpha_prior + sig_stats["profitable"]
			beta_post = beta_prior + sig_stats["losing"]
			
			# –û–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Beta —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
			probability = alpha_post / (alpha_post + beta_post)
		else:
			# –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö - –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–ø–∏—Ä–∏—á–µ—Å–∫—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
			probability = sig_stats["profitable"] / total if total > 0 else 0.5
		
		return probability
	
	def should_take_signal(
		self, signal_signature: str, 
		min_probability: float = 0.55,
		min_samples: int = 10
	) -> Tuple[bool, float, str]:
		"""
		–†–µ—à–µ–Ω–∏–µ: –≤—Ö–æ–¥–∏—Ç—å –≤ —Å–¥–µ–ª–∫—É –∏–ª–∏ –Ω–µ—Ç.
		
		Returns:
			(should_take, probability, reason)
		"""
		prob = self.get_success_probability(signal_signature, min_samples)
		
		if signal_signature not in self.stats["signals"]:
			reason = f"–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ (P={prob:.2%}, –∏—Å–ø–æ–ª—å–∑—É–µ–º prior)"
			return prob >= min_probability, prob, reason
		
		sig_stats = self.stats["signals"][signal_signature]
		total = sig_stats["total"]
		
		if total < min_samples:
			reason = f"–ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö ({total} —Å–∏–≥–Ω–∞–ª–æ–≤, P={prob:.2%} —Å prior)"
		else:
			profitable = sig_stats["profitable"]
			reason = f"–ò—Å—Ç–æ—Ä–∏—è: {profitable}/{total} —É—Å–ø–µ—à–Ω—ã—Ö (P={prob:.2%})"
		
		should_take = prob >= min_probability
		
		if should_take:
			avg_profit = sig_stats.get("avg_profit", 0)
			avg_loss = sig_stats.get("avg_loss", 0)
			if avg_profit > 0 and avg_loss > 0:
				risk_reward = avg_profit / avg_loss
				reason += f", R:R={risk_reward:.2f}"
		
		return should_take, prob, reason
	
	def get_stats_summary(self) -> str:
		"""–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"""
		if not self.stats["signals"]:
			return "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞"
		
		lines = ["üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–ì–ù–ê–õ–û–í:\n"]
		
		# –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–≥–Ω–∞–ª–æ–≤
		sorted_sigs = sorted(
			self.stats["signals"].items(),
			key=lambda x: x[1]["total"],
			reverse=True
		)
		
		for sig_name, sig_stats in sorted_sigs[:10]:  # –¢–æ–ø-10
			total = sig_stats["total"]
			if total == 0:
				continue
			
			prof = sig_stats["profitable"]
			loss = sig_stats["losing"]
			prob = prof / total if total > 0 else 0
			
			avg_p = sig_stats.get("avg_profit", 0)
			avg_l = sig_stats.get("avg_loss", 0)
			
			lines.append(f"\n{sig_name[:60]}...")
			lines.append(f"  –í—Å–µ–≥–æ: {total}, Win: {prof}, Loss: {loss}, P={prob:.1%}")
			lines.append(f"  Avg Profit: {avg_p:.2f}%, Avg Loss: {avg_l:.2f}%")
		
		return "\n".join(lines)


# ====================================================================
# Z-SCORE MEAN REVERSION ANALYZER
# ====================================================================

class ZScoreAnalyzer:
	"""
	Z-score –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è mean reversion —Å–∏–≥–Ω–∞–ª–æ–≤.
	z = (price - SMA) / std(price - SMA)
	"""
	
	def __init__(self, window: int = 50, buy_threshold: float = -2.0, sell_threshold: float = 2.0):
		self.window = window
		self.buy_threshold = buy_threshold
		self.sell_threshold = sell_threshold
	
	def calculate_zscore(self, df: pd.DataFrame, column: str = "close") -> pd.Series:
		"""–í—ã—á–∏—Å–ª—è–µ–º z-score –¥–ª—è —Ü–µ–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ SMA"""
		if len(df) < self.window:
			return pd.Series([0] * len(df), index=df.index)
		
		close = df[column].astype(float)
		sma = close.rolling(window=self.window).mean()
		
		# –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç SMA
		deviation = close - sma
		
		# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
		std = deviation.rolling(window=self.window).std()
		
		# Z-score
		zscore = deviation / std
		zscore = zscore.fillna(0)
		
		return zscore
	
	def generate_signal(self, df: pd.DataFrame) -> Dict[str, Any]:
		"""
		–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª mean reversion –Ω–∞ –æ—Å–Ω–æ–≤–µ z-score.
		
		Returns:
			{
				"signal": "BUY" | "SELL" | "HOLD",
				"zscore": float,
				"confidence": float,
				"reason": str
			}
		"""
		if df.empty or len(df) < self.window:
			return {
				"signal": "HOLD",
				"zscore": 0,
				"confidence": 0,
				"reason": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è z-score"
			}
		
		zscore_series = self.calculate_zscore(df)
		current_zscore = zscore_series.iloc[-1]
		
		signal = "HOLD"
		confidence = 0
		reason = ""
		
		if current_zscore <= self.buy_threshold:
			# –¶–µ–Ω–∞ —Å–∏–ª—å–Ω–æ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ - –≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç—Å–∫–æ–∫ –≤–≤–µ—Ä—Ö
			signal = "BUY"
			confidence = min(1.0, abs(current_zscore) / abs(self.buy_threshold))
			reason = f"Z-score={current_zscore:.2f} < {self.buy_threshold} - —Ü–µ–Ω–∞ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–∞ (mean reversion)"
		elif current_zscore >= self.sell_threshold:
			# –¶–µ–Ω–∞ —Å–∏–ª—å–Ω–æ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ - –≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç–∫–∞—Ç –≤–Ω–∏–∑
			signal = "SELL"
			confidence = min(1.0, abs(current_zscore) / abs(self.sell_threshold))
			reason = f"Z-score={current_zscore:.2f} > {self.sell_threshold} - —Ü–µ–Ω–∞ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–∞ (mean reversion)"
		else:
			reason = f"Z-score={current_zscore:.2f} - —Ü–µ–Ω–∞ –≤ –Ω–æ—Ä–º–µ"
		
		return {
			"signal": signal,
			"zscore": current_zscore,
			"confidence": confidence,
			"reason": reason
		}


# ====================================================================
# MARKOV REGIME SWITCHING MODEL
# ====================================================================

class MarkovRegimeSwitcher:
	"""
	–£–ø—Ä–æ—â—ë–Ω–Ω–∞—è Markov Switching Model –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ä–µ–∂–∏–º–æ–≤ —Ä—ã–Ω–∫–∞.
	
	–†–µ–∂–∏–º—ã:
	- BULL: –ë—ã—á–∏–π —Ä—ã–Ω–æ–∫ (–≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥, –Ω–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)
	- BEAR: –ú–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫ (–Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥, –Ω–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)
	- HIGH_VOL: –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (–ª—é–±–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)
	- SIDEWAYS: –ë–æ–∫–æ–≤–∏–∫ (—Ñ–ª—ç—Ç)
	"""
	
	def __init__(
		self,
		window: int = 50,
		vol_threshold_high: float = 0.03,  # 3% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
		vol_threshold_low: float = 0.01,   # 1% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
		trend_threshold: float = 0.02      # 2% —Ç—Ä–µ–Ω–¥ –∑–∞ –ø–µ—Ä–∏–æ–¥
	):
		self.window = window
		self.vol_threshold_high = vol_threshold_high
		self.vol_threshold_low = vol_threshold_low
		self.trend_threshold = trend_threshold
		
		# Transition matrix (–ø—Ä–∏–º–µ—Ä–Ω–∞—è, –º–æ–∂–Ω–æ –æ–±—É—á–∞—Ç—å –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏)
		# P[from_state][to_state]
		self.transition_matrix = {
			"BULL": {"BULL": 0.85, "BEAR": 0.05, "HIGH_VOL": 0.05, "SIDEWAYS": 0.05},
			"BEAR": {"BULL": 0.05, "BEAR": 0.85, "HIGH_VOL": 0.05, "SIDEWAYS": 0.05},
			"HIGH_VOL": {"BULL": 0.25, "BEAR": 0.25, "HIGH_VOL": 0.30, "SIDEWAYS": 0.20},
			"SIDEWAYS": {"BULL": 0.20, "BEAR": 0.20, "HIGH_VOL": 0.10, "SIDEWAYS": 0.50}
		}
		
		self.current_regime = "SIDEWAYS"
		self.regime_history = []
	
	def calculate_returns(self, df: pd.DataFrame, window: int = None) -> float:
		"""–í—ã—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ –æ–∫–Ω–æ"""
		if window is None:
			window = self.window
		
		if len(df) < window:
			return 0.0
		
		prices = df["close"].iloc[-window:]
		returns = (prices.iloc[-1] - prices.iloc[0]) / prices.iloc[0]
		
		return returns
	
	def calculate_volatility(self, df: pd.DataFrame, window: int = None) -> float:
		"""–í—ã—á–∏—Å–ª—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π)"""
		if window is None:
			window = self.window
		
		if len(df) < window:
			return 0.0
		
		prices = df["close"].iloc[-window:]
		log_returns = np.log(prices / prices.shift(1)).dropna()
		
		volatility = log_returns.std()
		
		return volatility
	
	def detect_regime(self, df: pd.DataFrame) -> Dict[str, Any]:
		"""
		–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞.
		
		Returns:
			{
				"regime": str,
				"confidence": float,
				"returns": float,
				"volatility": float,
				"reason": str
			}
		"""
		if len(df) < self.window:
			return {
				"regime": "SIDEWAYS",
				"confidence": 0.5,
				"returns": 0,
				"volatility": 0,
				"reason": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
			}
		
		returns = self.calculate_returns(df)
		volatility = self.calculate_volatility(df)
		
		# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
		regime = "SIDEWAYS"
		confidence = 0.5
		reason = ""
		
		if volatility > self.vol_threshold_high:
			regime = "HIGH_VOL"
			confidence = min(1.0, volatility / self.vol_threshold_high)
			reason = f"–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å {volatility:.2%}"
		elif abs(returns) < self.trend_threshold and volatility < self.vol_threshold_low:
			regime = "SIDEWAYS"
			confidence = 1.0 - (abs(returns) / self.trend_threshold)
			reason = f"–ë–æ–∫–æ–≤–∏–∫: –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å {returns:.2%}, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å {volatility:.2%}"
		elif returns > self.trend_threshold:
			regime = "BULL"
			confidence = min(1.0, returns / (self.trend_threshold * 2))
			reason = f"–ë—ã—á–∏–π —Ä—ã–Ω–æ–∫: –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å {returns:.2%}"
		elif returns < -self.trend_threshold:
			regime = "BEAR"
			confidence = min(1.0, abs(returns) / (self.trend_threshold * 2))
			reason = f"–ú–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫: –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å {returns:.2%}"
		
		# –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Å —É—á—ë—Ç–æ–º transition matrix (—Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ)
		if self.current_regime:
			transition_prob = self.transition_matrix[self.current_regime].get(regime, 0.1)
			# –ï—Å–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∏–∑–∫–∞—è - —Å–Ω–∏–∂–∞–µ–º confidence
			confidence *= transition_prob * 2  # Boost –¥–ª—è –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
			confidence = min(1.0, confidence)
		
		self.current_regime = regime
		self.regime_history.append({
			"regime": regime,
			"timestamp": datetime.now().isoformat(),
			"returns": returns,
			"volatility": volatility
		})
		
		# –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π
		if len(self.regime_history) > 100:
			self.regime_history = self.regime_history[-100:]
		
		return {
			"regime": regime,
			"confidence": confidence,
			"returns": returns,
			"volatility": volatility,
			"reason": reason
		}
	
	def get_regime_stats(self) -> str:
		"""–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–∂–∏–º–∞–º"""
		if not self.regime_history:
			return "–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–∂–∏–º–æ–≤"
		
		regimes = [r["regime"] for r in self.regime_history]
		from collections import Counter
		counts = Counter(regimes)
		
		lines = ["üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–ñ–ò–ú–û–í:\n"]
		for regime, count in counts.most_common():
			percent = (count / len(regimes)) * 100
			lines.append(f"{regime}: {count} ({percent:.1f}%)")
		
		return "\n".join(lines)
	
	def should_trade_in_regime(self, regime: str, signal_type: str) -> Tuple[bool, str]:
		"""
		–û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ.
		
		Returns:
			(should_trade, reason)
		"""
		if regime == "HIGH_VOL":
			# –í –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–æ
			return False, "–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - —Ä–∏—Å–∫ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫"
		
		elif regime == "BULL" and signal_type == "BUY":
			# –í –±—ã—á—å–µ–º —Ä—ã–Ω–∫–µ –ø–æ–∫—É–ø–∞–µ–º –Ω–∞ –æ—Ç–∫–∞—Ç–∞—Ö
			return True, "–ë—ã—á–∏–π —Ä—ã–Ω–æ–∫ - BUY —Å–∏–≥–Ω–∞–ª –ø–æ–¥—Ö–æ–¥–∏—Ç"
		
		elif regime == "BEAR" and signal_type == "SELL":
			# –í –º–µ–¥–≤–µ–∂—å–µ–º —Ä—ã–Ω–∫–µ –ø—Ä–æ–¥–∞—ë–º –Ω–∞ –æ—Ç—Å–∫–æ–∫–∞—Ö
			return True, "–ú–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫ - SELL —Å–∏–≥–Ω–∞–ª –ø–æ–¥—Ö–æ–¥–∏—Ç"
		
		elif regime == "SIDEWAYS":
			# –í –±–æ–∫–æ–≤–∏–∫–µ —Ç–æ—Ä–≥—É–µ–º mean reversion
			return True, "–ë–æ–∫–æ–≤–∏–∫ - –º–æ–∂–Ω–æ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å mean reversion"
		
		else:
			# –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ–∂–∏–º–∞ –∏ —Å–∏–≥–Ω–∞–ª–∞
			return False, f"–†–µ–∂–∏–º {regime} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è {signal_type}"


# ====================================================================
# ENSEMBLE DECISION MAKER
# ====================================================================

class EnsembleDecisionMaker:
	"""
	–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è.
	"""
	
	def __init__(
		self,
		bayesian_layer: BayesianDecisionLayer,
		zscore_analyzer: ZScoreAnalyzer,
		regime_switcher: MarkovRegimeSwitcher,
		bayesian_weight: float = 0.4,
		zscore_weight: float = 0.3,
		regime_weight: float = 0.3
	):
		self.bayesian = bayesian_layer
		self.zscore = zscore_analyzer
		self.regime = regime_switcher
		
		# –í–µ—Å–∞ –¥–ª—è weighted voting
		self.bayesian_weight = bayesian_weight
		self.zscore_weight = zscore_weight
		self.regime_weight = regime_weight
	
	def make_decision(
		self, 
		df: pd.DataFrame,
		original_signal: Dict[str, Any],
		min_probability: float = 0.55
	) -> Dict[str, Any]:
		"""
		–ü—Ä–∏–Ω–∏–º–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å —É—á—ë—Ç–æ–º –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π.
		
		Returns:
			{
				"final_signal": "BUY" | "SELL" | "HOLD",
				"confidence": float,
				"reasons": List[str],
				"models": {
					"bayesian": {...},
					"zscore": {...},
					"regime": {...}
				}
			}
		"""
		reasons = []
		
		# 1. Bayesian Decision
		signal_signature = self.bayesian.get_signal_signature(original_signal)
		should_take_bayesian, bayesian_prob, bayesian_reason = self.bayesian.should_take_signal(
			signal_signature, min_probability
		)
		reasons.append(f"üéØ Bayesian: {bayesian_reason}")
		
		# 2. Z-Score Analysis
		zscore_result = self.zscore.generate_signal(df)
		reasons.append(f"üìä {zscore_result['reason']}")
		
		# 3. Regime Detection
		regime_result = self.regime.detect_regime(df)
		reasons.append(f"üîÑ {regime_result['reason']}")
		
		# 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Ä–µ–∂–∏–º –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
		original_signal_type = original_signal.get("signal", "HOLD")
		should_trade_regime, regime_trade_reason = self.regime.should_trade_in_regime(
			regime_result["regime"], original_signal_type
		)
		reasons.append(f"‚úì –†–µ–∂–∏–º: {regime_trade_reason}")
		
		# 5. Weighted Voting
		buy_score = 0
		sell_score = 0
		hold_score = 0
		
		# Bayesian
		if should_take_bayesian:
			if original_signal_type == "BUY":
				buy_score += self.bayesian_weight * bayesian_prob
			elif original_signal_type == "SELL":
				sell_score += self.bayesian_weight * bayesian_prob
		else:
			hold_score += self.bayesian_weight
		
		# Z-Score
		if zscore_result["signal"] == "BUY":
			buy_score += self.zscore_weight * zscore_result["confidence"]
		elif zscore_result["signal"] == "SELL":
			sell_score += self.zscore_weight * zscore_result["confidence"]
		else:
			hold_score += self.zscore_weight * 0.5
		
		# Regime
		if should_trade_regime:
			if original_signal_type == "BUY":
				buy_score += self.regime_weight * regime_result["confidence"]
			elif original_signal_type == "SELL":
				sell_score += self.regime_weight * regime_result["confidence"]
		else:
			hold_score += self.regime_weight
		
		# 6. –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
		max_score = max(buy_score, sell_score, hold_score)
		
		if max_score == buy_score and buy_score > 0.5:
			final_signal = "BUY"
			confidence = buy_score
		elif max_score == sell_score and sell_score > 0.5:
			final_signal = "SELL"
			confidence = sell_score
		else:
			final_signal = "HOLD"
			confidence = hold_score
		
		reasons.append(f"\nüí° –§–∏–Ω–∞–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏: BUY={buy_score:.2f}, SELL={sell_score:.2f}, HOLD={hold_score:.2f}")
		reasons.append(f"‚úÖ –†–µ—à–µ–Ω–∏–µ: {final_signal} (confidence={confidence:.2%})")
		
		return {
			"final_signal": final_signal,
			"confidence": confidence,
			"reasons": reasons,
			"models": {
				"bayesian": {
					"should_take": should_take_bayesian,
					"probability": bayesian_prob,
					"signature": signal_signature
				},
				"zscore": zscore_result,
				"regime": regime_result
			}
		}

