import pandas as pd
import numpy as np
import ta
import requests
import json
from typing import Dict, Any, Optional
from logger import logger
from config import (
	# –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
	SMA_PERIODS, EMA_PERIODS, EMA_SHORT_WINDOW, EMA_LONG_WINDOW,
	RSI_WINDOW, RSI_OVERSOLD, RSI_OVERSOLD_NEAR, RSI_OVERBOUGHT, RSI_OVERBOUGHT_NEAR,
	RSI_BUY_RANGE, RSI_SELL_RANGE,
	MACD_FAST, MACD_SLOW, MACD_SIGNAL,
	ADX_WINDOW, ADX_TRENDING, ADX_RANGING, ADX_STRONG, ADX_MODERATE,
	STOCH_WINDOW, STOCH_SMOOTH_WINDOW, STOCH_OVERSOLD, STOCH_OVERBOUGHT,
	ATR_WINDOW, VOLUME_MA_WINDOW, VOLUME_HIGH_RATIO, VOLUME_MODERATE_RATIO, VOLUME_LOW_RATIO,
	# –í–µ—Å–∞ –∏ –ø–æ—Ä–æ–≥–∏
	TRENDING_TREND_WEIGHT, TRENDING_OSCILLATOR_WEIGHT,
	RANGING_TREND_WEIGHT, RANGING_OSCILLATOR_WEIGHT,
	TRANSITIONING_TREND_WEIGHT, TRANSITIONING_OSCILLATOR_WEIGHT,
	VOTE_THRESHOLD_TRENDING, VOTE_THRESHOLD_RANGING, VOTE_THRESHOLD_TRANSITIONING,
	MIN_FILTERS,
	# Mean Reversion
	MR_RSI_OVERSOLD, MR_RSI_EXIT, MR_ZSCORE_BUY_THRESHOLD, MR_ZSCORE_SELL_THRESHOLD,
	MR_ZSCORE_STRONG_BUY, MR_ADX_MAX, MR_EMA_DIVERGENCE_MAX, MR_ZSCORE_WINDOW,
	MR_POSITION_SIZE_STRONG, MR_POSITION_SIZE_MEDIUM, MR_POSITION_SIZE_WEAK,
	# –§–∏–ª—å—Ç—Ä—ã "–ø–∞–¥–∞—é—â–µ–≥–æ –Ω–æ–∂–∞" v5
	NO_BUY_IF_PRICE_BELOW_N_DAY_LOW_PERCENT, NO_BUY_IF_EMA200_SLOPE_NEG, EMA200_NEG_SLOPE_THRESHOLD,
	USE_RED_CANDLES_FILTER, USE_VOLUME_FILTER, VOLUME_SPIKE_THRESHOLD,
	# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π SL/TP v5
	USE_DYNAMIC_SL_FOR_MR, MR_ATR_SL_MULTIPLIER, MR_ATR_SL_MIN, MR_ATR_SL_MAX,
	ADAPTIVE_SL_ON_RISK, ADAPTIVE_SL_MULTIPLIER,
	USE_DYNAMIC_TP_FOR_MR, MR_ATR_TP_MULTIPLIER, MR_ATR_TP_MIN, MR_ATR_TP_MAX,
	# –ì–∏–±—Ä–∏–¥–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
	STRATEGY_HYBRID_MODE, HYBRID_ADX_MR_THRESHOLD, HYBRID_ADX_TF_THRESHOLD,
	HYBRID_TRANSITION_MODE, HYBRID_MIN_TIME_IN_MODE,
	# Multi-timeframe –∞–Ω–∞–ª–∏–∑
	USE_MULTI_TIMEFRAME, MTF_TIMEFRAMES, MTF_WEIGHTS, MTF_MIN_AGREEMENT, MTF_FULL_ALIGNMENT_BONUS,
	# SHORT v2.1 - Adaptive Fear SHORT
	USE_ADVANCED_SHORT, SHORT_VERSION, SHORT_POSITION_SIZE_EXTREME_FEAR, SHORT_POSITION_SIZE_HIGH_FEAR,
	SHORT_POSITION_SIZE_MODERATE_FEAR, SHORT_POSITION_SIZE_NEUTRAL,
	SHORT_FEAR_EXTREME_THRESHOLD, SHORT_FEAR_HIGH_THRESHOLD, SHORT_FEAR_MODERATE_THRESHOLD,
	SHORT_FEAR_INERTIA_THRESHOLD, SHORT_FEAR_INERTIA_CANDLES, SHORT_FEAR_INERTIA_BONUS,
	SHORT_FEAR_WEIGHT, SHORT_FUNDING_WEIGHT, SHORT_LIQUIDATION_WEIGHT, SHORT_RSI_WEIGHT, SHORT_EMA_WEIGHT, SHORT_VOLATILITY_WEIGHT,
	SHORT_MIN_SCORE, SHORT_API_TIMEOUT, SHORT_FUNDING_RATE_THRESHOLD, SHORT_LIQUIDATION_RATIO_THRESHOLD,
	SHORT_VOLATILITY_MULTIPLIER, SHORT_VOLATILITY_BONUS, SHORT_BTC_DOMINANCE_THRESHOLD,
	SHORT_BTC_DOMINANCE_FEAR_THRESHOLD, SHORT_BTC_DOMINANCE_BONUS,
	SHORT_FALLBACK_FUNDING_RATE, SHORT_FALLBACK_LONG_LIQUIDATIONS, SHORT_FALLBACK_SHORT_LIQUIDATIONS, SHORT_FALLBACK_BTC_DOMINANCE
)

try:
	from statistical_models import (
		BayesianDecisionLayer,
		ZScoreAnalyzer,
		MarkovRegimeSwitcher,
		EnsembleDecisionMaker
	)
	STATISTICAL_MODELS_AVAILABLE = True
except ImportError:
	STATISTICAL_MODELS_AVAILABLE = False
	logger.warning("–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã")

class SignalGenerator:
	def __init__(self, df: pd.DataFrame, use_statistical_models: bool = False):
		self.df = df.copy()
		if "close" not in self.df.columns:
			raise ValueError("DataFrame must contain 'close' column")
		self.df.sort_index(inplace=True)
		
		# –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
		self.use_statistical_models = use_statistical_models and STATISTICAL_MODELS_AVAILABLE
		if self.use_statistical_models:
			self.bayesian = BayesianDecisionLayer()
			self.zscore = ZScoreAnalyzer(window=50, buy_threshold=-2.0, sell_threshold=2.0)
			self.regime = MarkovRegimeSwitcher(window=50)
			self.ensemble = EnsembleDecisionMaker(
				self.bayesian, self.zscore, self.regime,
				bayesian_weight=0.4, zscore_weight=0.3, regime_weight=0.3
			)

	def get_market_regime(self, df: pd.DataFrame, fear_greed_index: int = 50) -> str:
		"""
		üéØ –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –†–´–ù–û–ß–ù–û–ì–û –†–ï–ñ–ò–ú–ê
		
		–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç EMA200, ADX –∏ –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞.
		
		–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
		- df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
		- fear_greed_index: –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞/–∂–∞–¥–Ω–æ—Å—Ç–∏ (0-100)
		
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
		- "BEAR": –º–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫ (EMA200 –ø–∞–¥–∞–µ—Ç, ADX>20, —Å—Ç—Ä–∞—Ö<40)
		- "BULL": –±—ã—á–∏–π —Ä—ã–Ω–æ–∫ (EMA200 —Ä–∞—Å—Ç—ë—Ç, —Å—Ç—Ä–∞—Ö>60)
		- "NEUTRAL": –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
		"""
		if len(df) < 200:
			return "NEUTRAL"
		
		try:
			# EMA200 –∏ –µ—ë –Ω–∞–∫–ª–æ–Ω
			ema200 = ta.trend.ema_indicator(df['close'], window=200)
			if len(ema200) < 10 or ema200.isna().all():
				return "NEUTRAL"
			
			# –ù–∞–∫–ª–æ–Ω EMA200 –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–µ—Ä–∏–æ–¥–æ–≤
			slope = (ema200.iloc[-1] - ema200.iloc[-10]) / ema200.iloc[-10]
			
			# ADX –¥–ª—è —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞
			adx = ta.trend.adx(df['high'], df['low'], df['close'], window=14)
			if len(adx) == 0 or adx.isna().all():
				adx_value = 0
			else:
				adx_value = adx.iloc[-1]
			
			# –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è)
			if slope < -0.001 and fear_greed_index < 40:  # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–µ —É—Å–ª–æ–≤–∏—è
				return "BEAR"
			elif slope > 0.001 and fear_greed_index > 60:
				return "BULL"
			else:
				return "NEUTRAL"
		except Exception:
			return "NEUTRAL"

	def should_short(self, df: pd.DataFrame, fear_greed_index: int = 50) -> bool:
		"""
		üî¥ –ê–ö–¢–ò–í–ê–¶–ò–Ø SHORT-–ú–ï–•–ê–ù–ò–ö–ò
		
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Ä—ã–Ω–æ–∫ –º–µ–¥–≤–µ–∂–∏–π –∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä–∞—Ö.
		–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–∏–ª—å–Ω–æ–º –ø–∞–¥–∞—é—â–µ–º —Ç—Ä–µ–Ω–¥–µ.
		
		–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
		- df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
		- fear_greed_index: –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞/–∂–∞–¥–Ω–æ—Å—Ç–∏ (0-100)
		
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
		- True: –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å SHORT –ø–æ–∑–∏—Ü–∏–∏
		- False: SHORT –æ—Ç–∫–ª—é—á—ë–Ω
		"""
		regime = self.get_market_regime(df, fear_greed_index)
		return regime == "BEAR" and fear_greed_index < 40

	def get_fear_greed_index(self) -> int:
		"""
		üìä –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–î–ï–ö–°–ê –°–¢–†–ê–•–ê/–ñ–ê–î–ù–û–°–¢–ò
		
		–ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –æ—Ç CNN Fear & Greed Index API.
		–ï—Å–ª–∏ –Ω–µ —É–¥–∞—ë—Ç—Å—è, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏.
		
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
		- int: –∏–Ω–¥–µ–∫—Å –æ—Ç 0 (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∞—Ö) –¥–æ 100 (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∂–∞–¥–Ω–æ—Å—Ç—å)
		"""
		try:
			# –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç CNN Fear & Greed Index
			response = requests.get("https://api.alternative.me/fng/", timeout=5)
			if response.status_code == 200:
				data = response.json()
				if 'data' in data and len(data['data']) > 0:
					fear_greed = int(data['data'][0]['value'])
					logger.info(f"–ü–æ–ª—É—á–µ–Ω –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –æ—Ç API: {fear_greed}")
					return fear_greed
		except Exception as e:
			logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –æ—Ç API: {e}")
		
		# Fallback: —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
		return self._calculate_custom_fear_greed_index()
	
	def _calculate_custom_fear_greed_index(self) -> int:
		"""
		üßÆ –°–û–ë–°–¢–í–ï–ù–ù–´–ô –†–ê–°–ß–Å–¢ –ò–ù–î–ï–ö–°–ê –°–¢–†–ê–•–ê/–ñ–ê–î–ù–û–°–¢–ò
		
		–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å, –æ–±—ä—ë–º—ã –∏ —Ç—Ä–µ–Ω–¥—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π —Ä—ã–Ω–∫–∞.
		
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
		- int: –∏–Ω–¥–µ–∫—Å –æ—Ç 0 (—Å—Ç—Ä–∞—Ö) –¥–æ 100 (–∂–∞–¥–Ω–æ—Å—Ç—å)
		"""
		if len(self.df) < 50:
			return 50  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö
		
		try:
			# 1. –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (–≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å = —Å—Ç—Ä–∞—Ö)
			atr = ta.volatility.average_true_range(
				self.df['high'], self.df['low'], self.df['close'], window=14
			)
			current_atr = atr.iloc[-1]
			avg_atr = atr.tail(20).mean()
			volatility_ratio = current_atr / avg_atr if avg_atr > 0 else 1.0
			
			# 2. –ê–Ω–∞–ª–∏–∑ –æ–±—ä—ë–º–æ–≤ (–≤—ã—Å–æ–∫–∏–µ –æ–±—ä—ë–º—ã –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ = —Å—Ç—Ä–∞—Ö)
			volume = self.df['volume']
			current_volume = volume.iloc[-1]
			avg_volume = volume.tail(20).mean()
			volume_ratio = current_volume / avg_volume if avg_volume > 0 else 1.0
			
			# 3. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ (–ø–∞–¥–µ–Ω–∏–µ = —Å—Ç—Ä–∞—Ö)
			price_change_1d = (self.df['close'].iloc[-1] - self.df['close'].iloc[-24]) / self.df['close'].iloc[-24] if len(self.df) >= 24 else 0
			price_change_7d = (self.df['close'].iloc[-1] - self.df['close'].iloc[-168]) / self.df['close'].iloc[-168] if len(self.df) >= 168 else 0
			
			# 4. RSI –∞–Ω–∞–ª–∏–∑ (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å = —Å—Ç—Ä–∞—Ö)
			rsi = ta.momentum.rsi(self.df['close'], window=14)
			current_rsi = rsi.iloc[-1]
			
			# –†–∞—Å—á—ë—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–Ω–¥–µ–∫—Å–∞
			volatility_score = max(0, min(100, 100 - (volatility_ratio - 1) * 50))  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å = –Ω–∏–∑–∫–∏–π –∏–Ω–¥–µ–∫—Å
			volume_score = max(0, min(100, 100 - (volume_ratio - 1) * 30))  # –í—ã—Å–æ–∫–∏–µ –æ–±—ä—ë–º—ã = –Ω–∏–∑–∫–∏–π –∏–Ω–¥–µ–∫—Å
			trend_score = max(0, min(100, 50 + price_change_1d * 1000))  # –ü–∞–¥–µ–Ω–∏–µ = –Ω–∏–∑–∫–∏–π –∏–Ω–¥–µ–∫—Å
			rsi_score = current_rsi  # RSI –Ω–∞–ø—Ä—è–º—É—é –≤–ª–∏—è–µ—Ç –Ω–∞ –∏–Ω–¥–µ–∫—Å
			
			# –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ
			fear_greed_index = int(
				volatility_score * 0.3 +
				volume_score * 0.2 +
				trend_score * 0.3 +
				rsi_score * 0.2
			)
			
			# –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
			fear_greed_index = max(0, min(100, fear_greed_index))
			
			logger.info(f"–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞: {fear_greed_index} (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility_ratio:.2f}, –æ–±—ä—ë–º: {volume_ratio:.2f}, —Ç—Ä–µ–Ω–¥: {price_change_1d:.3f}, RSI: {current_rsi:.1f})")
			return fear_greed_index
			
		except Exception as e:
			logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞: {e}")
			return 50  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ

	def get_funding_rate(self, symbol: str = "BTCUSDT") -> float:
		"""
		üí∞ –ü–û–õ–£–ß–ï–ù–ò–ï FUNDING RATE
		
		–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π funding rate –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤.
		–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π funding rate —É—Å–∏–ª–∏–≤–∞–µ—Ç SHORT —Å–∏–≥–Ω–∞–ª—ã.
		
		–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
		- symbol: —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é BTCUSDT)
		
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
		- float: funding rate –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
		"""
		try:
			# Binance Futures API –¥–ª—è funding rate
			url = f"https://fapi.binance.com/fapi/v1/premiumIndex?symbol={symbol}"
			response = requests.get(url, timeout=SHORT_API_TIMEOUT)
			
			if response.status_code == 200:
				data = response.json()
				funding_rate = float(data.get('lastFundingRate', 0)) * 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
				logger.info(f"–ü–æ–ª—É—á–µ–Ω funding rate –¥–ª—è {symbol}: {funding_rate:.4f}%")
				return funding_rate
			else:
				logger.warning(f"–û—à–∏–±–∫–∞ API funding rate: {response.status_code}")
				return SHORT_FALLBACK_FUNDING_RATE
				
		except Exception as e:
			logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å funding rate: {e}")
			return SHORT_FALLBACK_FUNDING_RATE

	def get_liquidation_data(self, symbol: str = "BTCUSDT") -> tuple:
		"""
		üí• –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –û –õ–ò–ö–í–ò–î–ê–¶–ò–Ø–•
		
		–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è—Ö long/short –ø–æ–∑–∏—Ü–∏–π.
		–ü—Ä–µ–æ–±–ª–∞–¥–∞–Ω–∏–µ long –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π —É—Å–∏–ª–∏–≤–∞–µ—Ç SHORT —Å–∏–≥–Ω–∞–ª—ã.
		
		–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
		- symbol: —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é BTCUSDT)
		
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
		- tuple: (long_liquidations, short_liquidations) –≤ USD
		"""
		try:
			# Coinglass API –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è—Ö
			url = "https://open-api.coinglass.com/public/v2/liquidation/exchange"
			headers = {
				"coinglassSecret": "your_api_key_here",  # –ù—É–∂–µ–Ω API –∫–ª—é—á
				"Content-Type": "application/json"
			}
			
			# –ü—Ä–æ–±—É–µ–º –±–µ–∑ API –∫–ª—é—á–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø)
			response = requests.get(url, timeout=SHORT_API_TIMEOUT)
			
			if response.status_code == 200:
				data = response.json()
				# –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è—Ö
				long_liquidations = 0.0
				short_liquidations = 0.0
				
				if 'data' in data and 'list' in data['data']:
					for exchange in data['data']['list']:
						if exchange.get('exchangeName') == 'Binance':
							long_liquidations += float(exchange.get('longLiquidation', 0))
							short_liquidations += float(exchange.get('shortLiquidation', 0))
				
				logger.info(f"–õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏ Long: ${long_liquidations:.1f}M, Short: ${short_liquidations:.1f}M")
				return long_liquidations, short_liquidations
			else:
				logger.warning(f"–û—à–∏–±–∫–∞ API –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π: {response.status_code}")
				return SHORT_FALLBACK_LONG_LIQUIDATIONS, SHORT_FALLBACK_SHORT_LIQUIDATIONS
				
		except Exception as e:
			logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è—Ö: {e}")
			return SHORT_FALLBACK_LONG_LIQUIDATIONS, SHORT_FALLBACK_SHORT_LIQUIDATIONS

	def calculate_adaptive_short_score(
		self, 
		fear_greed_index: int, 
		funding_rate: float, 
		long_liquidations: float, 
		short_liquidations: float,
		rsi: float,
		ema_short: float,
		ema_long: float
	) -> tuple:
		"""
		üßÆ –†–ê–°–ß–Å–¢ –ê–î–ê–ü–¢–ò–í–ù–û–ì–û –°–ö–û–†–ê SHORT
		
		–í—ã—á–∏—Å–ª—è–µ—Ç —Å–æ—Å—Ç–∞–≤–Ω–æ–π —Å–∫–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤.
		
		–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
		- fear_greed_index: –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞/–∂–∞–¥–Ω–æ—Å—Ç–∏ (0-100)
		- funding_rate: funding rate –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
		- long_liquidations: –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ long –ø–æ–∑–∏—Ü–∏–π (USD)
		- short_liquidations: –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ short –ø–æ–∑–∏—Ü–∏–π (USD)
		- rsi: RSI –∑–Ω–∞—á–µ–Ω–∏–µ
		- ema_short: –±—ã—Å—Ç—Ä–∞—è EMA
		- ema_long: –º–µ–¥–ª–µ–Ω–Ω–∞—è EMA
		
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
		- tuple: (score, breakdown) –≥–¥–µ score 0-1, breakdown - –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è
		"""
		# –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∫–æ—Ä–∞
		fear_score = 1.0 if fear_greed_index < 40 else 0.0
		funding_score = 1.0 if funding_rate < SHORT_FUNDING_RATE_THRESHOLD else 0.0
		
		# –õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏: –±–æ–ª—å—à–µ long –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π = –±–æ–ª—å—à–µ SHORT —Å–∏–≥–Ω–∞–ª–∞
		if short_liquidations > 0:
			liquidation_ratio = long_liquidations / short_liquidations
			liquidation_score = 1.0 if liquidation_ratio > SHORT_LIQUIDATION_RATIO_THRESHOLD else 0.0
		else:
			liquidation_score = 0.0
		
		rsi_score = 1.0 if rsi > 70 else 0.0
		ema_score = 1.0 if ema_short < ema_long else 0.0
		
		# –í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å–∫–æ—Ä
		score = (
			fear_score * SHORT_FEAR_WEIGHT +
			funding_score * SHORT_FUNDING_WEIGHT +
			liquidation_score * SHORT_LIQUIDATION_WEIGHT +
			rsi_score * SHORT_RSI_WEIGHT +
			ema_score * SHORT_EMA_WEIGHT
		)
		
		# –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
		breakdown = {
			"fear_score": fear_score,
			"funding_score": funding_score,
			"liquidation_score": liquidation_score,
			"rsi_score": rsi_score,
			"ema_score": ema_score,
			"weights": {
				"fear": SHORT_FEAR_WEIGHT,
				"funding": SHORT_FUNDING_WEIGHT,
				"liquidation": SHORT_LIQUIDATION_WEIGHT,
				"rsi": SHORT_RSI_WEIGHT,
				"ema": SHORT_EMA_WEIGHT
			}
		}
		
		return score, breakdown

	def get_adaptive_short_position_size(self, fear_greed_index: int) -> float:
		"""
		üìä –ê–î–ê–ü–¢–ò–í–ù–´–ô –†–ê–ó–ú–ï–† –ü–û–ó–ò–¶–ò–ò SHORT
		
		–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è —Å—Ç—Ä–∞—Ö–∞.
		
		–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
		- fear_greed_index: –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞/–∂–∞–¥–Ω–æ—Å—Ç–∏ (0-100)
		
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
		- float: —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç 0.0 –¥–æ 1.0
		"""
		if fear_greed_index < SHORT_FEAR_EXTREME_THRESHOLD:
			return SHORT_POSITION_SIZE_EXTREME_FEAR
		elif fear_greed_index < SHORT_FEAR_HIGH_THRESHOLD:
			return SHORT_POSITION_SIZE_HIGH_FEAR
		elif fear_greed_index < SHORT_FEAR_MODERATE_THRESHOLD:
			return SHORT_POSITION_SIZE_MODERATE_FEAR
		else:
			return SHORT_POSITION_SIZE_NEUTRAL

	def get_btc_dominance(self) -> float:
		"""
		üìä –ü–û–õ–£–ß–ï–ù–ò–ï BTC DOMINANCE
		
		–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ Bitcoin.
		–†–æ—Å—Ç –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–∏–ª–∏–≤–∞–µ—Ç SHORT —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –∞–ª—å—Ç–∞—Ö.
		
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
		- float: –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è BTC –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
		"""
		try:
			# CoinGecko API –¥–ª—è BTC dominance
			url = "https://api.coingecko.com/api/v3/global"
			response = requests.get(url, timeout=SHORT_API_TIMEOUT)
			
			if response.status_code == 200:
				data = response.json()
				btc_dominance = float(data['data']['market_cap_percentage']['btc'])
				
				# –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
				historical_url = "https://api.coingecko.com/api/v3/global"
				historical_response = requests.get(historical_url, timeout=SHORT_API_TIMEOUT)
				
				if historical_response.status_code == 200:
					historical_data = historical_response.json()
					# –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è)
					dominance_change = 0.0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
				else:
					dominance_change = 0.0
				
				logger.info(f"BTC Dominance: {btc_dominance:.1f}% (–∏–∑–º–µ–Ω–µ–Ω–∏–µ: {dominance_change:+.1f}%)")
				return dominance_change
			else:
				logger.warning(f"–û—à–∏–±–∫–∞ API BTC dominance: {response.status_code}")
				return SHORT_FALLBACK_BTC_DOMINANCE
				
		except Exception as e:
			logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å BTC dominance: {e}")
			return SHORT_FALLBACK_BTC_DOMINANCE

	def check_fear_inertia(self, fear_history: list) -> bool:
		"""
		üîÑ –ü–†–û–í–ï–†–ö–ê –ò–ù–ï–†–¶–ò–ò –°–¢–†–ê–•–ê
		
		–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ —Å—Ç—Ä–∞—Ö < 30 –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N —Å–≤–µ—á–µ–π.
		
		–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
		- fear_history: —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ç—Ä–∞—Ö–∞
		
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
		- bool: True –µ—Å–ª–∏ –∏–Ω–µ—Ä—Ü–∏—è —Å—Ç—Ä–∞—Ö–∞ –∞–∫—Ç–∏–≤–Ω–∞
		"""
		if len(fear_history) < SHORT_FEAR_INERTIA_CANDLES:
			return False
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–≤–µ—á–µ–π
		recent_fears = fear_history[-SHORT_FEAR_INERTIA_CANDLES:]
		return all(fear < SHORT_FEAR_INERTIA_THRESHOLD for fear in recent_fears)

	def calculate_volatility_score(self, atr: float, atr_mean: float) -> float:
		"""
		üìà –†–ê–°–ß–Å–¢ –°–ö–û–†–ê –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–ò
		
		–í—ã—á–∏—Å–ª—è–µ—Ç —Å–∫–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (ATR).
		
		–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
		- atr: —Ç–µ–∫—É—â–∏–π ATR
		- atr_mean: —Å—Ä–µ–¥–Ω–∏–π ATR –∑–∞ –ø–µ—Ä–∏–æ–¥
		
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
		- float: —Å–∫–æ—Ä –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (0.0-1.0)
		"""
		if atr_mean == 0:
			return 0.0
		
		volatility_ratio = atr / atr_mean
		if volatility_ratio > SHORT_VOLATILITY_MULTIPLIER:
			return 1.0  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
		else:
			return 0.0  # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å

	def calculate_adaptive_short_score_v2_1(
		self, 
		fear_greed_index: int, 
		funding_rate: float, 
		long_liquidations: float, 
		short_liquidations: float,
		rsi: float,
		ema_short: float,
		ema_long: float,
		atr: float,
		atr_mean: float,
		btc_dominance_change: float,
		fear_history: list = None
	) -> tuple:
		"""
		üßÆ –†–ê–°–ß–Å–¢ –ê–î–ê–ü–¢–ò–í–ù–û–ì–û –°–ö–û–†–ê SHORT v2.1
		
		–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é, BTC dominance –∏ –∏–Ω–µ—Ä—Ü–∏–µ–π —Å—Ç—Ä–∞—Ö–∞.
		
		–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
		- fear_greed_index: –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞/–∂–∞–¥–Ω–æ—Å—Ç–∏ (0-100)
		- funding_rate: funding rate –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
		- long_liquidations: –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ long –ø–æ–∑–∏—Ü–∏–π (USD)
		- short_liquidations: –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ short –ø–æ–∑–∏—Ü–∏–π (USD)
		- rsi: RSI –∑–Ω–∞—á–µ–Ω–∏–µ
		- ema_short: –±—ã—Å—Ç—Ä–∞—è EMA
		- ema_long: –º–µ–¥–ª–µ–Ω–Ω–∞—è EMA
		- atr: —Ç–µ–∫—É—â–∏–π ATR
		- atr_mean: —Å—Ä–µ–¥–Ω–∏–π ATR
		- btc_dominance_change: –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è BTC
		- fear_history: –∏—Å—Ç–æ—Ä–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ç—Ä–∞—Ö–∞
		
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
		- tuple: (score, breakdown) –≥–¥–µ score 0-1, breakdown - –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è
		"""
		# –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∫–æ—Ä–∞ v2.1
		fear_score = 1.0 if fear_greed_index < 45 else 0.0  # –£–≤–µ–ª–∏—á–µ–Ω –ø–æ—Ä–æ–≥
		funding_score = 1.0 if funding_rate < SHORT_FUNDING_RATE_THRESHOLD else 0.0
		
		# –õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏: –±–æ–ª—å—à–µ long –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π = –±–æ–ª—å—à–µ SHORT —Å–∏–≥–Ω–∞–ª–∞
		if short_liquidations > 0:
			liquidation_ratio = long_liquidations / short_liquidations
			liquidation_score = 1.0 if liquidation_ratio > SHORT_LIQUIDATION_RATIO_THRESHOLD else 0.0
		else:
			liquidation_score = 0.0
		
		rsi_score = 1.0 if rsi > 70 else 0.0
		ema_score = 1.0 if ema_short < ema_long else 0.0
		
		# –ù–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã v2.1
		volatility_score = self.calculate_volatility_score(atr, atr_mean)
		
		# BTC Dominance –±–æ–Ω—É—Å
		btc_dominance_bonus = 0.0
		if (btc_dominance_change > SHORT_BTC_DOMINANCE_THRESHOLD and 
			fear_greed_index < SHORT_BTC_DOMINANCE_FEAR_THRESHOLD):
			btc_dominance_bonus = SHORT_BTC_DOMINANCE_BONUS
		
		# Inertia –±–æ–Ω—É—Å
		inertia_bonus = 0.0
		if fear_history and self.check_fear_inertia(fear_history):
			inertia_bonus = SHORT_FEAR_INERTIA_BONUS
		
		# –í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å–∫–æ—Ä v2.1
		base_score = (
			fear_score * SHORT_FEAR_WEIGHT +
			funding_score * SHORT_FUNDING_WEIGHT +
			liquidation_score * SHORT_LIQUIDATION_WEIGHT +
			rsi_score * SHORT_RSI_WEIGHT +
			ema_score * SHORT_EMA_WEIGHT +
			volatility_score * SHORT_VOLATILITY_WEIGHT
		)
		
		# –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã
		final_score = base_score + btc_dominance_bonus + inertia_bonus
		final_score = min(1.0, final_score)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º–æ–º
		
		# –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
		breakdown = {
			"fear_score": fear_score,
			"funding_score": funding_score,
			"liquidation_score": liquidation_score,
			"rsi_score": rsi_score,
			"ema_score": ema_score,
			"volatility_score": volatility_score,
			"btc_dominance_bonus": btc_dominance_bonus,
			"inertia_bonus": inertia_bonus,
			"base_score": base_score,
			"final_score": final_score,
			"weights": {
				"fear": SHORT_FEAR_WEIGHT,
				"funding": SHORT_FUNDING_WEIGHT,
				"liquidation": SHORT_LIQUIDATION_WEIGHT,
				"rsi": SHORT_RSI_WEIGHT,
				"ema": SHORT_EMA_WEIGHT,
				"volatility": SHORT_VOLATILITY_WEIGHT
			}
		}
		
		return final_score, breakdown

	def compute_indicators(
		self, ema_short_window=None, ema_long_window=None, rsi_window=None,
		macd_fast=None, macd_slow=None, macd_signal=None
	) -> pd.DataFrame:
		# ====================================================================
		# –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ê–Ø –ê–î–ê–ü–¢–ê–¶–ò–Ø –ü–ê–†–ê–ú–ï–¢–†–û–í –ù–ê –û–°–ù–û–í–ï –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–ò
		# ====================================================================
		
		# –°–Ω–∞—á–∞–ª–∞ –≤—ã—á–∏—Å–ª—è–µ–º ATR –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
		close = self.df["close"].astype(float)
		high = self.df["high"].astype(float)
		low = self.df["low"].astype(float)
		
		# –í—Ä–µ–º–µ–Ω–Ω—ã–π ATR –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
		if len(self.df) >= ATR_WINDOW:
			temp_atr = ta.volatility.average_true_range(high, low, close, window=ATR_WINDOW).iloc[-1]
			current_price = close.iloc[-1]
			volatility_percent = (temp_atr / current_price) * 100 if current_price > 0 else 1.5
		else:
			volatility_percent = 1.5  # –°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		
		# –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
		# –ü—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (>3%) ‚Üí —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã (—Å–≥–ª–∞–∂–∏–≤–∞–µ–º —à—É–º)
		# –ü—Ä–∏ –Ω–∏–∑–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (<1%) ‚Üí —É–º–µ–Ω—å—à–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã (–±—ã—Å—Ç—Ä–µ–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º)
		
		volatility_factor = 1.0  # –ë–∞–∑–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
		if volatility_percent > 3.0:
			volatility_factor = 1.3  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã –Ω–∞ 30%
		elif volatility_percent > 2.0:
			volatility_factor = 1.15  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 15%
		elif volatility_percent < 0.8:
			volatility_factor = 0.85  # –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 15%
		elif volatility_percent < 1.2:
			volatility_factor = 0.95  # –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 5%
		
		# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ config —Å –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã —è–≤–Ω–æ
		if ema_short_window is None:
			ema_short_window = max(5, int(EMA_SHORT_WINDOW * volatility_factor))
		if ema_long_window is None:
			ema_long_window = max(10, int(EMA_LONG_WINDOW * volatility_factor))
		if rsi_window is None:
			rsi_window = max(7, int(RSI_WINDOW * volatility_factor))
		if macd_fast is None:
			macd_fast = max(8, int(MACD_FAST * volatility_factor))
		if macd_slow is None:
			macd_slow = max(16, int(MACD_SLOW * volatility_factor))
		if macd_signal is None:
			macd_signal = max(5, int(MACD_SIGNAL * volatility_factor))
		
		close = self.df["close"].astype(float)
		high = self.df["high"].astype(float)
		low = self.df["low"].astype(float)
		volume = self.df["volume"].astype(float)

		# –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ - –∏–∑ config
		for w in SMA_PERIODS:
			if len(self.df) >= w:
				self.df[f"SMA_{w}"] = ta.trend.sma_indicator(close, window=w)
			else:
				self.df[f"SMA_{w}"] = pd.Series([np.nan]*len(self.df), index=self.df.index)
		
		for w in EMA_PERIODS:
			if len(self.df) >= w:
				self.df[f"EMA_{w}"] = ta.trend.ema_indicator(close, window=w)
			else:
				self.df[f"EMA_{w}"] = pd.Series([np.nan]*len(self.df), index=self.df.index)
		
		# ATR –¥–ª—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (–ö–†–ò–¢–ò–ß–ù–û –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ SL)
		if len(self.df) >= ATR_WINDOW:
			self.df[f"ATR_{ATR_WINDOW}"] = ta.volatility.average_true_range(high, low, close, window=ATR_WINDOW)
		else:
			self.df[f"ATR_{ATR_WINDOW}"] = pd.Series([np.nan]*len(self.df), index=self.df.index)
		
		# –û–±—ä—ë–º
		if len(self.df) >= VOLUME_MA_WINDOW:
			self.df[f"Volume_MA_{VOLUME_MA_WINDOW}"] = volume.rolling(window=VOLUME_MA_WINDOW).mean()
		else:
			self.df[f"Volume_MA_{VOLUME_MA_WINDOW}"] = pd.Series([np.nan]*len(self.df), index=self.df.index)

		# –û—Å—Ü–∏–ª–ª—è—Ç–æ—Ä—ã - —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ
		self.df[f"RSI_{RSI_WINDOW}"] = ta.momentum.rsi(close, window=RSI_WINDOW) if len(self.df) >= RSI_WINDOW else pd.Series([np.nan]*len(self.df), index=self.df.index)
		
		# ADX - —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ (–∫—Ä–∏—Ç–∏—á–Ω–æ!)
		if (
			len(self.df) >= ADX_WINDOW
			and len(self.df.tail(ADX_WINDOW)) == ADX_WINDOW
			and self.df[["high", "low", "close"]].tail(ADX_WINDOW).isna().sum().sum() == 0
		):
			try:
				self.df[f"ADX_{ADX_WINDOW}"] = ta.trend.adx(high, low, close, window=ADX_WINDOW)
			except Exception:
				self.df[f"ADX_{ADX_WINDOW}"] = pd.Series([np.nan]*len(self.df), index=self.df.index)
		else:
			self.df[f"ADX_{ADX_WINDOW}"] = pd.Series([np.nan]*len(self.df), index=self.df.index)
		
		# Stochastic - –¥–ª—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏/–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏
		self.df["Stoch_K"] = ta.momentum.stoch(high, low, close, window=STOCH_WINDOW, smooth_window=STOCH_SMOOTH_WINDOW) if len(self.df) >= STOCH_WINDOW else pd.Series([np.nan]*len(self.df), index=self.df.index)
		self.df["Stoch_D"] = ta.momentum.stoch_signal(high, low, close, window=STOCH_WINDOW, smooth_window=STOCH_SMOOTH_WINDOW) if len(self.df) >= STOCH_WINDOW else pd.Series([np.nan]*len(self.df), index=self.df.index)

		# –ë–∞–∑–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
		self.df["EMA_short"] = ta.trend.ema_indicator(close, window=ema_short_window) if len(self.df) >= ema_short_window else pd.Series([np.nan]*len(self.df), index=self.df.index)
		self.df["EMA_long"] = ta.trend.ema_indicator(close, window=ema_long_window) if len(self.df) >= ema_long_window else pd.Series([np.nan]*len(self.df), index=self.df.index)
		self.df["RSI"] = ta.momentum.rsi(close, window=rsi_window) if len(self.df) >= rsi_window else pd.Series([np.nan]*len(self.df), index=self.df.index)
		if len(self.df) >= max(macd_slow, macd_fast, macd_signal):
			macd = ta.trend.MACD(close, window_slow=macd_slow, window_fast=macd_fast, window_sign=macd_signal)
			self.df["MACD"] = macd.macd()
			self.df["MACD_signal"] = macd.macd_signal()
			self.df["MACD_hist"] = macd.macd_diff()
		else:
			self.df["MACD"] = pd.Series([np.nan]*len(self.df), index=self.df.index)
			self.df["MACD_signal"] = pd.Series([np.nan]*len(self.df), index=self.df.index)
			self.df["MACD_hist"] = pd.Series([np.nan]*len(self.df), index=self.df.index)

		self.df.ffill(inplace=True)
		self.df.bfill(inplace=True)
		return self.df

	def generate_signal(self) -> Dict[str, Any]:
		if self.df.empty:
			raise ValueError("DataFrame is empty")
		last = self.df.iloc[-1]
		price = float(last["close"])

		# –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
		ema_s = float(last["EMA_short"])
		ema_l = float(last["EMA_long"])
		ema_20 = float(last.get("EMA_20", 0))
		ema_50 = float(last.get("EMA_50", 0))
		ema_200 = float(last.get("EMA_200", 0))
		sma_20 = float(last.get("SMA_20", 0))
		sma_50 = float(last.get("SMA_50", 0))
		rsi = float(last["RSI"])
		macd_hist = float(last["MACD_hist"])
		macd = float(last["MACD"])
		macd_signal = float(last["MACD_signal"])
		adx = float(last.get(f"ADX_{ADX_WINDOW}", 0))
		stoch_k = float(last.get("Stoch_K", 0))
		stoch_d = float(last.get("Stoch_D", 0))
		atr = float(last.get(f"ATR_{ATR_WINDOW}", 0))
		
		# –û–±—ä—ë–º
		volume = float(last["volume"])
		volume_ma = float(last.get(f"Volume_MA_{VOLUME_MA_WINDOW}", volume))
		
		# ====================================================================
		# –î–ï–¢–ï–ö–¶–ò–Ø –†–ï–ñ–ò–ú–ê: ADX + –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
		# ====================================================================
		
		# 1. –ë–∞–∑–æ–≤–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è —á–µ—Ä–µ–∑ ADX
		market_regime = "NEUTRAL"
		if adx > ADX_TRENDING:
			market_regime = "TRENDING"
		elif adx < ADX_RANGING:
			market_regime = "RANGING"
		else:
			market_regime = "TRANSITIONING"
		
		# 2. –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
		trend_strength = 0  # R¬≤ –æ—Ç 0 –¥–æ 1
		trend_direction = 0  # -1 (down), 0 (neutral), +1 (up)
		
		if len(self.df) >= 20:
			# –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Ü–µ–Ω –∑–∞–∫—Ä—ã—Ç–∏—è
			prices = self.df['close'].iloc[-20:].values
			x = np.arange(len(prices))
			
			# –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è: y = slope * x + intercept
			slope, intercept = np.polyfit(x, prices, 1)
			
			# R¬≤ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏) - –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –ª–∏–Ω–∏—è –æ–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ
			y_pred = slope * x + intercept
			ss_res = np.sum((prices - y_pred) ** 2)
			ss_tot = np.sum((prices - np.mean(prices)) ** 2)
			trend_strength = 1 - (ss_res / ss_tot) if ss_tot > 0 else 0
			trend_strength = max(0, min(1, trend_strength))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 0-1
			
			# –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ (–Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ % –∏–∑–º–µ–Ω–µ–Ω–∏—è)
			price_range = prices[-1] - prices[0]
			percent_change = (price_range / prices[0]) * 100 if prices[0] > 0 else 0
			
			if abs(percent_change) > 1.0 and trend_strength > 0.5:  # –°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
				trend_direction = 1 if slope > 0 else -1
			elif abs(percent_change) > 0.5 and trend_strength > 0.3:  # –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ç—Ä–µ–Ω–¥
				trend_direction = 1 if slope > 0 else -1
			else:
				trend_direction = 0
		
		# 3. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
		if trend_strength > 0.6 and abs(trend_direction) == 1:
			# –°–∏–ª—å–Ω—ã–π –ª–∏–Ω–µ–π–Ω—ã–π —Ç—Ä–µ–Ω–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω - –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ TRENDING
			if market_regime != "TRENDING":
				market_regime = "TRENDING"
		elif trend_strength < 0.3:
			# –°–ª–∞–±–∞—è –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ñ–ª—ç—Ç
			if market_regime == "TRENDING":
				market_regime = "TRANSITIONING"

		# –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
		bullish = 0
		bearish = 0
		reasons = []
		
		# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö (–µ—Å–ª–∏ –æ–Ω–∏ –º–µ–Ω—è–ª–∏—Å—å)
		atr_percent = (atr / price) * 100 if atr > 0 and price > 0 else 0

		# ====================================================================
		## –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
		# ====================================================================
		
		# –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≤–µ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞
		if market_regime == "TRENDING":
			trend_weight = TRENDING_TREND_WEIGHT
			oscillator_weight = TRENDING_OSCILLATOR_WEIGHT
		elif market_regime == "RANGING":
			trend_weight = RANGING_TREND_WEIGHT
			oscillator_weight = RANGING_OSCILLATOR_WEIGHT
		else:
			trend_weight = TRANSITIONING_TREND_WEIGHT
			oscillator_weight = TRANSITIONING_OSCILLATOR_WEIGHT

		# EMA: –û—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–µ–Ω–¥. –ö–õ–Æ–ß–ï–í–û–ô –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä.
		if ema_s > ema_l:
			bullish += trend_weight
			reasons.append(f"EMA_short ({ema_s:.2f}) > EMA_long ({ema_l:.2f}) ‚Äî –±—ã—á–∏–π —Ç—Ä–µ–Ω–¥ [+{trend_weight}]")
		else:
			bearish += trend_weight
			reasons.append(f"EMA_short ({ema_s:.2f}) < EMA_long ({ema_l:.2f}) ‚Äî –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥ [+{trend_weight}]")
		
		# SMA: –°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥
		if sma_20 > sma_50:
			bullish += 1
			reasons.append(f"SMA_20 > SMA_50 ‚Äî –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥ –≤–≤–µ—Ä—Ö")
		elif sma_20 < sma_50:
			bearish += 1
			reasons.append(f"SMA_20 < SMA_50 ‚Äî –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥ –≤–Ω–∏–∑")
		
		# EMA 200 - –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥ (—Ñ–∏–ª—å—Ç—Ä)
		if ema_200 > 0:
			if price > ema_200:
				reasons.append(f"–¶–µ–Ω–∞ –≤—ã—à–µ EMA200 ({ema_200:.2f}) ‚Äî –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –±—ã—á–∏–π —Ç—Ä–µ–Ω–¥")
			else:
				reasons.append(f"–¶–µ–Ω–∞ –Ω–∏–∂–µ EMA200 ({ema_200:.2f}) ‚Äî –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥")

		# RSI: –ö–õ–Æ–ß–ï–í–û–ô –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä
		if rsi < RSI_OVERSOLD:
			bullish += 2 * oscillator_weight
			reasons.append(f"RSI ({rsi:.2f}) < {RSI_OVERSOLD} ‚Äî –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω [+{2*oscillator_weight}]")
		elif rsi < RSI_OVERSOLD_NEAR:
			bullish += oscillator_weight
			reasons.append(f"RSI ({rsi:.2f}) < {RSI_OVERSOLD_NEAR} ‚Äî –±–ª–∏–∑–∫–æ –∫ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏ [+{oscillator_weight}]")
		elif rsi > RSI_OVERBOUGHT:
			bearish += 2 * oscillator_weight
			reasons.append(f"RSI ({rsi:.2f}) > {RSI_OVERBOUGHT} ‚Äî –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω [+{2*oscillator_weight}]")
		elif rsi > RSI_OVERBOUGHT_NEAR:
			bearish += oscillator_weight
			reasons.append(f"RSI ({rsi:.2f}) > {RSI_OVERBOUGHT_NEAR} ‚Äî –±–ª–∏–∑–∫–æ –∫ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏ [+{oscillator_weight}]")
		else:
			reasons.append(f"RSI = {rsi:.2f} ‚Äî –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ")

		# MACD: –ö–õ–Æ–ß–ï–í–û–ô –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–¥–∞ –∏ –º–æ–º–µ–Ω—Ç—É–º–∞
		if macd > macd_signal:
			bullish += 2
			reasons.append(f"MACD ({macd:.4f}) > MACD_signal ({macd_signal:.4f}) ‚Äî –±—ã—á—å–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ [+2]")
		else:
			bearish += 2
			reasons.append(f"MACD ({macd:.4f}) < MACD_signal ({macd_signal:.4f}) ‚Äî –º–µ–¥–≤–µ–∂—å–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ [+2]")
			
		if macd_hist > 0:
			bullish += 1
			reasons.append(f"MACD_hist ({macd_hist:.4f}) > 0 ‚Äî –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç—É–º [+1]")
		else:
			bearish += 1
			reasons.append(f"MACD_hist ({macd_hist:.4f}) < 0 ‚Äî –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç—É–º [+1]")

		# ADX –∏ —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞ —Å –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–µ–π
		trend_info = f"‚Üë" if trend_direction == 1 else "‚Üì" if trend_direction == -1 else "‚Üí"
		reasons.append(f"üìä –†–µ–∂–∏–º: {market_regime} | ADX: {adx:.2f}")
		reasons.append(f"üìà –¢—Ä–µ–Ω–¥ –õ–†: {trend_info} (R¬≤={trend_strength:.2f})")
		
		# –ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–µ–π
		if trend_direction == 1 and trend_strength > 0.5:
			# –°–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ –ø–æ –õ–†
			bullish += 1
			reasons.append(f"‚úì –õ–† –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ [+1]")
		elif trend_direction == -1 and trend_strength > 0.5:
			# –°–∏–ª—å–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ –ø–æ –õ–†
			bearish += 1
			reasons.append(f"‚úì –õ–† –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ [+1]")
			
		# Stochastic: –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
		if stoch_k < STOCH_OVERSOLD and stoch_d < STOCH_OVERSOLD and stoch_k > stoch_d:
			bullish += oscillator_weight
			reasons.append(f"Stoch K/D ({stoch_k:.2f}/{stoch_d:.2f}) < {STOCH_OVERSOLD} –∏ K>D ‚Äî –≤—ã—Ö–æ–¥ –∏–∑ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏ [+{oscillator_weight}]")
		elif stoch_k > STOCH_OVERBOUGHT and stoch_d > STOCH_OVERBOUGHT and stoch_k < stoch_d:
			bearish += oscillator_weight
			reasons.append(f"Stoch K/D ({stoch_k:.2f}/{stoch_d:.2f}) > {STOCH_OVERBOUGHT} –∏ K<D ‚Äî –≤—ã—Ö–æ–¥ –∏–∑ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏ [+{oscillator_weight}]")
		else:
			reasons.append(f"Stoch K/D ({stoch_k:.2f}/{stoch_d:.2f}): –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ")
		
		# –û–ë–™–Å–ú - –ö–†–ò–¢–ò–ß–ù–û! –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
		if volume_ma > 0:
			volume_ratio = volume / volume_ma
			if volume_ratio > VOLUME_HIGH_RATIO:
				# –í—ã—Å–æ–∫–∏–π –æ–±—ä—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
				if ema_s > ema_l:
					bullish += 2
					reasons.append(f"–û–±—ä—ë–º {volume_ratio:.1f}x –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ [+2]")
				else:
					bearish += 2
					reasons.append(f"–û–±—ä—ë–º {volume_ratio:.1f}x –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞–¥–µ–Ω–∏—è [+2]")
			elif volume_ratio > VOLUME_MODERATE_RATIO:
				if ema_s > ema_l:
					bullish += 1
					reasons.append(f"–û–±—ä—ë–º {volume_ratio:.1f}x –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ ‚Äî —É–º–µ—Ä–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
				else:
					bearish += 1
					reasons.append(f"–û–±—ä—ë–º {volume_ratio:.1f}x –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ ‚Äî —É–º–µ—Ä–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
			elif volume_ratio < VOLUME_LOW_RATIO:
				reasons.append(f"–û–±—ä—ë–º {volume_ratio:.1f}x –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ ‚Äî —Å–ª–∞–±–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ")
			else:
				reasons.append(f"–û–±—ä—ë–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π ({volume_ratio:.1f}x)")
		
		# ====================================================================
		# –£–ü–†–û–©–Å–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ö–û–ù–§–õ–ò–ö–¢–û–í (v5.5)
		# ====================================================================
		
		# –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω—ã
		# –£–±–∏—Ä–∞–µ–º –º–µ–ª–∫–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ —Ö–æ—Ä–æ—à–∏–µ —Å–∏–≥–Ω–∞–ª—ã
		indicator_conflicts = []
		conflict_detected = False
		
		# –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ö–û–ù–§–õ–ò–ö–¢ #1: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä–æ–≤
		# –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ RSI –∏ Stoch –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ü–†–û–¢–ò–í–û–ü–û–õ–û–ñ–ù–´–ï —ç–∫—Å—Ç—Ä–µ–º—É–º—ã
		rsi_extreme_oversold = rsi < 25  # –û—á–µ–Ω—å –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω
		rsi_extreme_overbought = rsi > 75  # –û—á–µ–Ω—å –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω
		stoch_extreme_oversold = stoch_k < 15  # –û—á–µ–Ω—å –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω
		stoch_extreme_overbought = stoch_k > 85  # –û—á–µ–Ω—å –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω
		
		if rsi_extreme_oversold and stoch_extreme_overbought:
			indicator_conflicts.append("‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω, –Ω–æ Stochastic –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω")
			conflict_detected = True
		elif rsi_extreme_overbought and stoch_extreme_oversold:
			indicator_conflicts.append("‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: RSI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω, –Ω–æ Stochastic –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω")
			conflict_detected = True
		
		# –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ö–û–ù–§–õ–ò–ö–¢ #2: –°–∏–ª—å–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ + –ø–æ–ø—ã—Ç–∫–∞ BUY
		# –ë–ª–æ–∫–∏—Ä—É–µ–º BUY —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –í–°–ï —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –º–µ–¥–≤–µ–∂—å–∏ + —Å–∏–ª—å–Ω—ã–π downtrend
		ema_strong_down = ema_s < ema_l and sma_20 < sma_50
		macd_strong_bearish = macd < macd_signal and macd_hist < -0.0005  # –°–∏–ª—å–Ω—ã–π negative momentum
		lr_strong_down = trend_direction == -1 and trend_strength > 0.7
		
		if ema_strong_down and macd_strong_bearish and lr_strong_down:
			indicator_conflicts.append("‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –í—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å–∏–ª—å–Ω—ã–π downtrend")
			# –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é - –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, —Ç.–∫. –º–æ–∂–µ—Ç –±—ã—Ç—å MR opportunity
		
		# –£–±—Ä–∞–Ω—ã:
		# - RSI vs MACD –∫–æ–Ω—Ñ–ª–∏–∫—Ç (—á–∞—Å—Ç–æ –ª–æ–∂–Ω—ã–π)
		# - EMA vs MACD –∫–æ–Ω—Ñ–ª–∏–∫—Ç (–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è)
		# - Stoch vs RSI –º–µ–ª–∫–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã (—Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã)
		# - –õ–† vs –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–õ–† –º–æ–∂–µ—Ç –æ—Ç—Å—Ç–∞–≤–∞—Ç—å)
		
		# –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö –≤ reasons
		if indicator_conflicts:
			for conflict in indicator_conflicts:
				reasons.append(conflict)
		
		# ====================================================================
		# SHORT-–ú–ï–•–ê–ù–ò–ö–ê v2.0 - –ü–û–í–ï–î–ï–ù–ß–ï–°–ö–ò–ï –°–ò–ì–ù–ê–õ–´
		# ====================================================================
		
		# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SHORT v2.0 –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
		short_enabled = False
		short_score = 0.0
		short_position_size = 0.0
		short_conditions = []
		short_breakdown = {}
		funding_rate = 0.0
		long_liquidations = 0.0
		short_liquidations = 0.0
		
		# –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞/–∂–∞–¥–Ω–æ—Å—Ç–∏
		fear_greed_index = self.get_fear_greed_index()
		
		if USE_ADVANCED_SHORT:
			# –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è SHORT v2.1
			funding_rate = self.get_funding_rate("BTCUSDT")
			long_liquidations, short_liquidations = self.get_liquidation_data("BTCUSDT")
			btc_dominance_change = self.get_btc_dominance()
			
			# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º ATR –¥–ª—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
			if hasattr(atr, 'tail'):
				atr_mean = atr.tail(20).mean() if len(atr) >= 20 else atr.mean()
			else:
				# –ï—Å–ª–∏ atr —ç—Ç–æ —Å–∫–∞–ª—è—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ —Å—Ä–µ–¥–Ω–µ–µ
				atr_mean = atr
			
			# –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ç—Ä–∞—Ö–∞ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π)
			fear_history = [fear_greed_index]  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
			
			# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Å–∫–æ—Ä SHORT v2.1
			short_score, short_breakdown = self.calculate_adaptive_short_score_v2_1(
				fear_greed_index, funding_rate, long_liquidations, short_liquidations,
				rsi, ema_s, ema_l, atr, atr_mean, btc_dominance_change, fear_history
			)
			
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é SHORT
			short_enabled = short_score >= SHORT_MIN_SCORE
			
			if short_enabled:
				# –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
				short_position_size = self.get_adaptive_short_position_size(fear_greed_index)
				
				# –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è v2.1
				if short_breakdown["fear_score"] > 0:
					short_conditions.append(f"–°—Ç—Ä–∞—Ö: {fear_greed_index} < 45")
				if short_breakdown["funding_score"] > 0:
					short_conditions.append(f"Funding: {funding_rate:.4f}% < 0")
				if short_breakdown["liquidation_score"] > 0:
					short_conditions.append(f"–õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏ Long: ${long_liquidations:.1f}M > Short: ${short_liquidations:.1f}M")
				if short_breakdown["rsi_score"] > 0:
					short_conditions.append(f"RSI: {rsi:.1f} > 70")
				if short_breakdown["ema_score"] > 0:
					short_conditions.append(f"EMA: {ema_s:.2f} < {ema_l:.2f}")
				if short_breakdown["volatility_score"] > 0:
					volatility_ratio = atr / atr_mean if atr_mean > 0 else 1.0
					short_conditions.append(f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility_ratio:.2f}x > 1.2x")
				if short_breakdown["btc_dominance_bonus"] > 0:
					short_conditions.append(f"BTC.D: +{btc_dominance_change:.1f}% –ø—Ä–∏ —Å—Ç—Ä–∞—Ö–µ {fear_greed_index}")
				if short_breakdown["inertia_bonus"] > 0:
					short_conditions.append(f"–ò–Ω–µ—Ä—Ü–∏—è —Å—Ç—Ä–∞—Ö–∞: {SHORT_FEAR_INERTIA_CANDLES} —Å–≤–µ—á–µ–π < 30")
				
				# –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–∞ –∑–∞ SHORT
				bearish += int(short_score * 5)  # –î–æ 5 –≥–æ–ª–æ—Å–æ–≤ –∑–∞ —Å–∏–ª—å–Ω—ã–π SHORT
				reasons.append(f"üî¥ SHORT v{SHORT_VERSION} –ê–ö–¢–ò–í–ï–ù: —Å–∫–æ—Ä {short_score:.2f}, —Ä–∞–∑–º–µ—Ä {short_position_size:.1%} [+{int(short_score * 5)}]")
				reasons.append(f"   –£—Å–ª–æ–≤–∏—è: {', '.join(short_conditions)}")
				
				# –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ v2.1
				logger.info(f"[SHORT v{SHORT_VERSION} ACTIVATION] Fear: {fear_greed_index}, Funding: {funding_rate:.4f}%, "
						   f"Volatility: {atr/atr_mean:.2f}x, BTC.D: {btc_dominance_change:+.1f}%, "
						   f"Long liq: ${long_liquidations:.1f}M > Short: ${short_liquidations:.1f}M, "
						   f"Score: {short_score:.2f} ‚Üí SHORT CONFIRMED")
			else:
				reasons.append(f"üî¥ SHORT v2.0 –æ—Ç–∫–ª—é—á—ë–Ω: —Å–∫–æ—Ä {short_score:.2f} < {SHORT_MIN_SCORE}")
		else:
			# Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É SHORT v1.0
			# –°–±—Ä–∞—Å—ã–≤–∞–µ–º v2.0 –ø–æ–ª—è –ø—Ä–∏ fallback
			short_score = 0.0
			short_position_size = 0.0
			short_breakdown = {}
			funding_rate = 0.0
			long_liquidations = 0.0
			short_liquidations = 0.0
			
			short_enabled = self.should_short(self.df, fear_greed_index)
			
			if short_enabled:
				# RSI > 70 (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å)
				if rsi > 70:
					short_conditions.append(f"RSI={rsi:.1f} > 70 (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å)")
				
				# –ë—ã—Å—Ç—Ä–∞—è EMA –Ω–∏–∂–µ –º–µ–¥–ª–µ–Ω–Ω–æ–π (–º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥)
				if ema_s < ema_l:
					short_conditions.append(f"EMA_short ({ema_s:.2f}) < EMA_long ({ema_l:.2f})")
				
				# ADX > 20 (–≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–π —Ç—Ä–µ–Ω–¥)
				if adx > 20:
					short_conditions.append(f"ADX={adx:.1f} > 20 (—Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥)")
				
				# –ï—Å–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º SHORT –≥–æ–ª–æ—Å–∞
				if len(short_conditions) >= 2:  # –ú–∏–Ω–∏–º—É–º 2 –∏–∑ 3 —É—Å–ª–æ–≤–∏–π
					bearish += 3  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–æ–ª–æ—Å–∞ –∑–∞ SHORT
					reasons.append(f"üî¥ SHORT v1.0 –ê–ö–¢–ò–í–ï–ù: {', '.join(short_conditions)} [+3]")
				else:
					reasons.append(f"üî¥ SHORT v1.0 –æ—Ç–∫–ª—é—á—ë–Ω: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—Å–ª–æ–≤–∏–π ({len(short_conditions)}/3)")
			else:
				reasons.append(f"üî¥ SHORT v1.0 –æ—Ç–∫–ª—é—á—ë–Ω: —Ä–µ–∂–∏–º –Ω–µ BEAR –∏–ª–∏ —Å—Ç—Ä–∞—Ö < 40")

		# ====================================================================
		# –ò—Ç–æ–≥–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å –ì–ò–ë–ö–ò–ú–ò —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ (3 –∏–∑ 5)
		# ====================================================================
		
		# –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞
		if market_regime == "TRENDING":
			VOTE_THRESHOLD = VOTE_THRESHOLD_TRENDING  # –í —Ç—Ä–µ–Ω–¥–µ –ª–µ–≥—á–µ –≤—Ö–æ–¥–∏—Ç—å
		elif market_regime == "RANGING":
			VOTE_THRESHOLD = VOTE_THRESHOLD_RANGING  # –í–æ —Ñ–ª—ç—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ
		else:
			VOTE_THRESHOLD = VOTE_THRESHOLD_TRANSITIONING
		
		# –§–∏–ª—å—Ç—Ä—ã (—Å—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–π–¥–µ–Ω–æ)
		buy_filters_passed = 0
		sell_filters_passed = 0
		
		# 1. –¢—Ä–µ–Ω–¥
		buy_trend_ok = ema_s > ema_l and sma_20 > sma_50
		sell_trend_ok = ema_s < ema_l and sma_20 < sma_50
		if buy_trend_ok:
			buy_filters_passed += 1
		if sell_trend_ok:
			sell_filters_passed += 1
		
		# 2. ADX (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞)
		moderate_trend = adx > ADX_MODERATE
		strong_trend = adx > ADX_STRONG
		if strong_trend:
			buy_filters_passed += 1
			sell_filters_passed += 1
		elif moderate_trend:
			# –ü–æ–ª–æ–≤–∏–Ω–∫–∞ –±–∞–ª–ª–∞ –∑–∞ —É–º–µ—Ä–µ–Ω–Ω—ã–π —Ç—Ä–µ–Ω–¥
			pass
		
		# 3. RSI
		buy_rsi_ok = RSI_BUY_RANGE[0] < rsi < RSI_BUY_RANGE[1]  # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
		sell_rsi_ok = RSI_SELL_RANGE[0] < rsi < RSI_SELL_RANGE[1]
		if buy_rsi_ok:
			buy_filters_passed += 1
		if sell_rsi_ok:
			sell_filters_passed += 1
		
		# 4. MACD
		macd_buy_ok = macd > macd_signal
		macd_sell_ok = macd < macd_signal
		if macd_buy_ok and macd_hist > 0:
			buy_filters_passed += 1
		if macd_sell_ok and macd_hist < 0:
			sell_filters_passed += 1
		
		# 5. –û–±—ä—ë–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
		high_volume = volume / volume_ma > VOLUME_MODERATE_RATIO if volume_ma > 0 else False
		if high_volume:
			buy_filters_passed += 1
			sell_filters_passed += 1
		
		# –†–µ—à–µ–Ω–∏–µ: –Ω—É–∂–Ω–æ >= MIN_FILTERS –∏–∑ 5 + –ø–µ—Ä–µ–≤–µ—Å –≥–æ–ª–æ—Å–æ–≤ + –ù–ï–¢ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
		# –í–ê–ñ–ù–û: –≤ TRENDING —Ä–µ–∂–∏–º–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä–æ–≤ - –Ω–æ—Ä–º–∞, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
		
		if conflict_detected and market_regime != "TRENDING":
			# –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç - –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∞—Å—Ö–æ–¥—è—Ç—Å—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª (–¢–û–õ–¨–ö–û –≤–æ —Ñ–ª—ç—Ç–µ!)
			signal = "HOLD"
			signal_emoji = "‚ö†Ô∏è"
			reasons.append(f"üö´ HOLD: –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤! –ì–æ–ª–æ—Å–æ–≤ {bullish} vs {bearish}")
		elif bullish - bearish >= VOTE_THRESHOLD and buy_filters_passed >= MIN_FILTERS:
			signal = "BUY"
			signal_emoji = "üü¢"
			reasons.append(f"‚úÖ BUY: –ì–æ–ª–æ—Å–æ–≤ {bullish} vs {bearish}, —Ñ–∏–ª—å—Ç—Ä–æ–≤ {buy_filters_passed}/5, ADX={adx:.1f}")
		elif bearish - bullish >= VOTE_THRESHOLD and sell_filters_passed >= MIN_FILTERS:
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –æ–±—ã—á–Ω—ã–π SELL –∏–ª–∏ SHORT
			if short_enabled and len(short_conditions) >= 2:
				signal = "SHORT"
				signal_emoji = "üî¥üìâ"
				reasons.append(f"‚úÖ SHORT: –ú–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫ + —Å—Ç—Ä–∞—Ö, –≥–æ–ª–æ—Å–æ–≤ {bearish} vs {bullish}, —Ñ–∏–ª—å—Ç—Ä–æ–≤ {sell_filters_passed}/5")
			else:
				signal = "SELL"
				signal_emoji = "üî¥"
				reasons.append(f"‚úÖ SELL: –ì–æ–ª–æ—Å–æ–≤ {bearish} vs {bullish}, —Ñ–∏–ª—å—Ç—Ä–æ–≤ {sell_filters_passed}/5, ADX={adx:.1f}")
		else:
			signal = "HOLD"
			signal_emoji = "‚ö†Ô∏è"
			reasons.append(f"‚è∏ HOLD: –ë—ã—á—å–∏ {bullish} vs –ú–µ–¥–≤–µ–∂—å–∏ {bearish}, —Ñ–∏–ª—å—Ç—Ä–æ–≤ BUY:{buy_filters_passed} SELL:{sell_filters_passed}, —Ä–µ–∂–∏–º: {market_regime}")

		base_result = {
			"signal": signal,
			"signal_emoji": signal_emoji,
			"price": price,
			"EMA_short": ema_s,
			"EMA_long": ema_l,
			"RSI": rsi,
			"MACD": macd,
			"MACD_signal": macd_signal,
			"MACD_hist": macd_hist,
			"ADX": adx,
			"ATR": atr,
			"volume_ratio": volume / volume_ma if volume_ma > 0 else 1.0,
			"market_regime": market_regime,
			"bullish_votes": bullish,
			"bearish_votes": bearish,
			"buy_filters_passed": buy_filters_passed,
			"sell_filters_passed": sell_filters_passed,
			"indicator_conflicts": indicator_conflicts,
			"conflict_detected": conflict_detected,
			# SHORT-–º–µ—Ö–∞–Ω–∏–∫–∞ v1.0
			"short_enabled": short_enabled,
			"short_conditions": short_conditions,
			"fear_greed_index": fear_greed_index,
		# SHORT-–º–µ—Ö–∞–Ω–∏–∫–∞ v2.1 - Adaptive Fear SHORT
		"short_score": short_score,
		"short_position_size": short_position_size,
		"short_breakdown": short_breakdown,
		"funding_rate": funding_rate,
		"long_liquidations": long_liquidations,
		"short_liquidations": short_liquidations,
		"liquidation_ratio": long_liquidations / short_liquidations if short_liquidations > 0 else 0.0,
		"btc_dominance_change": btc_dominance_change if USE_ADVANCED_SHORT else 0.0,
		"volatility_ratio": atr / atr_mean if atr_mean > 0 and USE_ADVANCED_SHORT else 1.0,
		"short_version": SHORT_VERSION if USE_ADVANCED_SHORT else "1.0",
			"reasons": reasons,
		}
		
		# ====================================================================
		# –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ï –ú–û–î–ï–õ–ò (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã)
		# ====================================================================
		
		if self.use_statistical_models and signal != "HOLD":
			try:
				ensemble_decision = self.ensemble.make_decision(
					self.df,
					base_result,
					min_probability=0.55
				)
				
				# –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ ensemble —Ä–µ—à–µ–Ω–∏—è
				base_result["original_signal"] = signal
				base_result["signal"] = ensemble_decision["final_signal"]
				base_result["statistical_confidence"] = ensemble_decision["confidence"]
				base_result["statistical_models"] = ensemble_decision["models"]
				
				# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ reasons
				base_result["reasons"].append("\nü§ñ === –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ï –ú–û–î–ï–õ–ò ===")
				base_result["reasons"].extend(ensemble_decision["reasons"])
				
				# –û–±–Ω–æ–≤–ª—è–µ–º emoji
				if base_result["signal"] == "BUY":
					base_result["signal_emoji"] = "üü¢ü§ñ"
				elif base_result["signal"] == "SELL":
					base_result["signal_emoji"] = "üî¥ü§ñ"
				else:
					base_result["signal_emoji"] = "‚ö†Ô∏èü§ñ"
				
			except Exception as e:
				logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª—è—Ö: {e}")
				base_result["statistical_error"] = str(e)
		
		return base_result
	
	def calculate_adaptive_position_size(
		self,
		bullish_votes: int,
		bearish_votes: int,
		adx: float,
		regime: str
	) -> float:
		"""
		üéØ –ê–î–ê–ü–¢–ò–í–ù–´–ô –†–ê–ó–ú–ï–† –ü–û–ó–ò–¶–ò–ò v5.4
		
		–†–∞—Å—á—ë—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ:
		1. –°–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞ (votes delta)
		2. –°–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞/–±–æ–∫–æ–≤–∏–∫–∞ (ADX)
		3. –¢–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ (MR/TF)
		
		Returns: position_size –æ—Ç 0.2 –¥–æ 0.7
		"""
		votes_delta = bullish_votes - bearish_votes
		
		# –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ —Å–∏–ª–µ —Å–∏–≥–Ω–∞–ª–∞
		if votes_delta >= 7:
			base_size = 0.7  # –û—á–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
		elif votes_delta >= 5:
			base_size = 0.5  # –£–≤–µ—Ä–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
		elif votes_delta >= 3:
			base_size = 0.35  # –°—Ä–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª
		else:
			base_size = 0.25  # –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª
		
		# –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ ADX –∏ —Ä–µ–∂–∏–º—É
		if regime == "TREND_FOLLOWING":
			# –í —Ç—Ä–µ–Ω–¥–µ: —á–µ–º —Å–∏–ª—å–Ω–µ–µ ADX, —Ç–µ–º –±–æ–ª—å—à–µ –ø–æ–∑–∏—Ü–∏—è
			if adx > 35:
				multiplier = 1.3  # –°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ +30%
			elif adx > 30:
				multiplier = 1.2  # –°—Ä–µ–¥–Ω–∏–π —Ç—Ä–µ–Ω–¥ +20%
			elif adx > 26:
				multiplier = 1.1  # –°–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥ +10%
			else:
				multiplier = 1.0  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ
		
		elif regime == "MEAN_REVERSION":
			# –í –±–æ–∫–æ–≤–∏–∫–µ: —á–µ–º —Å–ª–∞–±–µ–µ ADX, —Ç–µ–º –±–æ–ª—å—à–µ –ø–æ–∑–∏—Ü–∏—è
			if adx < 15:
				multiplier = 1.3  # –ß—ë—Ç–∫–∏–π –±–æ–∫–æ–≤–∏–∫ +30%
			elif adx < 18:
				multiplier = 1.2  # –°—Ä–µ–¥–Ω–∏–π –±–æ–∫–æ–≤–∏–∫ +20%
			elif adx < 20:
				multiplier = 1.1  # –°–ª–∞–±—ã–π –±–æ–∫–æ–≤–∏–∫ +10%
			else:
				multiplier = 1.0  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ
		else:
			multiplier = 1.0
		
		# –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å
		final_size = base_size * multiplier
		
		# –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω 0.2-0.7
		final_size = max(0.2, min(0.7, final_size))
		
		return final_size
	
	def generate_signal_mean_reversion(self) -> Dict[str, Any]:
		"""
		üîÑ MEAN REVERSION STRATEGY
		
		–õ–æ–≥–∏–∫–∞: –ø–æ–∫—É–ø–∫–∞ –Ω–∞ —Å–∏–ª—å–Ω–æ–π –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏, –±—ã—Å—Ç—Ä—ã–π –≤—ã—Ö–æ–¥ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å—Ä–µ–¥–Ω–µ–º—É.
		–¶–µ–ª—å: –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–¥–µ–ª–∫–∏ 1-4% –≤ –±–æ–∫–æ–≤–æ–º/–ø–∞–¥–∞—é—â–µ–º —Ä—ã–Ω–∫–µ.
		
		–£—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞ (BUY):
		1. RSI < MR_RSI_OVERSOLD (30)
		2. Z-score < MR_ZSCORE_BUY_THRESHOLD (-2.5)
		3. ADX < MR_ADX_MAX (25) - –Ω–µ—Ç —Å–∏–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
		4. EMA12 ‚âà EMA26 (—Ä–∞–∑–Ω–∏—Ü–∞ < 1%) - –±–æ–∫–æ–≤–∏–∫
		
		–£—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞ (SELL):
		1. RSI > MR_RSI_EXIT (45)
		2. Z-score > MR_ZSCORE_SELL_THRESHOLD (0.5)
		
		–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏:
		- RSI < 20 –∏ Z < -2.5 ‚Üí 70% (—Å–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å)
		- RSI < 25 –∏ Z < -2.0 ‚Üí 50% (—É–º–µ—Ä–µ–Ω–Ω–∞—è)
		- –ò–Ω–∞—á–µ ‚Üí 30%
		"""
		if self.df.empty:
			raise ValueError("DataFrame is empty")
		
		last = self.df.iloc[-1]
		price = float(last["close"])
		
		# –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
		ema_12 = float(last.get("EMA_12", 0))
		ema_26 = float(last.get("EMA_26", 0))
		rsi = float(last["RSI"])
		adx = float(last.get(f"ADX_{ADX_WINDOW}", 0))
		atr = float(last.get(f"ATR_{ATR_WINDOW}", 0))
		stoch_k = float(last.get("Stoch_K", 0))
		
		# ====================================================================
		# –†–ê–°–ß–Å–¢ Z-SCORE
		# ====================================================================
		
		if len(self.df) >= MR_ZSCORE_WINDOW:
			close_prices = self.df["close"].iloc[-MR_ZSCORE_WINDOW:].astype(float)
			sma = close_prices.mean()
			std = close_prices.std()
			zscore = (price - sma) / std if std > 0 else 0
		else:
			zscore = 0
		
		# ====================================================================
		# –ü–†–û–í–ï–†–ö–ê –†–ï–ñ–ò–ú–ê –†–´–ù–ö–ê
		# ====================================================================
		
		# 1. ADX - –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—Å–æ–∫–∏–º (–∏—Å–∫–ª—é—á–∞–µ–º —Ç—Ä–µ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫)
		is_not_trending = adx < MR_ADX_MAX
		
		# 2. EMA –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è - EMA12 –∏ EMA26 –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–ª–∏–∑–∫–∏ (—Ñ–ª—ç—Ç)
		if ema_12 > 0 and ema_26 > 0:
			ema_divergence = abs(ema_12 - ema_26) / ema_26
			is_sideways = ema_divergence < MR_EMA_DIVERGENCE_MAX
		else:
			is_sideways = False
		
		# ====================================================================
		# –§–ò–õ–¨–¢–†–´ "–ü–ê–î–ê–Æ–©–ï–ì–û –ù–û–ñ–ê" (–ö–†–ò–¢–ò–ß–ù–û!)
		# ====================================================================
		
		reasons = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏—á–∏–Ω
		falling_knife_detected = False
		
		# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ü–µ–Ω–∞ –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 24 —á–∞—Å–æ–≤ –Ω–∞ X%
		if len(self.df) >= 24:
			low_24h = self.df["low"].iloc[-24:].min()
			price_vs_24h_low = (price - low_24h) / low_24h if low_24h > 0 else 0
			
			if price_vs_24h_low < -NO_BUY_IF_PRICE_BELOW_N_DAY_LOW_PERCENT:
				falling_knife_detected = True
				reasons.append(f"üö´ –ü–ê–î–ê–Æ–©–ò–ô –ù–û–ñ: —Ü–µ–Ω–∞ ${price:.2f} –Ω–∏–∂–µ min(24h)=${low_24h:.2f} –Ω–∞ {abs(price_vs_24h_low)*100:.1f}% (>{NO_BUY_IF_PRICE_BELOW_N_DAY_LOW_PERCENT*100}%)")
		
		# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞: –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –Ω–∞–∫–ª–æ–Ω EMA200
		if NO_BUY_IF_EMA200_SLOPE_NEG and len(self.df) >= 200 + 24:
			ema_200 = float(last.get("EMA_200", 0))
			if ema_200 > 0:
				# –ë–µ—Ä—ë–º EMA200 24 —Å–≤–µ—á–∏ –Ω–∞–∑–∞–¥
				ema_200_24h_ago = float(self.df["EMA_200"].iloc[-24])
				if ema_200_24h_ago > 0:
					ema200_slope = (ema_200 - ema_200_24h_ago) / ema_200_24h_ago
					
					if ema200_slope < EMA200_NEG_SLOPE_THRESHOLD:
						falling_knife_detected = True
						reasons.append(f"üö´ EMA200 –ü–ê–î–ê–ï–¢: slope={ema200_slope*100:.2f}% –∑–∞ 24h (< {EMA200_NEG_SLOPE_THRESHOLD*100:.1f}%)")
		
		# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—Ä–∞—Å–Ω—ã—Ö —Å–≤–µ—á–µ–π (v5: –í–ö–õ–Æ–ß–ï–ù –û–ë–†–ê–¢–ù–û)
		if USE_RED_CANDLES_FILTER and len(self.df) >= 5:
			# –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–≤–µ—á–µ–π
			recent_candles = self.df.tail(5)
			red_candles = 0
			total_drop = 0.0
			
			for idx in range(len(recent_candles)):
				candle = recent_candles.iloc[idx]
				open_price = float(candle["open"])
				close_price = float(candle["close"])
				candle_change = (close_price - open_price) / open_price if open_price > 0 else 0
				
				if candle_change < 0:  # –ö—Ä–∞—Å–Ω–∞—è —Å–≤–µ—á–∞
					red_candles += 1
					total_drop += abs(candle_change)
			
			# –ï—Å–ª–∏ 4+ –∫—Ä–∞—Å–Ω—ã—Ö —Å–≤–µ—á–µ–π –ø–æ–¥—Ä—è–¥ –∏ –æ–±—â–µ–µ –ø–∞–¥–µ–Ω–∏–µ > 3%
			if red_candles >= 4 and total_drop > 0.03:
				falling_knife_detected = True
				reasons.append(f"üö´ –°–ï–†–ò–Ø –ö–†–ê–°–ù–´–• –°–í–ï–ß–ï–ô: {red_candles}/5 —Å–≤–µ—á–µ–π, –ø–∞–¥–µ–Ω–∏–µ {total_drop*100:.1f}% (>3%)")
			
			# –ò–ª–∏ –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–≤–µ—á–∏ –≤—Å–µ –∫—Ä–∞—Å–Ω—ã–µ –∏ –ø–∞–¥–µ–Ω–∏–µ > 2%
			last_3_candles = self.df.tail(3)
			last_3_red = 0
			last_3_drop = 0.0
			for idx in range(len(last_3_candles)):
				candle = last_3_candles.iloc[idx]
				open_price = float(candle["open"])
				close_price = float(candle["close"])
				candle_change = (close_price - open_price) / open_price if open_price > 0 else 0
				if candle_change < 0:
					last_3_red += 1
					last_3_drop += abs(candle_change)
			
			if last_3_red == 3 and last_3_drop > 0.02:
				falling_knife_detected = True
				reasons.append(f"üö´ 3 –ö–†–ê–°–ù–´–ï –°–í–ï–ß–ò –ü–û–î–†–Ø–î: –ø–∞–¥–µ–Ω–∏–µ {last_3_drop*100:.1f}% (>2%)")
		
		# 4. v5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–ø–ª–µ—Å–∫–∞ –æ–±—ä—ë–º–∞ (–ù–û–í–û–ï)
		if USE_VOLUME_FILTER and "volume" in self.df.columns and len(self.df) >= 24:
			current_volume = float(self.df["volume"].iloc[-1])
			avg_volume_24h = float(self.df["volume"].iloc[-24:].mean())
			
			if avg_volume_24h > 0:
				volume_ratio = current_volume / avg_volume_24h
				if volume_ratio > VOLUME_SPIKE_THRESHOLD:
					falling_knife_detected = True
					reasons.append(f"üö´ –í–°–ü–õ–ï–°–ö –û–ë–™–Å–ú–ê: {volume_ratio:.2f}x —Å—Ä–µ–¥–Ω–∏–π –∑–∞ 24h (> {VOLUME_SPIKE_THRESHOLD}x)")
		
		# ====================================================================
		# –õ–û–ì–ò–ö–ê –°–ò–ì–ù–ê–õ–û–í
		# ====================================================================
		
		signal = "HOLD"
		signal_emoji = "‚ö†Ô∏è"
		position_size_percent = 0
		confidence = 0
		dynamic_sl = None  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π SL –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR
		dynamic_tp = None  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π TP –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR (v4)
		
		# --- –£–°–õ–û–í–ò–Ø –ü–û–ö–£–ü–ö–ò ---
		is_rsi_oversold = rsi < MR_RSI_OVERSOLD
		is_zscore_low = zscore < MR_ZSCORE_BUY_THRESHOLD
		is_strong_oversold = rsi < 20 and zscore < MR_ZSCORE_STRONG_BUY
		
		# v5: –ë–õ–û–ö–ò–†–£–ï–ú –í–•–û–î –ü–†–ò FALLING KNIFE (–µ—Å–ª–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π SL –æ—Ç–∫–ª—é—á–µ–Ω)
		if is_rsi_oversold and is_zscore_low and not falling_knife_detected:
			# –í—Ö–æ–¥ —Ä–∞–∑—Ä–µ—à—ë–Ω - –Ω–µ—Ç –ø–∞–¥–∞—é—â–µ–≥–æ –Ω–æ–∂–∞
			# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –±–æ–∫–æ–≤–∏–∫ –∏–ª–∏ —Å–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥
			if is_not_trending or is_sideways:
				signal = "BUY"
				signal_emoji = "üü¢"
				
				# –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
				if is_strong_oversold:
					position_size_percent = MR_POSITION_SIZE_STRONG
					reasons.append(f"‚úÖ STRONG BUY: RSI={rsi:.1f} (<20), Z-score={zscore:.2f} (<-2.5) ‚Üí –ø–æ–∑–∏—Ü–∏—è 70%")
				elif rsi < 25 and zscore < -2.0:
					position_size_percent = MR_POSITION_SIZE_MEDIUM
					reasons.append(f"‚úÖ MEDIUM BUY: RSI={rsi:.1f} (<25), Z-score={zscore:.2f} (<-2.0) ‚Üí –ø–æ–∑–∏—Ü–∏—è 50%")
				else:
					position_size_percent = MR_POSITION_SIZE_WEAK
					reasons.append(f"‚úÖ WEAK BUY: RSI={rsi:.1f}, Z-score={zscore:.2f} ‚Üí –ø–æ–∑–∏—Ü–∏—è 30%")
				
				confidence = min(1.0, (abs(zscore) / abs(MR_ZSCORE_BUY_THRESHOLD)) * 0.5 + ((MR_RSI_OVERSOLD - rsi) / MR_RSI_OVERSOLD) * 0.5)
				
				reasons.append(f"üìä RSI={rsi:.1f} < {MR_RSI_OVERSOLD} (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω)")
				reasons.append(f"üìâ Z-score={zscore:.2f} < {MR_ZSCORE_BUY_THRESHOLD} (—Å–∏–ª—å–Ω–æ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ)")
				reasons.append(f"üéØ ADX={adx:.1f} {'<' if is_not_trending else '‚â•'} {MR_ADX_MAX} ({'–Ω–µ—Ç —Å–∏–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞' if is_not_trending else '—Ç—Ä–µ–Ω–¥ –µ—Å—Ç—å!'})")
				
				if is_sideways:
					reasons.append(f"üìà EMA12‚âàEMA26 (–¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è {ema_divergence*100:.2f}% < 1%) - –±–æ–∫–æ–≤–∏–∫ ‚úì")
				
				if stoch_k < STOCH_OVERSOLD:
					reasons.append(f"üìâ Stoch={stoch_k:.1f} < {STOCH_OVERSOLD} - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏")
				
				# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π SL –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR
				if USE_DYNAMIC_SL_FOR_MR and atr > 0:
					atr_percent = (atr / price) * 100
					dynamic_sl = (atr / price) * MR_ATR_SL_MULTIPLIER
					dynamic_sl = max(MR_ATR_SL_MIN, min(dynamic_sl, MR_ATR_SL_MAX))
					
					# v4: –ê–î–ê–ü–¢–ò–í–ù–´–ô SL –ø—Ä–∏ —Ä–∏—Å–∫–µ –ø–∞–¥–∞—é—â–µ–≥–æ –Ω–æ–∂–∞
					if falling_knife_detected and ADAPTIVE_SL_ON_RISK:
						dynamic_sl *= ADAPTIVE_SL_MULTIPLIER  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 50%
						reasons.append(f"üõ°Ô∏è –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π SL: {dynamic_sl*100:.2f}% (—Ä–∏—Å–∫ –ø–∞–¥–∞—é—â–µ–≥–æ –Ω–æ–∂–∞, —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ {(ADAPTIVE_SL_MULTIPLIER-1)*100:.0f}%)")
					else:
						reasons.append(f"üõ°Ô∏è –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π SL: {dynamic_sl*100:.2f}% (ATR={atr_percent:.2f}% √ó {MR_ATR_SL_MULTIPLIER})")
				
				# v4: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π TP –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR
				if USE_DYNAMIC_TP_FOR_MR and atr > 0:
					atr_percent = (atr / price) * 100
					dynamic_tp = (atr / price) * MR_ATR_TP_MULTIPLIER
					dynamic_tp = max(MR_ATR_TP_MIN, min(dynamic_tp, MR_ATR_TP_MAX))
					reasons.append(f"üéØ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π TP: {dynamic_tp*100:.2f}% (ATR √ó {MR_ATR_TP_MULTIPLIER}, R:R={MR_ATR_TP_MULTIPLIER/MR_ATR_SL_MULTIPLIER:.1f})")
			else:
				signal = "HOLD"
				reasons.append(f"‚è∏ HOLD: RSI –∏ Z-score –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω—ã, –Ω–æ ADX={adx:.1f} > {MR_ADX_MAX} (—Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥) ‚Üí –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
		
		elif is_rsi_oversold and is_zscore_low and falling_knife_detected:
			# v5: –ü–∞–¥–∞—é—â–∏–π –Ω–æ–∂ –æ–±–Ω–∞—Ä—É–∂–µ–Ω
			if ADAPTIVE_SL_ON_RISK:
				# v4 —Ä–µ–∂–∏–º: —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Ö–æ–¥ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º SL
				# (—ç—Ç–æ—Ç –∫–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –≤ v5, —Ç.–∫. ADAPTIVE_SL_ON_RISK=False)
				pass  # –ª–æ–≥–∏–∫–∞ –≤—ã—à–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
			else:
				# v5 —Ä–µ–∂–∏–º: –±–ª–æ–∫–∏—Ä—É–µ–º –≤—Ö–æ–¥
				signal = "HOLD"
				# reasons —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏—á–∏–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤
		
		# --- –£–°–õ–û–í–ò–Ø –ü–†–û–î–ê–ñ–ò (–≤—ã—Ö–æ–¥ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏) ---
		is_rsi_normal = rsi > MR_RSI_EXIT
		is_zscore_normalized = zscore > MR_ZSCORE_SELL_THRESHOLD
		
		if is_rsi_normal or is_zscore_normalized:
			signal = "SELL"
			signal_emoji = "üî¥"
			confidence = min(1.0, (rsi - MR_RSI_EXIT) / (70 - MR_RSI_EXIT) * 0.5 + (zscore / 2.0) * 0.5)
			
			reasons.append(f"‚úÖ EXIT: –í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ä–µ–¥–Ω–µ–º—É")
			if is_rsi_normal:
				reasons.append(f"üìä RSI={rsi:.1f} > {MR_RSI_EXIT} (–≤–µ—Ä–Ω—É–ª—Å—è –∫ –Ω–æ—Ä–º–µ)")
			if is_zscore_normalized:
				reasons.append(f"üìà Z-score={zscore:.2f} > {MR_ZSCORE_SELL_THRESHOLD} (—Ü–µ–Ω–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –∫ —Å—Ä–µ–¥–Ω–µ–º—É)")
		
		# –ï—Å–ª–∏ –Ω–µ BUY –∏ –Ω–µ SELL - HOLD
		if signal == "HOLD" and not reasons:
			reasons.append(f"‚è∏ HOLD: RSI={rsi:.1f}, Z-score={zscore:.2f}")
			reasons.append(f"üìä ADX={adx:.1f}, EMA –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è={(abs(ema_12-ema_26)/ema_26*100 if ema_26 > 0 else 0):.2f}%")
			reasons.append("üîç –û–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏ (RSI<30, Z<-2.5)")
		
		return {
			"signal": signal,
			"signal_emoji": signal_emoji,
			"price": price,
			"RSI": rsi,
			"zscore": zscore,
			"ADX": adx,
			"ATR": atr,
			"EMA_12": ema_12,
			"EMA_26": ema_26,
			"ema_divergence": abs(ema_12 - ema_26) / ema_26 if ema_26 > 0 else 0,
			"stoch_k": stoch_k,
			"is_not_trending": is_not_trending,
			"is_sideways": is_sideways,
			"position_size_percent": position_size_percent,
			"confidence": confidence,
			"falling_knife_detected": falling_knife_detected,
			"dynamic_sl": dynamic_sl,  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π SL –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞
			"dynamic_tp": dynamic_tp,  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π TP –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞ (v4)
			"reasons": reasons,
			"strategy": "MEAN_REVERSION",
			"bullish_votes": 0,  # Mean reversion –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
			"bearish_votes": 0
		}
	
	def generate_signal_hybrid(self, last_mode: str = None, last_mode_time: float = 0) -> Dict[str, Any]:
		"""
		üîÄ –ì–ò–ë–†–ò–î–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø (MR + TF —Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –ø–æ ADX)
		
		–õ–æ–≥–∏–∫–∞:
		- ADX < 20 ‚Üí Mean Reversion (–±–æ–∫–æ–≤–æ–π —Ä—ã–Ω–æ–∫)
		- ADX > 25 ‚Üí Trend Following (—Ç—Ä–µ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫)
		- 20 <= ADX <= 25 ‚Üí –ø–µ—Ä–µ—Ö–æ–¥–Ω–∞—è –∑–æ–Ω–∞ (HOLD –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∂–∏–º)
		
		–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
		- last_mode: –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º ("MR" –∏–ª–∏ "TF")
		- last_mode_time: –≤—Ä–µ–º—è –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–µ–∂–∏–º–µ (—á–∞—Å—ã)
		
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–≥–Ω–∞–ª —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞.
		"""
		if self.df.empty:
			return {
				"signal": "HOLD",
				"signal_emoji": "‚ö†Ô∏è",
				"price": 0,
				"ADX": 0,
				"active_mode": "NONE",
				"reasons": ["‚ö†Ô∏è DataFrame –ø—É—Å—Ç–æ–π"],
				"strategy": "HYBRID",
				"bullish_votes": 0,
				"bearish_votes": 0
			}
		
		reasons = []
		
		# –ü–æ–ª—É—á–∞–µ–º ADX –∏ —Ü–µ–Ω—É –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏ DataFrame
		last = self.df.iloc[-1]
		price = float(last["close"])
		adx = float(last.get(f"ADX_{ADX_WINDOW}", 0))
		
		if adx == 0 or price == 0:
			return {
				"signal": "HOLD",
				"signal_emoji": "‚ö†Ô∏è",
				"price": price,
				"ADX": adx,
				"active_mode": "NONE",
				"reasons": ["‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"],
				"strategy": "HYBRID",
				"bullish_votes": 0,
				"bearish_votes": 0
			}
		
		# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –Ω–∞ –æ—Å–Ω–æ–≤–µ ADX
		if adx < HYBRID_ADX_MR_THRESHOLD:
			current_mode = "MR"
			reasons.append(f"üìä ADX={adx:.1f} < {HYBRID_ADX_MR_THRESHOLD} ‚Üí MEAN REVERSION —Ä–µ–∂–∏–º")
		elif adx > HYBRID_ADX_TF_THRESHOLD:
			current_mode = "TF"
			reasons.append(f"üìä ADX={adx:.1f} > {HYBRID_ADX_TF_THRESHOLD} ‚Üí TREND FOLLOWING —Ä–µ–∂–∏–º")
		else:
			# –ü–µ—Ä–µ—Ö–æ–¥–Ω–∞—è –∑–æ–Ω–∞
			if HYBRID_TRANSITION_MODE == "HOLD":
				current_mode = "TRANSITION"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å TRANSITION, –Ω–µ HOLD
				reasons.append(f"‚è∏ ADX={adx:.1f} –≤ –ø–µ—Ä–µ—Ö–æ–¥–Ω–æ–π –∑–æ–Ω–µ [{HYBRID_ADX_MR_THRESHOLD}, {HYBRID_ADX_TF_THRESHOLD}] ‚Üí TRANSITION")
			else:  # LAST
				current_mode = last_mode if last_mode else "TRANSITION"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: TRANSITION –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
				reasons.append(f"üîÑ ADX={adx:.1f} –≤ –ø–µ—Ä–µ—Ö–æ–¥–Ω–æ–π –∑–æ–Ω–µ ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∂–∏–º ({current_mode})")
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ä–µ–∂–∏–º–µ (–∑–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è)
		if last_mode is not None and last_mode != current_mode and last_mode_time < HYBRID_MIN_TIME_IN_MODE:
			current_mode = last_mode
			reasons.append(f"‚è± –û—Å—Ç–∞—ë–º—Å—è –≤ —Ä–µ–∂–∏–º–µ {last_mode} (–ø—Ä–æ—à–ª–æ {last_mode_time:.1f}h < {HYBRID_MIN_TIME_IN_MODE}h)")
		
		# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
		if current_mode == "MR":
			signal_result = self.generate_signal_mean_reversion()
			signal_result["active_mode"] = "MEAN_REVERSION"
			signal_result["strategy"] = "HYBRID"
			# –î–æ–±–∞–≤–ª—è–µ–º reasons –æ —Ä–µ–∂–∏–º–µ –≤ –Ω–∞—á–∞–ª–æ
			signal_result["reasons"] = reasons + signal_result.get("reasons", [])
			
			# v5.4: –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
			if signal_result["signal"] == "BUY":
				bullish_votes = signal_result.get("bullish_votes", 0)
				bearish_votes = signal_result.get("bearish_votes", 0)
				adaptive_size = self.calculate_adaptive_position_size(
					bullish_votes, bearish_votes, adx, "MEAN_REVERSION"
				)
				signal_result["position_size_percent"] = adaptive_size
				signal_result["reasons"].append(
					f"üìä Adaptive Size: {adaptive_size*100:.0f}% (votes={bullish_votes-bearish_votes}, ADX={adx:.1f})"
				)
		
		elif current_mode == "TF":
			signal_result = self.generate_signal()
			signal_result["active_mode"] = "TREND_FOLLOWING"
			signal_result["strategy"] = "HYBRID"
			# –î–æ–±–∞–≤–ª—è–µ–º reasons –æ —Ä–µ–∂–∏–º–µ –≤ –Ω–∞—á–∞–ª–æ
			signal_result["reasons"] = reasons + signal_result.get("reasons", [])
			
			# v5.4: –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
			if signal_result["signal"] == "BUY":
				bullish_votes = signal_result.get("bullish_votes", 0)
				bearish_votes = signal_result.get("bearish_votes", 0)
				adaptive_size = self.calculate_adaptive_position_size(
					bullish_votes, bearish_votes, adx, "TREND_FOLLOWING"
				)
				signal_result["position_size_percent"] = adaptive_size
				signal_result["reasons"].append(
					f"üìä Adaptive Size: {adaptive_size*100:.0f}% (votes={bullish_votes-bearish_votes}, ADX={adx:.1f})"
				)
		
		else:  # HOLD –∏–ª–∏ TRANSITION
			# –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–Ω–∞—è –∑–æ–Ω–∞, –≤—Å—ë —Ä–∞–≤–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
			# –Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–≥–æ –Ω–∞ HOLD
			signal_result = self.generate_signal()
			signal_result["signal"] = "HOLD"  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ HOLD –≤ –ø–µ—Ä–µ—Ö–æ–¥–Ω–æ–π –∑–æ–Ω–µ
			signal_result["signal_emoji"] = "‚ö†Ô∏è"
			signal_result["active_mode"] = "TRANSITION"
			signal_result["strategy"] = "HYBRID"
			# –î–æ–±–∞–≤–ª—è–µ–º reason –æ –ø–µ—Ä–µ—Ö–æ–¥–Ω–æ–π –∑–æ–Ω–µ –≤ –Ω–∞—á–∞–ª–æ
			signal_result["reasons"] = reasons + signal_result.get("reasons", [])
		
		return signal_result
	
	async def generate_signal_multi_timeframe(
		self,
		data_provider,
		symbol: str,
		strategy: str = "TREND_FOLLOWING"
	) -> Dict[str, Any]:
		"""
		üîÄ MULTI-TIMEFRAME ANALYSIS
		
		–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö (15m, 1h, 4h) –∏
		–æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏—Ö —á–µ—Ä–µ–∑ weighted voting –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏.
		
		–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
		- data_provider: –æ–±—ä–µ–∫—Ç DataProvider –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
		- symbol: —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "BTCUSDT")
		- strategy: "TREND_FOLLOWING", "MEAN_REVERSION", –∏–ª–∏ "HYBRID"
		
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
		- –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
		"""
		import asyncio
		
		if not USE_MULTI_TIMEFRAME:
			# Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π DataFrame –µ—Å–ª–∏ MTF –æ—Ç–∫–ª—é—á–µ–Ω
			if strategy == "MEAN_REVERSION":
				return self.generate_signal_mean_reversion()
			elif strategy == "HYBRID":
				return self.generate_signal_hybrid()
			else:
				return self.generate_signal()
		
		reasons = []
		timeframe_signals = {}
		
		# ====================================================================
		# 1. –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø –ö–ê–ñ–î–û–ì–û –¢–ê–ô–ú–§–†–ï–ô–ú–ê
		# ====================================================================
		
		async def fetch_all_timeframes():
			"""–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤"""
			tasks = []
			for tf in MTF_TIMEFRAMES:
				tasks.append(data_provider.fetch_klines(symbol, tf, limit=200))
			return await asyncio.gather(*tasks, return_exceptions=True)
		
		# –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
		logger.info(f"MTF: –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö {MTF_TIMEFRAMES}")
		try:
			# –ï—Å–ª–∏ —É–∂–µ –≤ async –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º gather, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞—ë–º event loop
			try:
				loop = asyncio.get_running_loop()
				# –ú—ã —É–∂–µ –≤ async –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ - –ø—Ä–æ—Å—Ç–æ await
				tf_data = await fetch_all_timeframes()
				logger.info(f"MTF: –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–ª—É—á–µ–Ω–æ {len(tf_data)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
			except RuntimeError:
				# –ù–µ—Ç running loop - —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
				tf_data = asyncio.run(fetch_all_timeframes())
				logger.info(f"MTF: –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (new loop), –ø–æ–ª—É—á–µ–Ω–æ {len(tf_data)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
		except Exception as e:
			logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ MTF –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
			# Fallback –Ω–∞ single TF
			if strategy == "MEAN_REVERSION":
				return self.generate_signal_mean_reversion()
			elif strategy == "HYBRID":
				return self.generate_signal_hybrid()
			else:
				return self.generate_signal()
		
		# ====================================================================
		# 2. –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–ò–ì–ù–ê–õ–û–í –î–õ–Ø –ö–ê–ñ–î–û–ì–û –¢–ê–ô–ú–§–†–ï–ô–ú–ê
		# ====================================================================
		
		for i, tf in enumerate(MTF_TIMEFRAMES):
			logger.debug(f"MTF: –æ–±—Ä–∞–±–æ—Ç–∫–∞ {tf} (index={i})")
			if isinstance(tf_data[i], Exception):
				logger.warning(f"MTF: –æ—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {tf}: {tf_data[i]}")
				timeframe_signals[tf] = {
					"signal": "HOLD",
					"price": 0,
					"RSI": 0,
					"ADX": 0,
					"MACD_hist": 0,
					"market_regime": "NEUTRAL",
					"bullish_votes": 0,
					"bearish_votes": 0,
					"weight": MTF_WEIGHTS.get(tf, 0),
					"confidence": 0,
					"error": str(tf_data[i])
				}
				continue
			
			df = tf_data[i]
			logger.debug(f"MTF: DataFrame –¥–ª—è {tf}: {len(df) if not df.empty else 0} —Å—Ç—Ä–æ–∫")
			if df.empty:
				logger.warning(f"MTF: –ø—É—Å—Ç–æ–π DataFrame –¥–ª—è {tf}")
				timeframe_signals[tf] = {
					"signal": "HOLD",
					"price": 0,
					"RSI": 0,
					"ADX": 0,
					"MACD_hist": 0,
					"market_regime": "NEUTRAL",
					"bullish_votes": 0,
					"bearish_votes": 0,
					"weight": MTF_WEIGHTS.get(tf, 0),
					"confidence": 0,
					"error": "Empty dataframe"
				}
				continue
			
			# –°–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
			try:
				sg = SignalGenerator(df, use_statistical_models=self.use_statistical_models)
				sg.compute_indicators()
				
				# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
				if strategy == "MEAN_REVERSION":
					signal_result = sg.generate_signal_mean_reversion()
				elif strategy == "HYBRID":
					signal_result = sg.generate_signal_hybrid()
				else:
					signal_result = sg.generate_signal()
				
				# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
				signal = signal_result.get("signal", "HOLD")
				price = signal_result.get("price", 0)
				rsi = signal_result.get("RSI", 0)
				adx = signal_result.get("ADX", 0)
				
				logger.info(f"MTF: {tf} ‚Üí {signal} (—Ü–µ–Ω–∞={price:.2f}, RSI={rsi:.1f}, ADX={adx:.1f})")
				
				timeframe_signals[tf] = {
					"signal": signal,
					"price": price,
					"RSI": rsi,
					"ADX": adx,
					"MACD_hist": signal_result.get("MACD_hist", 0),
					"market_regime": signal_result.get("market_regime", "NEUTRAL"),
					"bullish_votes": signal_result.get("bullish_votes", 0),
					"bearish_votes": signal_result.get("bearish_votes", 0),
					"weight": MTF_WEIGHTS.get(tf, 0),
					"confidence": signal_result.get("confidence", 0)
				}
				
			except Exception as e:
				logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {tf}: {e}", exc_info=True)
				timeframe_signals[tf] = {
					"signal": "HOLD",
					"price": 0,
					"RSI": 0,
					"ADX": 0,
					"MACD_hist": 0,
					"market_regime": "NEUTRAL",
					"bullish_votes": 0,
					"bearish_votes": 0,
					"weight": MTF_WEIGHTS.get(tf, 0),
					"confidence": 0,
					"error": str(e)
				}
		
		# ====================================================================
		# 3. WEIGHTED VOTING
		# ====================================================================
		
		buy_score = 0.0
		sell_score = 0.0
		hold_score = 0.0
		
		buy_count = 0
		sell_count = 0
		hold_count = 0
		
		for tf, sig_data in timeframe_signals.items():
			signal = sig_data.get("signal", "HOLD")
			weight = sig_data.get("weight", 0)
			confidence = sig_data.get("confidence", 0.5)
			
			# –í–∑–≤–µ—à–∏–≤–∞–µ–º –ø–æ –≤–µ—Å—É —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–∞
			weighted_score = weight * (1 + confidence)
			
			if signal == "BUY":
				buy_score += weighted_score
				buy_count += 1
				reasons.append(f"üìä {tf}: BUY (–≤–µ—Å={weight:.2f}, conf={confidence:.2f})")
			elif signal == "SELL":
				sell_score += weighted_score
				sell_count += 1
				reasons.append(f"üìä {tf}: SELL (–≤–µ—Å={weight:.2f}, conf={confidence:.2f})")
			else:
				hold_score += weighted_score
				hold_count += 1
				reasons.append(f"üìä {tf}: HOLD (–≤–µ—Å={weight:.2f})")
		
		# ====================================================================
		# 4. –ü–†–û–í–ï–†–ö–ê –°–û–ì–õ–ê–°–û–í–ê–ù–ù–û–°–¢–ò (ALIGNMENT)
		# ====================================================================
		
		total_tf = len(MTF_TIMEFRAMES)
		alignment_strength = 0
		final_signal = "HOLD"
		signal_emoji = "‚ö†Ô∏è"
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ (–≤—Å–µ 3 TF –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ)
		if buy_count == total_tf:
			alignment_strength = 1.0
			final_signal = "BUY"
			signal_emoji = "üü¢üî•"
			buy_score *= MTF_FULL_ALIGNMENT_BONUS
			reasons.append(f"‚úÖ –ü–û–õ–ù–û–ï –°–û–ì–õ–ê–°–ò–ï: –≤—Å–µ {total_tf} —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç BUY! (–±–æ–Ω—É—Å {MTF_FULL_ALIGNMENT_BONUS}x)")
		elif sell_count == total_tf:
			alignment_strength = 1.0
			final_signal = "SELL"
			signal_emoji = "üî¥üî•"
			sell_score *= MTF_FULL_ALIGNMENT_BONUS
			reasons.append(f"‚úÖ –ü–û–õ–ù–û–ï –°–û–ì–õ–ê–°–ò–ï: –≤—Å–µ {total_tf} —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç SELL! (–±–æ–Ω—É—Å {MTF_FULL_ALIGNMENT_BONUS}x)")
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ (–º–∏–Ω–∏–º—É–º MTF_MIN_AGREEMENT)
		elif buy_count >= MTF_MIN_AGREEMENT and buy_score > sell_score:
			alignment_strength = buy_count / total_tf
			final_signal = "BUY"
			signal_emoji = "üü¢"
			reasons.append(f"‚úì –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ: {buy_count}/{total_tf} —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç BUY")
		elif sell_count >= MTF_MIN_AGREEMENT and sell_score > buy_score:
			alignment_strength = sell_count / total_tf
			final_signal = "SELL"
			signal_emoji = "üî¥"
			reasons.append(f"‚úì –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ: {sell_count}/{total_tf} —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç SELL")
		
		# –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ - –æ—Å—Ç–∞—ë–º—Å—è –≤ HOLD
		else:
			final_signal = "HOLD"
			signal_emoji = "‚ö†Ô∏è"
			reasons.append(f"‚ö†Ô∏è –ö–û–ù–§–õ–ò–ö–¢ –¢–ê–ô–ú–§–†–ï–ô–ú–û–í: BUY={buy_count}, SELL={sell_count}, HOLD={hold_count}")
			reasons.append(f"   Weighted scores: BUY={buy_score:.2f}, SELL={sell_score:.2f}, HOLD={hold_score:.2f}")
		
		# ====================================================================
		# 5. –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢
		# ====================================================================
		
		# –ë–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ (–æ–±—ã—á–Ω–æ 1h)
		main_tf = '1h' if '1h' in timeframe_signals else MTF_TIMEFRAMES[0]
		main_data = timeframe_signals.get(main_tf, {})
		
		# –†–∞—Å—á—ë—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞ (–¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏)
		signal_strength = 0
		if final_signal == "BUY":
			signal_strength = int(buy_score * 3)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ scale ~3-15
		elif final_signal == "SELL":
			signal_strength = int(sell_score * 3)
		
		result = {
			"signal": final_signal,
			"signal_emoji": signal_emoji,
			"price": main_data.get("price", 0),
			"strategy": f"{strategy}_MTF",
			
			# Multi-timeframe –¥–∞–Ω–Ω—ã–µ
			"mtf_enabled": True,
			"timeframe_signals": timeframe_signals,
			"alignment_strength": alignment_strength,
			"buy_score": buy_score,
			"sell_score": sell_score,
			"hold_score": hold_score,
			"buy_count": buy_count,
			"sell_count": sell_count,
			"hold_count": hold_count,
			
			# –î–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
			"RSI": main_data.get("RSI", 0),
			"ADX": main_data.get("ADX", 0),
			"MACD_hist": main_data.get("MACD_hist", 0),
			"market_regime": main_data.get("market_regime", "NEUTRAL"),
			
			# –ì–æ–ª–æ—Å–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
			"bullish_votes": signal_strength if final_signal == "BUY" else 0,
			"bearish_votes": signal_strength if final_signal == "SELL" else 0,
			
			# –ü—Ä–∏—á–∏–Ω—ã
			"reasons": reasons
		}
		
		return result
