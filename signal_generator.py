import pandas as pd
import numpy as np
from typing import Dict, Any, Optional
from logger import logger
from config import (
	# –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
	ADX_WINDOW, RSI_OVERSOLD, RSI_OVERSOLD_NEAR, RSI_OVERBOUGHT, RSI_OVERBOUGHT_NEAR,
	STOCH_OVERSOLD, STOCH_OVERBOUGHT, VOLUME_HIGH_RATIO, VOLUME_MODERATE_RATIO, VOLUME_LOW_RATIO,
	RSI_OVERBOUGHT, ADX_RANGING, MIN_FILTERS, MIN_FILTERS_SELL
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
from indicators import IndicatorsCalculator
from market_regime import MarketRegimeDetector
from strategies import MeanReversionStrategy, HybridStrategy
from multi_timeframe import MultiTimeframeAnalyzer

try:
	from statistical_models import (
		BayesianDecisionLayer,
		ZScoreAnalyzer,
		MarkovRegimeSwitcher,
		EnsembleDecisionMaker
	)
	STATISTICAL_MODELS_AVAILABLE = True
except ImportError:
	STATISTICAL_MODELS_AVAILABLE = False
	logger.warning("–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã")

class SignalGenerator:
	def __init__(self, df: pd.DataFrame, use_statistical_models: bool = False):
		self.df = df.copy()
		if "close" not in self.df.columns:
			raise ValueError("DataFrame must contain 'close' column")
		self.df.sort_index(inplace=True)
		
		# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
		self.indicators_calculator = IndicatorsCalculator(self.df)
		self.market_regime_detector = MarketRegimeDetector(self.df)
		self.mean_reversion_strategy = MeanReversionStrategy(self.df)
		self.hybrid_strategy = HybridStrategy(self.df, self, self.mean_reversion_strategy)
		
		# –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
		self.use_statistical_models = use_statistical_models and STATISTICAL_MODELS_AVAILABLE
		if self.use_statistical_models:
			self.bayesian = BayesianDecisionLayer()
			self.zscore = ZScoreAnalyzer(window=50, buy_threshold=-2.0, sell_threshold=2.0)
			self.regime = MarkovRegimeSwitcher(window=50)
			self.ensemble = EnsembleDecisionMaker(
				self.bayesian, self.zscore, self.regime,
				bayesian_weight=0.4, zscore_weight=0.3, regime_weight=0.3
			)

	def get_market_regime(self, df: pd.DataFrame) -> str:
		"""
		üéØ –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –†–´–ù–û–ß–ù–û–ì–û –†–ï–ñ–ò–ú–ê
		
		–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç EMA200 –∏ ADX –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞.
		
		–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
		- df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
		
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
		- "BEAR": –º–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫ (EMA200 –ø–∞–¥–∞–µ—Ç)
		- "BULL": –±—ã—á–∏–π —Ä—ã–Ω–æ–∫ (EMA200 —Ä–∞—Å—Ç—ë—Ç)
		- "NEUTRAL": –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
		"""
		if len(df) < 200:
			return "NEUTRAL"
		
		try:
			# EMA200 –∏ –µ—ë –Ω–∞–∫–ª–æ–Ω
			import ta
			ema200 = ta.trend.ema_indicator(df['close'], window=200)
			if len(ema200) < 10 or ema200.isna().all():
				return "NEUTRAL"
			
			# –ù–∞–∫–ª–æ–Ω EMA200 –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–µ—Ä–∏–æ–¥–æ–≤
			slope = (ema200.iloc[-1] - ema200.iloc[-10]) / ema200.iloc[-10]
			
			# ADX –¥–ª—è —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞
			adx = ta.trend.adx(df['high'], df['low'], df['close'], window=14)
			if len(adx) == 0 or adx.isna().all():
				adx_value = 0
			else:
				adx_value = adx.iloc[-1]
			
			# –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è)
			if slope < -0.001:  # EMA200 –ø–∞–¥–∞–µ—Ç
				return "BEAR"
			elif slope > 0.001:  # EMA200 —Ä–∞—Å—Ç—ë—Ç
				return "BULL"
			else:
				return "NEUTRAL"
		except Exception:
			return "NEUTRAL"


	

	def compute_indicators(
		self, ema_short_window=None, ema_long_window=None, rsi_window=None,
		macd_fast=None, macd_slow=None, macd_signal=None
	) -> pd.DataFrame:
		"""
		üìä –í–´–ß–ò–°–õ–ï–ù–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–û–í
		
		–î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –º–æ–¥—É–ª—é.
		"""
		self.df = self.indicators_calculator.compute_indicators(
			ema_short_window, ema_long_window, rsi_window,
			macd_fast, macd_slow, macd_signal
		)
		
		# –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏ —Å –Ω–æ–≤—ã–º DataFrame
		self.market_regime_detector.df = self.df.copy()
		self.mean_reversion_strategy.df = self.df.copy()
		self.hybrid_strategy.df = self.df.copy()
		
		return self.df

	def generate_signal(self) -> Dict[str, Any]:
		"""
		üéØ –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î –ì–ï–ù–ï–†–ê–¶–ò–ò –°–ò–ì–ù–ê–õ–û–í
		
		–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤.
		"""
		if self.df.empty:
			raise ValueError("DataFrame is empty")
		
		try:
			# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
			indicators_data = self.indicators_calculator.get_indicators_data()
		except ValueError as e:
			# –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
			logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
			return {
				"signal": "HOLD",
				"reasons": [f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"],
				"price": float(self.df["close"].iloc[-1]),
				"market_regime": "NONE",
				"bullish_votes": 0,
				"bearish_votes": 0,
				"vote_delta": 0,
				"filters_passed": 0,
				"short_enabled": False,
				"short_conditions": [],
				"indicators": {
					"RSI": "–Ω/–¥",
					"ADX": "–Ω/–¥",
					"MACD": "–Ω/–¥"
				}
			}
		
		# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞
		regime_data = self.market_regime_detector.detect_market_regime(indicators_data)
		
		# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
		voting_data = self.market_regime_detector.analyze_voting_system(indicators_data, regime_data)
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
		filters_data = self.market_regime_detector.check_filters(indicators_data)
		
		
		# ====================================================================
		# –ü–†–ò–ù–Ø–¢–ò–ï –†–ï–®–ï–ù–ò–Ø
		# ====================================================================
		
		# –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
		bullish = voting_data.get("bullish_votes", 0)
		bearish = voting_data.get("bearish_votes", 0)
		reasons = voting_data.get("reasons", [])
		
		market_regime = regime_data.get("market_regime", "NEUTRAL")
		vote_threshold = regime_data.get("vote_threshold", 3)
		
		buy_filters_passed = filters_data.get("buy_filters_passed", 0)
		sell_filters_passed = filters_data.get("sell_filters_passed", 0)
		min_filters = filters_data.get("min_filters", 3)
		
		
		# –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
		signal = "HOLD"
		signal_emoji = "‚ö†Ô∏è"
		
		if bullish - bearish >= vote_threshold and buy_filters_passed >= min_filters:
			signal = "BUY"
			signal_emoji = "üü¢"
			reasons.append(f"‚úÖ BUY: –ì–æ–ª–æ—Å–æ–≤ {bullish} vs {bearish}, —Ñ–∏–ª—å—Ç—Ä–æ–≤ {buy_filters_passed}/{min_filters}")
		elif bearish - bullish >= vote_threshold and sell_filters_passed >= MIN_FILTERS_SELL:
				signal = "SELL"
				signal_emoji = "üî¥"
				reasons.append(f"‚úÖ SELL: –ì–æ–ª–æ—Å–æ–≤ {bearish} vs {bullish}, —Ñ–∏–ª—å—Ç—Ä–æ–≤ {sell_filters_passed}/{MIN_FILTERS_SELL}")
		else:
			reasons.append(f"‚è∏ HOLD: –ë—ã—á—å–∏ {bullish} vs –ú–µ–¥–≤–µ–∂—å–∏ {bearish}, —Ñ–∏–ª—å—Ç—Ä–æ–≤ BUY:{buy_filters_passed} SELL:{sell_filters_passed}, —Ä–µ–∂–∏–º: {market_regime}")

		# –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		base_result = {
			"signal": signal,
			"signal_emoji": signal_emoji,
			"price": indicators_data.get("price", 0),
			"EMA_short": indicators_data.get("EMA_short", 0),
			"EMA_long": indicators_data.get("EMA_long", 0),
			"RSI": indicators_data.get("RSI", 50),
			"MACD": indicators_data.get("MACD", 0),
			"MACD_signal": indicators_data.get("MACD_signal", 0),
			"MACD_hist": indicators_data.get("MACD_hist", 0),
			"ADX": indicators_data.get("ADX", 0),
			"ATR": indicators_data.get("ATR", 0),
			"volume_ratio": indicators_data.get("volume_ratio", 1.0),
			"market_regime": market_regime,
			"bullish_votes": bullish,
			"bearish_votes": bearish,
			"buy_filters_passed": buy_filters_passed,
			"sell_filters_passed": sell_filters_passed,
			"indicator_conflicts": [],
			"conflict_detected": False,
			"reasons": reasons,
		}
		
		# ====================================================================
		# –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ï –ú–û–î–ï–õ–ò (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã)
		# ====================================================================
		
		if self.use_statistical_models and signal != "HOLD":
			try:
				ensemble_decision = self.ensemble.make_decision(
					self.df,
					base_result,
					min_probability=0.55
				)
				
				# –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ ensemble —Ä–µ—à–µ–Ω–∏—è
				base_result["original_signal"] = signal
				base_result["signal"] = ensemble_decision["final_signal"]
				base_result["statistical_confidence"] = ensemble_decision["confidence"]
				base_result["statistical_models"] = ensemble_decision["models"]
				
				# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ reasons
				base_result["reasons"].append("\nü§ñ === –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ï –ú–û–î–ï–õ–ò ===")
				base_result["reasons"].extend(ensemble_decision["reasons"])
				
				# –û–±–Ω–æ–≤–ª—è–µ–º emoji
				if base_result["signal"] == "BUY":
					base_result["signal_emoji"] = "üü¢ü§ñ"
				elif base_result["signal"] == "SELL":
					base_result["signal_emoji"] = "üî¥ü§ñ"
				else:
					base_result["signal_emoji"] = "‚ö†Ô∏èü§ñ"
				
			except Exception as e:
				logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª—è—Ö: {e}")
				base_result["statistical_error"] = str(e)
		
		return base_result
	
	def calculate_adaptive_position_size(
		self,
		bullish_votes: int,
		bearish_votes: int,
		adx: float,
		regime: str
	) -> float:
		"""
		üéØ –ê–î–ê–ü–¢–ò–í–ù–´–ô –†–ê–ó–ú–ï–† –ü–û–ó–ò–¶–ò–ò v5.4
		
		–†–∞—Å—á—ë—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ:
		1. –°–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞ (votes delta)
		2. –°–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞/–±–æ–∫–æ–≤–∏–∫–∞ (ADX)
		3. –¢–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ (MR/TF)
		
		Returns: position_size –æ—Ç 0.2 –¥–æ 0.7
		"""
		votes_delta = bullish_votes - bearish_votes
		
		# –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ —Å–∏–ª–µ —Å–∏–≥–Ω–∞–ª–∞
		if votes_delta >= 7:
			base_size = 0.7  # –û—á–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
		elif votes_delta >= 5:
			base_size = 0.5  # –£–≤–µ—Ä–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
		elif votes_delta >= 3:
			base_size = 0.35  # –°—Ä–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª
		else:
			base_size = 0.25  # –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª
		
		# –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ ADX –∏ —Ä–µ–∂–∏–º—É
		if regime == "TREND_FOLLOWING":
			# –í —Ç—Ä–µ–Ω–¥–µ: —á–µ–º —Å–∏–ª—å–Ω–µ–µ ADX, —Ç–µ–º –±–æ–ª—å—à–µ –ø–æ–∑–∏—Ü–∏—è
			if adx > 35:
				multiplier = 1.3  # –°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ +30%
			elif adx > 30:
				multiplier = 1.2  # –°—Ä–µ–¥–Ω–∏–π —Ç—Ä–µ–Ω–¥ +20%
			elif adx > 26:
				multiplier = 1.1  # –°–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥ +10%
			else:
				multiplier = 1.0  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ
		
		elif regime == "MEAN_REVERSION":
			# –í –±–æ–∫–æ–≤–∏–∫–µ: —á–µ–º —Å–ª–∞–±–µ–µ ADX, —Ç–µ–º –±–æ–ª—å—à–µ –ø–æ–∑–∏—Ü–∏—è
			if adx < 15:
				multiplier = 1.3  # –ß—ë—Ç–∫–∏–π –±–æ–∫–æ–≤–∏–∫ +30%
			elif adx < 18:
				multiplier = 1.2  # –°—Ä–µ–¥–Ω–∏–π –±–æ–∫–æ–≤–∏–∫ +20%
			elif adx < 20:
				multiplier = 1.1  # –°–ª–∞–±—ã–π –±–æ–∫–æ–≤–∏–∫ +10%
			else:
				multiplier = 1.0  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ
		else:
			multiplier = 1.0
		
		# –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å
		final_size = base_size * multiplier
		
		# –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω 0.2-0.7
		final_size = max(0.2, min(0.7, final_size))
		
		return final_size
	
	def generate_signal_mean_reversion(self) -> Dict[str, Any]:
		"""
		üîÑ MEAN REVERSION STRATEGY
		
		–î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –º–æ–¥—É–ª—é.
		"""
		return self.mean_reversion_strategy.generate_signal()
	
	def generate_signal_hybrid(self, last_mode: str = None, last_mode_time: float = 0) -> Dict[str, Any]:
		"""
		üîÄ –ì–ò–ë–†–ò–î–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø
		
		–î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –º–æ–¥—É–ª—é.
		"""
		return self.hybrid_strategy.generate_signal(last_mode, last_mode_time)
	
	async def generate_signal_multi_timeframe(
		self,
		data_provider,
		symbol: str,
		strategy: str = "TREND_FOLLOWING"
	) -> Dict[str, Any]:
		"""
		üîÄ MULTI-TIMEFRAME ANALYSIS
		
		–î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º –∞–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –º–æ–¥—É–ª—é.
		"""
		mtf_analyzer = MultiTimeframeAnalyzer(lambda df=None: SignalGenerator(df if df is not None else self.df, self.use_statistical_models))
		return await mtf_analyzer.generate_signal_multi_timeframe(data_provider, symbol, strategy)
