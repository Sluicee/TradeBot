#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SELL —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from signal_generator import SignalGenerator
import pandas as pd
import numpy as np

def test_sell_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é SELL —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SELL —Å–∏–≥–Ω–∞–ª–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º 100 —Å–≤–µ—á–µ–π —Å —Ä–∞—Å—Ç—É—â–∏–º —Ç—Ä–µ–Ω–¥–æ–º (RSI > 70)
    np.random.seed(42)
    base_price = 100
    prices = [base_price]
    
    for i in range(99):
        # –†–∞—Å—Ç—É—â–∏–π —Ç—Ä–µ–Ω–¥ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∫–æ–ª–µ–±–∞–Ω–∏—è–º–∏
        change = np.random.normal(0.5, 0.3)  # –°—Ä–µ–¥–Ω–∏–π —Ä–æ—Å—Ç 0.5% —Å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é 0.3%
        new_price = prices[-1] * (1 + change/100)
        prices.append(new_price)
    
    # –°–æ–∑–¥–∞–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ
    data = {
        'close': prices,
        'high': [p * (1 + abs(np.random.normal(0, 0.01))) for p in prices],
        'low': [p * (1 - abs(np.random.normal(0, 0.01))) for p in prices],
        'volume': [1000 + np.random.randint(-200, 200) for _ in prices]
    }
    
    df = pd.DataFrame(data)
    print(f"–°–æ–∑–¥–∞–Ω–æ {len(df)} —Å–≤–µ—á–µ–π, —Ü–µ–Ω–∞ –æ—Ç ${df['close'].iloc[0]:.2f} –¥–æ ${df['close'].iloc[-1]:.2f}")
    
    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
    sg = SignalGenerator(df)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    try:
        df_with_indicators = sg.compute_indicators()
        print("–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤—ã—á–∏—Å–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
        return False
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
    try:
        result = sg.generate_signal()
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞:")
        print(f"  –°–∏–≥–Ω–∞–ª: {result['signal']}")
        print(f"  RSI: {result.get('RSI', 'N/A')}")
        print(f"  Bullish votes: {result.get('bullish_votes', 0)}")
        print(f"  Bearish votes: {result.get('bearish_votes', 0)}")
        print(f"  Vote delta: {result.get('bearish_votes', 0) - result.get('bullish_votes', 0)}")
        print(f"  Market regime: {result.get('market_regime', 'N/A')}")
        
        print(f"\nüìã –ü—Ä–∏—á–∏–Ω—ã:")
        for reason in result.get('reasons', []):
            print(f"  - {reason}")
        
        return result['signal'] == 'SELL'
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
        return False

if __name__ == "__main__":
    success = test_sell_generation()
    print(f"\n{'='*50}")
    if success:
        print("SELL —Å–∏–≥–Ω–∞–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("SELL —Å–∏–≥–Ω–∞–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        print("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("  - RSI –Ω–µ –¥–æ—Å—Ç–∏–≥ 70+")
        print("  - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ bearish –≥–æ–ª–æ—Å–æ–≤")
        print("  - –§–∏–ª—å—Ç—Ä—ã –±–ª–æ–∫–∏—Ä—É—é—Ç —Å–∏–≥–Ω–∞–ª")
