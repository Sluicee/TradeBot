import pandas as pd
import numpy as np
import ta
from typing import Dict, Any, Optional
from logger import logger
from config import (
	# Mean Reversion
	MR_RSI_OVERSOLD, MR_RSI_EXIT, MR_ZSCORE_BUY_THRESHOLD, MR_ZSCORE_SELL_THRESHOLD,
	MR_ZSCORE_STRONG_BUY, MR_ADX_MAX, MR_EMA_DIVERGENCE_MAX, MR_ZSCORE_WINDOW,
	MR_POSITION_SIZE_STRONG, MR_POSITION_SIZE_MEDIUM, MR_POSITION_SIZE_WEAK,
	# –§–∏–ª—å—Ç—Ä—ã "–ø–∞–¥–∞—é—â–µ–≥–æ –Ω–æ–∂–∞" v5
	NO_BUY_IF_PRICE_BELOW_N_DAY_LOW_PERCENT, NO_BUY_IF_EMA200_SLOPE_NEG, EMA200_NEG_SLOPE_THRESHOLD,
	USE_RED_CANDLES_FILTER, USE_VOLUME_FILTER, VOLUME_SPIKE_THRESHOLD,
	# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π SL/TP v5
	USE_DYNAMIC_SL_FOR_MR, MR_ATR_SL_MULTIPLIER, MR_ATR_SL_MIN, MR_ATR_SL_MAX,
	ADAPTIVE_SL_ON_RISK, ADAPTIVE_SL_MULTIPLIER,
	USE_DYNAMIC_TP_FOR_MR, MR_ATR_TP_MULTIPLIER, MR_ATR_TP_MIN, MR_ATR_TP_MAX,
	# R:R –∫–æ–Ω—Ç—Ä–æ–ª—å
	MIN_RR_RATIO, ENFORCE_MIN_RR,
	# –ì–∏–±—Ä–∏–¥–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
	STRATEGY_HYBRID_MODE, HYBRID_ADX_MR_THRESHOLD, HYBRID_ADX_TF_THRESHOLD,
	HYBRID_ADX_MR_EXIT, HYBRID_ADX_TF_EXIT,
	HYBRID_TRANSITION_MODE, HYBRID_MIN_TIME_IN_MODE,
	# –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
	STOCH_OVERSOLD, STOCH_OVERBOUGHT, ADX_WINDOW, ATR_WINDOW,
	# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ä–µ–∂–∏–º–æ–≤
	MODE_MEAN_REVERSION, MODE_TREND_FOLLOWING, MODE_TRANSITION,
	# –ü–æ—Ä–æ–≥–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
	VOTE_THRESHOLD_TRANSITIONING, VOTE_THRESHOLD_TRENDING, VOTE_THRESHOLD_RANGING
)

class MeanReversionStrategy:
	"""
	üîÑ MEAN REVERSION STRATEGY
	
	–õ–æ–≥–∏–∫–∞: –ø–æ–∫—É–ø–∫–∞ –Ω–∞ —Å–∏–ª—å–Ω–æ–π –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏, –±—ã—Å—Ç—Ä—ã–π –≤—ã—Ö–æ–¥ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å—Ä–µ–¥–Ω–µ–º—É.
	–¶–µ–ª—å: –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–¥–µ–ª–∫–∏ 1-4% –≤ –±–æ–∫–æ–≤–æ–º/–ø–∞–¥–∞—é—â–µ–º —Ä—ã–Ω–∫–µ.
	"""
	
	def __init__(self, df: pd.DataFrame):
		self.df = df.copy()
		if "close" not in self.df.columns:
			raise ValueError("DataFrame must contain 'close' column")
		self.df.sort_index(inplace=True)
	
	def generate_signal(self) -> Dict[str, Any]:
		"""
		üîÑ MEAN REVERSION STRATEGY
		
		–õ–æ–≥–∏–∫–∞: –ø–æ–∫—É–ø–∫–∞ –Ω–∞ —Å–∏–ª—å–Ω–æ–π –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏, –±—ã—Å—Ç—Ä—ã–π –≤—ã—Ö–æ–¥ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å—Ä–µ–¥–Ω–µ–º—É.
		–¶–µ–ª—å: –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–¥–µ–ª–∫–∏ 1-4% –≤ –±–æ–∫–æ–≤–æ–º/–ø–∞–¥–∞—é—â–µ–º —Ä—ã–Ω–∫–µ.
		"""
		if self.df.empty:
			raise ValueError("DataFrame is empty")
		
		last = self.df.iloc[-1]
		price = float(last["close"])
		
		# –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
		ema_12 = float(last.get("EMA_12", 0))
		ema_26 = float(last.get("EMA_26", 0))
		rsi = float(last.get("RSI", 50))
		adx = float(last.get(f"ADX_{ADX_WINDOW}", 0))
		atr = float(last.get(f"ATR_{ATR_WINDOW}", 0))
		stoch_k = float(last.get("Stoch_K", 0))
		
		# ====================================================================
		# –†–ê–°–ß–Å–¢ Z-SCORE (–ò–°–ü–†–ê–í–õ–ï–ù–û)
		# ====================================================================
		
		if len(self.df) >= MR_ZSCORE_WINDOW:
			close_prices = self.df["close"].astype(float)
			sma = close_prices.rolling(window=MR_ZSCORE_WINDOW).mean()
			std = close_prices.rolling(window=MR_ZSCORE_WINDOW).std()
			zscore_series = (close_prices - sma) / std
			zscore = zscore_series.iloc[-1] if not pd.isna(zscore_series.iloc[-1]) else 0
		else:
			zscore = 0
		
		# ====================================================================
		# –ü–†–û–í–ï–†–ö–ê –†–ï–ñ–ò–ú–ê –†–´–ù–ö–ê
		# ====================================================================
		
		# 1. ADX - –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—Å–æ–∫–∏–º (–∏—Å–∫–ª—é—á–∞–µ–º —Ç—Ä–µ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫)
		is_not_trending = adx < MR_ADX_MAX
		
		# 2. EMA –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è - EMA12 –∏ EMA26 –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–ª–∏–∑–∫–∏ (—Ñ–ª—ç—Ç)
		if ema_12 > 0 and ema_26 > 0:
			ema_divergence = abs(ema_12 - ema_26) / ema_26
			is_sideways = ema_divergence < MR_EMA_DIVERGENCE_MAX
		else:
			is_sideways = False
		
		# ====================================================================
		# –§–ò–õ–¨–¢–†–´ "–ü–ê–î–ê–Æ–©–ï–ì–û –ù–û–ñ–ê" (–ö–†–ò–¢–ò–ß–ù–û!)
		# ====================================================================
		
		reasons = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏—á–∏–Ω
		falling_knife_detected = False
		
		# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ü–µ–Ω–∞ –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 24 —á–∞—Å–æ–≤ –Ω–∞ X%
		if len(self.df) >= 24:
			low_24h = self.df["low"].iloc[-24:].min()
			price_vs_24h_low = (price - low_24h) / low_24h if low_24h > 0 else 0
			
			if price_vs_24h_low < -NO_BUY_IF_PRICE_BELOW_N_DAY_LOW_PERCENT:
				falling_knife_detected = True
				reasons.append(f"üö´ –ü–ê–î–ê–Æ–©–ò–ô –ù–û–ñ: —Ü–µ–Ω–∞ ${price:.2f} –Ω–∏–∂–µ min(24h)=${low_24h:.2f} –Ω–∞ {abs(price_vs_24h_low)*100:.1f}% (>{NO_BUY_IF_PRICE_BELOW_N_DAY_LOW_PERCENT*100}%)")
		
		# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞: –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –Ω–∞–∫–ª–æ–Ω EMA200
		if NO_BUY_IF_EMA200_SLOPE_NEG and len(self.df) >= 200 + 24:
			ema_200 = float(last.get("EMA_200", 0))
			if ema_200 > 0:
				# –ë–µ—Ä—ë–º EMA200 24 —Å–≤–µ—á–∏ –Ω–∞–∑–∞–¥
				ema_200_24h_ago = float(self.df["EMA_200"].iloc[-24])
				if ema_200_24h_ago > 0:
					ema200_slope = (ema_200 - ema_200_24h_ago) / ema_200_24h_ago
					
					if ema200_slope < EMA200_NEG_SLOPE_THRESHOLD:
						falling_knife_detected = True
						reasons.append(f"üö´ EMA200 –ü–ê–î–ê–ï–¢: slope={ema200_slope*100:.2f}% –∑–∞ 24h (< {EMA200_NEG_SLOPE_THRESHOLD*100:.1f}%)")
		
		# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—Ä–∞—Å–Ω—ã—Ö —Å–≤–µ—á–µ–π (v5: –í–ö–õ–Æ–ß–ï–ù –û–ë–†–ê–¢–ù–û)
		if USE_RED_CANDLES_FILTER and len(self.df) >= 5:
			# –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–≤–µ—á–µ–π
			recent_candles = self.df.tail(5)
			red_candles = 0
			total_drop = 0.0
			
			for idx in range(len(recent_candles)):
				candle = recent_candles.iloc[idx]
				open_price = float(candle["open"])
				close_price = float(candle["close"])
				candle_change = (close_price - open_price) / open_price if open_price > 0 else 0
				
				if candle_change < 0:  # –ö—Ä–∞—Å–Ω–∞—è —Å–≤–µ—á–∞
					red_candles += 1
					total_drop += abs(candle_change)
			
			# –ï—Å–ª–∏ 4+ –∫—Ä–∞—Å–Ω—ã—Ö —Å–≤–µ—á–µ–π –ø–æ–¥—Ä—è–¥ –∏ –æ–±—â–µ–µ –ø–∞–¥–µ–Ω–∏–µ > 3%
			if red_candles >= 4 and total_drop > 0.03:
				falling_knife_detected = True
				reasons.append(f"üö´ –°–ï–†–ò–Ø –ö–†–ê–°–ù–´–• –°–í–ï–ß–ï–ô: {red_candles}/5 —Å–≤–µ—á–µ–π, –ø–∞–¥–µ–Ω–∏–µ {total_drop*100:.1f}% (>3%)")
			
			# –ò–ª–∏ –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–≤–µ—á–∏ –≤—Å–µ –∫—Ä–∞—Å–Ω—ã–µ –∏ –ø–∞–¥–µ–Ω–∏–µ > 2%
			last_3_candles = self.df.tail(3)
			last_3_red = 0
			last_3_drop = 0.0
			for idx in range(len(last_3_candles)):
				candle = last_3_candles.iloc[idx]
				open_price = float(candle["open"])
				close_price = float(candle["close"])
				candle_change = (close_price - open_price) / open_price if open_price > 0 else 0
				if candle_change < 0:
					last_3_red += 1
					last_3_drop += abs(candle_change)
			
			if last_3_red == 3 and last_3_drop > 0.02:
				falling_knife_detected = True
				reasons.append(f"üö´ 3 –ö–†–ê–°–ù–´–ï –°–í–ï–ß–ò –ü–û–î–†–Ø–î: –ø–∞–¥–µ–Ω–∏–µ {last_3_drop*100:.1f}% (>2%)")
		
		# 4. v5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–ø–ª–µ—Å–∫–∞ –æ–±—ä—ë–º–∞ (–ù–û–í–û–ï)
		if USE_VOLUME_FILTER and "volume" in self.df.columns and len(self.df) >= 24:
			current_volume = float(self.df["volume"].iloc[-1])
			avg_volume_24h = float(self.df["volume"].iloc[-24:].mean())
			
			if avg_volume_24h > 0:
				volume_ratio = current_volume / avg_volume_24h
				if volume_ratio > VOLUME_SPIKE_THRESHOLD:
					falling_knife_detected = True
					reasons.append(f"üö´ –í–°–ü–õ–ï–°–ö –û–ë–™–Å–ú–ê: {volume_ratio:.2f}x —Å—Ä–µ–¥–Ω–∏–π –∑–∞ 24h (> {VOLUME_SPIKE_THRESHOLD}x)")
		
		# ====================================================================
		# –õ–û–ì–ò–ö–ê –°–ò–ì–ù–ê–õ–û–í
		# ====================================================================
		
		signal = "HOLD"
		signal_emoji = "‚ö†Ô∏è"
		position_size_percent = 0
		confidence = 0
		dynamic_sl = None  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π SL –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR
		dynamic_tp = None  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π TP –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR (v4)
		
		# --- –£–°–õ–û–í–ò–Ø –ü–û–ö–£–ü–ö–ò ---
		is_rsi_oversold = rsi < MR_RSI_OVERSOLD
		is_zscore_low = zscore < MR_ZSCORE_BUY_THRESHOLD
		is_strong_oversold = rsi < 20 and zscore < MR_ZSCORE_STRONG_BUY
		
		# v5: –ë–õ–û–ö–ò–†–£–ï–ú –í–•–û–î –ü–†–ò FALLING KNIFE (–µ—Å–ª–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π SL –æ—Ç–∫–ª—é—á–µ–Ω)
		if is_rsi_oversold and is_zscore_low and not falling_knife_detected:
			# –í—Ö–æ–¥ —Ä–∞–∑—Ä–µ—à—ë–Ω - –Ω–µ—Ç –ø–∞–¥–∞—é—â–µ–≥–æ –Ω–æ–∂–∞
			# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –±–æ–∫–æ–≤–∏–∫ –∏–ª–∏ —Å–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥
			if is_not_trending or is_sideways:
				signal = "BUY"
				signal_emoji = "üü¢"
				
				# –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
				if is_strong_oversold:
					position_size_percent = MR_POSITION_SIZE_STRONG
					reasons.append(f"‚úÖ STRONG BUY: RSI={rsi:.1f} (<20), Z-score={zscore:.2f} (<{MR_ZSCORE_STRONG_BUY}) ‚Üí –ø–æ–∑–∏—Ü–∏—è 70%")
				elif rsi < 25 and zscore < -2.0:
					position_size_percent = MR_POSITION_SIZE_MEDIUM
					reasons.append(f"‚úÖ MEDIUM BUY: RSI={rsi:.1f} (<25), Z-score={zscore:.2f} (<-2.0) ‚Üí –ø–æ–∑–∏—Ü–∏—è 50%")
				else:
					position_size_percent = MR_POSITION_SIZE_WEAK
					reasons.append(f"‚úÖ WEAK BUY: RSI={rsi:.1f}, Z-score={zscore:.2f} ‚Üí –ø–æ–∑–∏—Ü–∏—è 30%")
				
				confidence = min(1.0, (abs(zscore) / abs(MR_ZSCORE_BUY_THRESHOLD)) * 0.5 + ((MR_RSI_OVERSOLD - rsi) / MR_RSI_OVERSOLD) * 0.5)
				
				reasons.append(f"üìä RSI={rsi:.1f} < {MR_RSI_OVERSOLD} (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω)")
				reasons.append(f"üìâ Z-score={zscore:.2f} < {MR_ZSCORE_BUY_THRESHOLD} (—Å–∏–ª—å–Ω–æ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ)")
				reasons.append(f"üéØ ADX={adx:.1f} {'<' if is_not_trending else '‚â•'} {MR_ADX_MAX} ({'–Ω–µ—Ç —Å–∏–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞' if is_not_trending else '—Ç—Ä–µ–Ω–¥ –µ—Å—Ç—å!'})")
				
				if is_sideways:
					reasons.append(f"üìà EMA12‚âàEMA26 (–¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è {ema_divergence*100:.2f}% < 1%) - –±–æ–∫–æ–≤–∏–∫ ‚úì")
				
				if stoch_k < STOCH_OVERSOLD:
					reasons.append(f"üìâ Stoch={stoch_k:.1f} < {STOCH_OVERSOLD} - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏")
				
				# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π SL –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR
				if USE_DYNAMIC_SL_FOR_MR and atr > 0:
					atr_percent = (atr / price) * 100
					dynamic_sl = (atr / price) * MR_ATR_SL_MULTIPLIER
					dynamic_sl = max(MR_ATR_SL_MIN, min(dynamic_sl, MR_ATR_SL_MAX))
					
					# v4: –ê–î–ê–ü–¢–ò–í–ù–´–ô SL –ø—Ä–∏ —Ä–∏—Å–∫–µ –ø–∞–¥–∞—é—â–µ–≥–æ –Ω–æ–∂–∞
					if falling_knife_detected and ADAPTIVE_SL_ON_RISK:
						dynamic_sl *= ADAPTIVE_SL_MULTIPLIER  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 50%
						reasons.append(f"üõ°Ô∏è –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π SL: {dynamic_sl*100:.2f}% (—Ä–∏—Å–∫ –ø–∞–¥–∞—é—â–µ–≥–æ –Ω–æ–∂–∞, —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ {(ADAPTIVE_SL_MULTIPLIER-1)*100:.0f}%)")
					else:
						reasons.append(f"üõ°Ô∏è –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π SL: {dynamic_sl*100:.2f}% (ATR={atr_percent:.2f}% √ó {MR_ATR_SL_MULTIPLIER})")
				
				# v4: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π TP –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR
				if USE_DYNAMIC_TP_FOR_MR and atr > 0:
					atr_percent = (atr / price) * 100
					dynamic_tp = (atr / price) * MR_ATR_TP_MULTIPLIER
					dynamic_tp = max(MR_ATR_TP_MIN, min(dynamic_tp, MR_ATR_TP_MAX))
					
					# –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ R:R
					if ENFORCE_MIN_RR and dynamic_sl is not None:
						current_rr = dynamic_tp / dynamic_sl if dynamic_sl > 0 else 0
						if current_rr < MIN_RR_RATIO:
							# –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º TP –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ R:R
							dynamic_tp = dynamic_sl * MIN_RR_RATIO
							# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –º–∞–∫—Å–∏–º—É–º
							if dynamic_tp > MR_ATR_TP_MAX:
								# –ï—Å–ª–∏ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –º–∞–∫—Å–∏–º—É–º, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º SL
								dynamic_sl = dynamic_tp / MIN_RR_RATIO
								if dynamic_sl < MR_ATR_SL_MIN:
									# –ï—Å–ª–∏ SL —Å—Ç–∞–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–º, –±–ª–æ–∫–∏—Ä—É–µ–º –≤—Ö–æ–¥
									reasons.append(f"üö´ R:R –∫–æ–Ω—Ç—Ä–æ–ª—å: SL={dynamic_sl*100:.2f}% < {MR_ATR_SL_MIN*100:.1f}% ‚Üí –±–ª–æ–∫–∏—Ä—É–µ–º –≤—Ö–æ–¥")
									signal = "HOLD"
									signal_emoji = "‚ö†Ô∏è"
									# –í—ã—Ö–æ–¥–∏–º –∏–∑ –º–µ—Ç–æ–¥–∞
									return {
										"signal": signal,
										"signal_emoji": signal_emoji,
										"position_size_percent": 0,
										"confidence": 0,
										"reasons": reasons,
										"dynamic_sl": None,
										"dynamic_tp": None,
										"strategy": "MEAN_REVERSION",
										"bullish_votes": 0,
										"bearish_votes": 0
									}
							reasons.append(f"üéØ R:R –∫–æ–Ω—Ç—Ä–æ–ª—å: TP —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω –¥–æ {dynamic_tp*100:.2f}% (R:R={MIN_RR_RATIO:.2f})")
						else:
							reasons.append(f"üéØ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π TP: {dynamic_tp*100:.2f}% (ATR √ó {MR_ATR_TP_MULTIPLIER}, R:R={current_rr:.2f})")
					else:
						reasons.append(f"üéØ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π TP: {dynamic_tp*100:.2f}% (ATR √ó {MR_ATR_TP_MULTIPLIER}, R:R={MR_ATR_TP_MULTIPLIER/MR_ATR_SL_MULTIPLIER:.1f})")
			else:
				signal = "HOLD"
				reasons.append(f"‚è∏ HOLD: RSI –∏ Z-score –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω—ã, –Ω–æ ADX={adx:.1f} > {MR_ADX_MAX} (—Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥) ‚Üí –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
		
		elif is_rsi_oversold and is_zscore_low and falling_knife_detected:
			# v5: –ü–∞–¥–∞—é—â–∏–π –Ω–æ–∂ –æ–±–Ω–∞—Ä—É–∂–µ–Ω
			if ADAPTIVE_SL_ON_RISK:
				# v4 —Ä–µ–∂–∏–º: —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Ö–æ–¥ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º SL
				# (—ç—Ç–æ—Ç –∫–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –≤ v5, —Ç.–∫. ADAPTIVE_SL_ON_RISK=False)
				pass  # –ª–æ–≥–∏–∫–∞ –≤—ã—à–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
			else:
				# v5 —Ä–µ–∂–∏–º: –±–ª–æ–∫–∏—Ä—É–µ–º –≤—Ö–æ–¥
				signal = "HOLD"
				# reasons —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏—á–∏–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤
		
		# --- –£–°–õ–û–í–ò–Ø –ü–†–û–î–ê–ñ–ò (–≤—ã—Ö–æ–¥ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏) ---
		is_rsi_normal = rsi > MR_RSI_EXIT
		is_zscore_normalized = zscore > MR_ZSCORE_SELL_THRESHOLD
		
		if is_rsi_normal or is_zscore_normalized:
			signal = "SELL"
			signal_emoji = "üî¥"
			confidence = min(1.0, (rsi - MR_RSI_EXIT) / (70 - MR_RSI_EXIT) * 0.5 + (zscore / 2.0) * 0.5)
			
			reasons.append(f"‚úÖ EXIT: –í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ä–µ–¥–Ω–µ–º—É")
			if is_rsi_normal:
				reasons.append(f"üìä RSI={rsi:.1f} > {MR_RSI_EXIT} (–≤–µ—Ä–Ω—É–ª—Å—è –∫ –Ω–æ—Ä–º–µ)")
			if is_zscore_normalized:
				reasons.append(f"üìà Z-score={zscore:.2f} > {MR_ZSCORE_SELL_THRESHOLD} (—Ü–µ–Ω–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –∫ —Å—Ä–µ–¥–Ω–µ–º—É)")
		
		# –ï—Å–ª–∏ –Ω–µ BUY –∏ –Ω–µ SELL - HOLD
		if signal == "HOLD" and not reasons:
			reasons.append(f"‚è∏ HOLD: RSI={rsi:.1f}, Z-score={zscore:.2f}")
			reasons.append(f"üìä ADX={adx:.1f}, EMA –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è={(abs(ema_12-ema_26)/ema_26*100 if ema_26 > 0 else 0):.2f}%")
			reasons.append("üîç –û–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏ (RSI<30, Z<-2.5)")
		
		return {
			"signal": signal,
			"signal_emoji": signal_emoji,
			"price": price,
			"RSI": rsi,
			"zscore": zscore,
			"ADX": adx,
			"ATR": atr,
			"EMA_12": ema_12,
			"EMA_26": ema_26,
			"ema_divergence": abs(ema_12 - ema_26) / ema_26 if ema_26 > 0 else 0,
			"stoch_k": stoch_k,
			"is_not_trending": is_not_trending,
			"is_sideways": is_sideways,
			"position_size_percent": position_size_percent,
			"confidence": confidence,
			"falling_knife_detected": falling_knife_detected,
			"dynamic_sl": dynamic_sl,  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π SL –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞
			"dynamic_tp": dynamic_tp,  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π TP –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞ (v4)
			"reasons": reasons,
			"strategy": "MEAN_REVERSION",
			"bullish_votes": 0,  # Mean reversion –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
			"bearish_votes": 0
		}

class HybridStrategy:
	"""
	üîÄ –ì–ò–ë–†–ò–î–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø (MR + TF —Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –ø–æ ADX)
	
	–õ–æ–≥–∏–∫–∞:
	- ADX < 12 ‚Üí Mean Reversion (–±–æ–∫–æ–≤–æ–π —Ä—ã–Ω–æ–∫)
	- ADX > 30 ‚Üí Trend Following (—Ç—Ä–µ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫)
	- 12 <= ADX <= 30 ‚Üí –ø–µ—Ä–µ—Ö–æ–¥–Ω–∞—è –∑–æ–Ω–∞ (HOLD –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∂–∏–º)
	"""
	
	def __init__(self, df: pd.DataFrame, trend_following_strategy, mean_reversion_strategy):
		self.df = df.copy()
		self.trend_following_strategy = trend_following_strategy
		self.mean_reversion_strategy = mean_reversion_strategy
		if "close" not in self.df.columns:
			raise ValueError("DataFrame must contain 'close' column")
		self.df.sort_index(inplace=True)
	
	def generate_signal(self, last_mode: str = None, last_mode_time: float = 0) -> Dict[str, Any]:
		"""
		üîÄ –ì–ò–ë–†–ò–î–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø (MR + TF —Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –ø–æ ADX)
		
		–õ–æ–≥–∏–∫–∞:
		- ADX < 20 ‚Üí Mean Reversion (–±–æ–∫–æ–≤–æ–π —Ä—ã–Ω–æ–∫)
		- ADX > 25 ‚Üí Trend Following (—Ç—Ä–µ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫)
		- 20 <= ADX <= 25 ‚Üí –ø–µ—Ä–µ—Ö–æ–¥–Ω–∞—è –∑–æ–Ω–∞ (HOLD –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∂–∏–º)
		
		–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
		- last_mode: –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º ("MR" –∏–ª–∏ "TF")
		- last_mode_time: –≤—Ä–µ–º—è –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–µ–∂–∏–º–µ (—á–∞—Å—ã)
		
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–≥–Ω–∞–ª —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞.
		"""
		# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
		logger.info(f"üîÄ HYBRID: last_mode={last_mode}, last_mode_time={last_mode_time:.2f}h, min_time={HYBRID_MIN_TIME_IN_MODE}h")
		if self.df.empty:
			return {
				"signal": "HOLD",
				"signal_emoji": "‚ö†Ô∏è",
				"price": 0,
				"ADX": 0,
				"active_mode": "NONE",
				"reasons": ["‚ö†Ô∏è DataFrame –ø—É—Å—Ç–æ–π"],
				"strategy": "HYBRID",
				"bullish_votes": 0,
				"bearish_votes": 0
			}
		
		reasons = []
		
		# –ü–æ–ª—É—á–∞–µ–º ADX –∏ —Ü–µ–Ω—É –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏ DataFrame
		last = self.df.iloc[-1]
		price = float(last["close"])
		adx = float(last.get(f"ADX_{ADX_WINDOW}", 0))
		
		# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –¥–∞–Ω–Ω—ã—Ö
		logger.info(f"üìä HYBRID DATA: len(df)={len(self.df)}, price={price:.2f}, adx={adx:.2f}, ADX_WINDOW={ADX_WINDOW}")
		
		if np.isnan(adx) or adx == 0 or price == 0:
			return {
				"signal": "HOLD",
				"signal_emoji": "‚ö†Ô∏è",
				"price": price,
				"ADX": adx,
				"active_mode": "NONE",
				"reasons": ["‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"],
				"strategy": "HYBRID",
				"bullish_votes": 0,
				"bearish_votes": 0
			}
		
		# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –Ω–∞ –æ—Å–Ω–æ–≤–µ ADX —Å –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å–æ–º
		# –ì–∏—Å—Ç–µ—Ä–µ–∑–∏—Å –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —á–∞—Å—Ç—ã–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ ADX –æ–∫–æ–ª–æ –ø–æ—Ä–æ–≥–æ–≤
		if last_mode == "MR":
			# –í MR —Ä–µ–∂–∏–º–µ: –≤—ã—Ö–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ ADX > MR_EXIT (20)
			if adx > HYBRID_ADX_MR_EXIT:
				current_mode = "TF"
				reasons.append(f"üìä ADX={adx:.1f} > {HYBRID_ADX_MR_EXIT} ‚Üí –≤—ã—Ö–æ–¥ –∏–∑ MR –≤ TF")
			else:
				current_mode = "MR"
				reasons.append(f"üìä ADX={adx:.1f} ‚â§ {HYBRID_ADX_MR_EXIT} ‚Üí –æ—Å—Ç–∞–µ–º—Å—è –≤ MR")
		elif last_mode == "TF":
			# –í TF —Ä–µ–∂–∏–º–µ: –≤—ã—Ö–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ ADX < TF_EXIT (15)
			if adx < HYBRID_ADX_TF_EXIT:
				current_mode = "MR"
				reasons.append(f"üìä ADX={adx:.1f} < {HYBRID_ADX_TF_EXIT} ‚Üí –≤—ã—Ö–æ–¥ –∏–∑ TF –≤ MR")
			else:
				current_mode = "TF"
				reasons.append(f"üìä ADX={adx:.1f} ‚â• {HYBRID_ADX_TF_EXIT} ‚Üí –æ—Å—Ç–∞–µ–º—Å—è –≤ TF")
		else:
			# –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∏–ª–∏ TRANSITION: –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ—Ä–æ–≥–∏
			if adx < HYBRID_ADX_MR_THRESHOLD:
				current_mode = "MR"
				reasons.append(f"üìä ADX={adx:.1f} < {HYBRID_ADX_MR_THRESHOLD} ‚Üí MEAN REVERSION —Ä–µ–∂–∏–º")
			elif adx > HYBRID_ADX_TF_THRESHOLD:
				current_mode = "TF"
				reasons.append(f"üìä ADX={adx:.1f} > {HYBRID_ADX_TF_THRESHOLD} ‚Üí TREND FOLLOWING —Ä–µ–∂–∏–º")
			else:
				# –ü–µ—Ä–µ—Ö–æ–¥–Ω–∞—è –∑–æ–Ω–∞
				if HYBRID_TRANSITION_MODE == "HOLD":
					current_mode = MODE_TRANSITION
					reasons.append(f"‚è∏ ADX={adx:.1f} –≤ –ø–µ—Ä–µ—Ö–æ–¥–Ω–æ–π –∑–æ–Ω–µ [{HYBRID_ADX_MR_THRESHOLD}, {HYBRID_ADX_TF_THRESHOLD}] ‚Üí TRANSITION")
				else:  # LAST
					current_mode = last_mode if last_mode else MODE_TRANSITION
					reasons.append(f"üîÑ ADX={adx:.1f} –≤ –ø–µ—Ä–µ—Ö–æ–¥–Ω–æ–π –∑–æ–Ω–µ ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∂–∏–º ({current_mode})")
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ä–µ–∂–∏–º–µ (–∑–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è)
		# –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: TRANSITION —Ä–µ–∂–∏–º –º–æ–∂–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç
		if (last_mode is not None and last_mode != current_mode and 
			last_mode_time < HYBRID_MIN_TIME_IN_MODE and 
			last_mode != MODE_TRANSITION):
			current_mode = last_mode
			time_remaining = HYBRID_MIN_TIME_IN_MODE - last_mode_time
			reasons.append(f"‚è± –ó–ê–©–ò–¢–ê –û–¢ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø: –û—Å—Ç–∞—ë–º—Å—è –≤ —Ä–µ–∂–∏–º–µ {last_mode}")
			reasons.append(f"   üìä –í—Ä–µ–º—è –≤ —Ä–µ–∂–∏–º–µ: {last_mode_time:.2f}h / {HYBRID_MIN_TIME_IN_MODE}h (–æ—Å—Ç–∞–ª–æ—Å—å {time_remaining:.2f}h)")
			reasons.append(f"   üéØ –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º {HYBRID_MIN_TIME_IN_MODE}h –¥–ª—è —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞")
			logger.info(f"‚è± –ó–ê–©–ò–¢–ê –û–¢ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø: {last_mode} ‚Üí {current_mode}, –≤—Ä–µ–º—è: {last_mode_time:.2f}h < {HYBRID_MIN_TIME_IN_MODE}h")
		else:
			logger.info(f"‚úÖ –†–ï–ñ–ò–ú –û–ë–ù–û–í–õ–Å–ù: {last_mode} ‚Üí {current_mode}, –≤—Ä–µ–º—è: {last_mode_time:.2f}h")
		
		# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
		if current_mode == "MR":
			signal_result = self.mean_reversion_strategy.generate_signal()
			
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–ª—è MR —Ä–µ–∂–∏–º–∞
			bullish_votes = signal_result.get("bullish_votes", 0)
			bearish_votes = signal_result.get("bearish_votes", 0)
			votes_delta = bullish_votes - bearish_votes
			
			# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è MR —Ä–µ–∂–∏–º–∞
			rsi = signal_result.get("RSI", 50)
			adx = signal_result.get("ADX", 0)
			
			# –ï—Å–ª–∏ MR —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç BUY, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
			if signal_result.get("signal") == "BUY":
				# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞
				if votes_delta < VOTE_THRESHOLD_RANGING:
					signal_result["signal"] = "HOLD"
					signal_result["signal_emoji"] = "‚ö†Ô∏è"
					reasons.append(f"‚è∏ MR: —Å–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª (Delta={votes_delta:+d} < {VOTE_THRESHOLD_RANGING})")
					logger.info(f"‚ùå MR BLOCK: —Å–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª (Delta={votes_delta:+d} < {VOTE_THRESHOLD_RANGING})")
				# –ü—Ä–æ–≤–µ—Ä—è–µ–º RSI –¥–ª—è MR (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏)
				elif rsi > 40:  # RSI —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π –¥–ª—è MR
					signal_result["signal"] = "HOLD"
					signal_result["signal_emoji"] = "‚ö†Ô∏è"
					reasons.append(f"‚è∏ MR: RSI —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π ({rsi:.1f} > 40) –¥–ª—è Mean Reversion")
					logger.info(f"‚ùå MR BLOCK: RSI —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π ({rsi:.1f} > 40) –¥–ª—è Mean Reversion")
				# –ü—Ä–æ–≤–µ—Ä—è–µ–º ADX –¥–ª—è MR (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∑–∫–∏–º)
				elif adx > 25:  # ADX —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π –¥–ª—è MR
					signal_result["signal"] = "HOLD"
					signal_result["signal_emoji"] = "‚ö†Ô∏è"
					reasons.append(f"‚è∏ MR: ADX —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π ({adx:.1f} > 25) –¥–ª—è Mean Reversion")
					logger.info(f"‚ùå MR BLOCK: ADX —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π ({adx:.1f} > 25) –¥–ª—è Mean Reversion")
				else:
					reasons.append(f"‚úÖ MR: —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª (Delta={votes_delta:+d} >= {VOTE_THRESHOLD_RANGING}, RSI={rsi:.1f}, ADX={adx:.1f})")
					logger.info(f"‚úÖ MR BUY: —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª (Delta={votes_delta:+d} >= {VOTE_THRESHOLD_RANGING}, RSI={rsi:.1f}, ADX={adx:.1f})")
			
			signal_result["active_mode"] = MODE_MEAN_REVERSION
			signal_result["strategy"] = "HYBRID"
			# –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ä–µ–∂–∏–º–µ
			signal_result["mode_time"] = last_mode_time
			signal_result["min_mode_time"] = HYBRID_MIN_TIME_IN_MODE
			# –î–æ–±–∞–≤–ª—è–µ–º reasons –æ —Ä–µ–∂–∏–º–µ –≤ –Ω–∞—á–∞–ª–æ
			signal_result["reasons"] = reasons + signal_result.get("reasons", [])
			
		
		elif current_mode == "TF":
			signal_result = self.trend_following_strategy.generate_signal()
			
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–ª—è TF —Ä–µ–∂–∏–º–∞
			bullish_votes = signal_result.get("bullish_votes", 0)
			bearish_votes = signal_result.get("bearish_votes", 0)
			votes_delta = bullish_votes - bearish_votes
			
			# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è TF —Ä–µ–∂–∏–º–∞
			rsi = signal_result.get("RSI", 50)
			adx = signal_result.get("ADX", 0)
			
			# –ï—Å–ª–∏ TF —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç BUY, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
			if signal_result.get("signal") == "BUY":
				# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞
				if votes_delta < VOTE_THRESHOLD_TRENDING:
					signal_result["signal"] = "HOLD"
					signal_result["signal_emoji"] = "‚ö†Ô∏è"
					reasons.append(f"‚è∏ TF: —Å–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª (Delta={votes_delta:+d} < {VOTE_THRESHOLD_TRENDING})")
					logger.info(f"‚ùå TF BLOCK: —Å–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª (Delta={votes_delta:+d} < {VOTE_THRESHOLD_TRENDING})")
				# –ü—Ä–æ–≤–µ—Ä—è–µ–º RSI –¥–ª—è TF (–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–æ–Ω–∞—Ö)
				elif rsi < 30 or rsi > 70:  # RSI –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–æ–Ω–∞—Ö –¥–ª—è TF
					signal_result["signal"] = "HOLD"
					signal_result["signal_emoji"] = "‚ö†Ô∏è"
					reasons.append(f"‚è∏ TF: RSI –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ ({rsi:.1f}) –¥–ª—è Trend Following")
					logger.info(f"‚ùå TF BLOCK: RSI –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ ({rsi:.1f}) –¥–ª—è Trend Following")
				# –ü—Ä–æ–≤–µ—Ä—è–µ–º ADX –¥–ª—è TF (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ–∫–∏–º)
				elif adx < 20:  # ADX —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π –¥–ª—è TF
					signal_result["signal"] = "HOLD"
					signal_result["signal_emoji"] = "‚ö†Ô∏è"
					reasons.append(f"‚è∏ TF: ADX —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π ({adx:.1f} < 20) –¥–ª—è Trend Following")
					logger.info(f"‚ùå TF BLOCK: ADX —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π ({adx:.1f} < 20) –¥–ª—è Trend Following")
				else:
					reasons.append(f"‚úÖ TF: —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª (Delta={votes_delta:+d} >= {VOTE_THRESHOLD_TRENDING}, RSI={rsi:.1f}, ADX={adx:.1f})")
					logger.info(f"‚úÖ TF BUY: —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª (Delta={votes_delta:+d} >= {VOTE_THRESHOLD_TRENDING}, RSI={rsi:.1f}, ADX={adx:.1f})")
			
			signal_result["active_mode"] = MODE_TREND_FOLLOWING
			signal_result["strategy"] = "HYBRID"
			# –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ä–µ–∂–∏–º–µ
			signal_result["mode_time"] = last_mode_time
			signal_result["min_mode_time"] = HYBRID_MIN_TIME_IN_MODE
			
			# –î–æ–±–∞–≤–ª—è–µ–º reasons –æ —Ä–µ–∂–∏–º–µ –≤ –Ω–∞—á–∞–ª–æ
			signal_result["reasons"] = reasons + signal_result.get("reasons", [])
		
		else:  # HOLD –∏–ª–∏ TRANSITION
			# –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–Ω–∞—è –∑–æ–Ω–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–ª—É
			logger.info(f"üîç TRANSITION MODE: ADX={adx:.1f} –≤ –ø–µ—Ä–µ—Ö–æ–¥–Ω–æ–π –∑–æ–Ω–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º TF —Å–∏–≥–Ω–∞–ª")
			signal_result = self.trend_following_strategy.generate_signal()
			
			# –í TRANSITION —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º BUY —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö
			original_signal = signal_result.get("signal", "HOLD")
			bullish_votes = signal_result.get("bullish_votes", 0)
			bearish_votes = signal_result.get("bearish_votes", 0)
			votes_delta = bullish_votes - bearish_votes
			
			# –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ TRANSITION —Ä–µ–∂–∏–º–∞
			logger.info(f"üîç TRANSITION DEBUG: original_signal={original_signal}, bullish={bullish_votes}, bearish={bearish_votes}, delta={votes_delta:+d}")
			
			# –†–∞–∑—Ä–µ—à–∞–µ–º BUY –≤ TRANSITION –ø—Ä–∏ —Å–∏–ª—å–Ω–æ–º bullish —Å–∏–≥–Ω–∞–ª–µ (Delta >= VOTE_THRESHOLD_TRANSITIONING)
			# –ù–ï–ó–ê–í–ò–°–ò–ú–û –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç TF —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
			if votes_delta >= VOTE_THRESHOLD_TRANSITIONING:
				signal_result["signal"] = "BUY"  # –†–∞–∑—Ä–µ—à–∞–µ–º —Å–∏–ª—å–Ω—ã–π BUY –≤ TRANSITION
				signal_result["signal_emoji"] = "üü¢"
				reasons.append(f"üéØ TRANSITION: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π BUY (Delta={votes_delta:+d} >= {VOTE_THRESHOLD_TRANSITIONING})")
				logger.info(f"‚úÖ TRANSITION BUY: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π BUY (Delta={votes_delta:+d} >= {VOTE_THRESHOLD_TRANSITIONING})")
			else:
				signal_result["signal"] = "HOLD"  # –°–ª–∞–±—ã–µ —Å–∏–≥–Ω–∞–ª—ã –±–ª–æ–∫–∏—Ä—É–µ–º
				signal_result["signal_emoji"] = "‚ö†Ô∏è"
				reasons.append(f"‚è∏ TRANSITION: —Å–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª (Delta={votes_delta:+d} < {VOTE_THRESHOLD_TRANSITIONING})")
				logger.info(f"‚ùå TRANSITION HOLD: —Å–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª (Delta={votes_delta:+d} < {VOTE_THRESHOLD_TRANSITIONING})")
			
			signal_result["active_mode"] = MODE_TRANSITION
			signal_result["strategy"] = "HYBRID"
			# –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ä–µ–∂–∏–º–µ
			signal_result["mode_time"] = last_mode_time
			signal_result["min_mode_time"] = HYBRID_MIN_TIME_IN_MODE
			# –î–æ–±–∞–≤–ª—è–µ–º reason –æ –ø–µ—Ä–µ—Ö–æ–¥–Ω–æ–π –∑–æ–Ω–µ –≤ –Ω–∞—á–∞–ª–æ
			signal_result["reasons"] = reasons + signal_result.get("reasons", [])
		
		return signal_result
