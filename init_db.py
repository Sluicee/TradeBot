"""
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–°–æ–∑–¥–∞—ë—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É
"""
from database import db
from logger import logger


def init_database():
	"""–°–æ–∑–¥–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î"""
	logger.info("=== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î ===")
	
	try:
		# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã
		db.create_tables()
		logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
		
		# –ü—Ä–æ–≤–µ—Ä–∫–∞
		state = db.get_paper_state()
		if state:
			logger.info(f"üìä Paper Trading: ${state.balance:.2f}")
		else:
			logger.info("üìä Paper Trading: –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
		
		symbols = db.get_tracked_symbols()
		logger.info(f"üéØ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {len(symbols)}")
		
		positions = db.get_all_positions()
		logger.info(f"üíº –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")
		
		trades = db.get_trades_history(limit=1000)
		logger.info(f"üìù –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫: {len(trades)} –∑–∞–ø–∏—Å–µ–π")
		
		signals = db.get_signals(limit=1000)
		logger.info(f"üì° –õ–æ–≥–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)} –∑–∞–ø–∏—Å–µ–π")
		
		backtests = db.get_backtests()
		logger.info(f"üß™ –ë—ç–∫—Ç–µ—Å—Ç–æ–≤: {len(backtests)}")
		
		logger.info("\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
		logger.info(f"üìç –§–∞–π–ª –ë–î: {db.database_url}")
		
	except Exception as e:
		logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
		raise


def check_database():
	"""–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ë–î"""
	logger.info("=== –ü–†–û–í–ï–†–ö–ê –ë–î ===")
	
	try:
		# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
		tables_to_check = [
			("paper_trading_state", db.get_paper_state),
			("tracked_symbols", lambda: db.get_tracked_symbols()),
			("positions", lambda: db.get_all_positions()),
			("trades_history", lambda: db.get_trades_history(limit=1)),
			("signals", lambda: db.get_signals(limit=1)),
			("bot_settings", lambda: db.get_bot_settings()),
			("backtests", lambda: db.get_backtests(limit=1)),
		]
		
		errors = []
		for table_name, check_func in tables_to_check:
			try:
				check_func()
				logger.info(f"‚úÖ {table_name}: OK")
			except Exception as e:
				logger.error(f"‚ùå {table_name}: {e}")
				errors.append((table_name, e))
		
		if errors:
			logger.error(f"\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(errors)}")
			for table, error in errors:
				logger.error(f"  - {table}: {error}")
			return False
		else:
			logger.info("\n‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ø–æ—Ä—è–¥–∫–µ!")
			return True
			
	except Exception as e:
		logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
		return False


def reset_database():
	"""–û–ü–ê–°–ù–û: –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å"""
	logger.warning("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!")
	
	response = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–≤–µ–¥–∏—Ç–µ 'YES' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ")
	if response != "YES":
		logger.info("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
		return
	
	try:
		logger.info("–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
		db.drop_tables()
		
		logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
		db.create_tables()
		
		logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞")
		
	except Exception as e:
		logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ë–î: {e}")
		raise


if __name__ == "__main__":
	import sys
	
	if len(sys.argv) > 1:
		command = sys.argv[1].lower()
		
		if command == "init":
			init_database()
		elif command == "check":
			check_database()
		elif command == "reset":
			reset_database()
		else:
			print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
			print("  python init_db.py init   - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î")
			print("  python init_db.py check  - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ë–î")
			print("  python init_db.py reset  - –°–±—Ä–æ—Å–∏—Ç—å –ë–î (–û–ü–ê–°–ù–û)")
	else:
		# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
		init_database()

