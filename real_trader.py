"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞ –Ω–∞ Bybit
–ê–Ω–∞–ª–æ–≥ PaperTrader, –Ω–æ —Å —Ä–µ–∞–ª—å–Ω—ã–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ–º –æ—Ä–¥–µ—Ä–æ–≤
"""

import aiohttp
import asyncio
from datetime import datetime
from typing import Dict, List, Optional, Any
from logger import logger
from database import db
from config import (
	COMMISSION_RATE, MAX_POSITIONS, STOP_LOSS_PERCENT, TAKE_PROFIT_PERCENT,
	PARTIAL_CLOSE_PERCENT, TRAILING_STOP_PERCENT,
	ENABLE_AVERAGING, MAX_AVERAGING_ATTEMPTS, AVERAGING_PRICE_DROP_PERCENT,
	AVERAGING_TIME_THRESHOLD_HOURS, MAX_TOTAL_RISK_MULTIPLIER,
	ENABLE_PYRAMID_UP, PYRAMID_ADX_THRESHOLD, AVERAGING_SIZE_PERCENT,
	SIGNAL_STRENGTH_STRONG,
	MAX_POSITION_DRAWDOWN_PERCENT, MAX_AVERAGING_DRAWDOWN_PERCENT,
	STRATEGY_TYPE_TF, STRATEGY_TYPE_MR, STRATEGY_TYPE_HYBRID,
	# Real Trading configs
	REAL_MAX_DAILY_LOSS, REAL_MAX_POSITION_SIZE,
	REAL_ORDER_TYPE, REAL_LIMIT_ORDER_OFFSET_PERCENT, REAL_MIN_ORDER_VALUE,
	get_dynamic_max_positions
)

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
from position import Position, get_dynamic_stop_loss_percent
from correlation import check_correlation_risk
from position_sizing import get_position_size_percent, calculate_kelly_fraction
from bybit_trader import bybit_trader
from safety_limits import SafetyLimits

# –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏
try:
	from bayesian_db import BayesianDecisionLayerDB
	STATISTICAL_MODELS_AVAILABLE = True
except ImportError:
	STATISTICAL_MODELS_AVAILABLE = False
	logger.warning("–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã")


class RealTrader:
	"""–°–∏—Å—Ç–µ–º–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞ –Ω–∞ Bybit"""
	
	def __init__(self):
		self.positions: Dict[str, Position] = {}  # symbol -> Position
		self.trades_history: List[Dict[str, Any]] = []
		self.stats = {
			"total_trades": 0,
			"winning_trades": 0,
			"losing_trades": 0,
			"total_commission": 0.0,
			"stop_loss_triggers": 0,
			"take_profit_triggers": 0,
			"trailing_stop_triggers": 0
		}
		self.is_running = False
		self.start_time = None
		self.safety_limits = SafetyLimits()
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
		from config import BYBIT_API_KEY, BYBIT_API_SECRET
		self.api_key = BYBIT_API_KEY
		self.api_secret = BYBIT_API_SECRET
		
		# –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
		self.bayesian = None
		if STATISTICAL_MODELS_AVAILABLE:
			self.bayesian = BayesianDecisionLayerDB()
			# –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON –µ—Å–ª–∏ –µ—Å—Ç—å
			self.bayesian.migrate_from_json()
			logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ë–î")
	
	def _get_signal_signature(self, trade_info: Dict[str, Any] = None, position: Position = None) -> str:
		"""–°–æ–∑–¥–∞–µ—Ç —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è Bayesian –º–æ–¥–µ–ª–∏"""
		if not self.bayesian:
			return ""
		
		# –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞
		signal_data = {
			"RSI": 50,
			"EMA_short": 0,
			"EMA_long": 0,
			"ADX": 0,
			"market_regime": "NEUTRAL",
			"MACD_hist": 0
		}
		
		# –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏, –∑–∞—Ç–µ–º –∏–∑ trade_info
		if position:
			signal_data["RSI"] = position.rsi
			signal_data["ADX"] = position.adx
			signal_data["market_regime"] = position.market_regime
		elif trade_info:
			if "rsi" in trade_info:
				signal_data["RSI"] = trade_info["rsi"]
			if "adx" in trade_info:
				signal_data["ADX"] = trade_info["adx"]
			if "market_regime" in trade_info:
				signal_data["market_regime"] = trade_info["market_regime"]
		
		return self.bayesian.get_signal_signature(signal_data)
	
	def start(self):
		"""–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥"""
		self.is_running = True
		self.start_time = datetime.now().isoformat()
		logger.info("Real Trading –∑–∞–ø—É—â–µ–Ω")
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
		if not self.safety_limits.check_daily_loss_limit():
			logger.warning("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —É–±—ã—Ç–∫–æ–≤, —Ç–æ—Ä–≥–æ–≤–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
			self.is_running = False
			return False
		
		return True
	
	def stop(self):
		"""–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥"""
		self.is_running = False
		logger.info("Real Trading –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	
	async def stop_and_close_all(self):
		"""–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤–ª—é –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏"""
		self.is_running = False
		logger.info("Real Trading –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏...")
		
		# –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
		closed_count = 0
		for symbol in list(self.positions.keys()):
			try:
				# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
				from data_provider import DataProvider
				import aiohttp
				
				async with aiohttp.ClientSession() as session:
					provider = DataProvider(session)
					klines = await provider.fetch_klines(symbol=symbol, interval="1m", limit=1)
					df = provider.klines_to_dataframe(klines)
					
					if not df.empty:
						current_price = float(df['close'].iloc[-1])
						trade_info = await self.close_position(symbol, current_price, "MANUAL-STOP")
						if trade_info:
							closed_count += 1
							logger.info(f"‚úÖ –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {symbol}: {trade_info['profit']:+.2f} USD")
					else:
						logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol}")
						
			except Exception as e:
				logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
		
		logger.info(f"Real Trading –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π: {closed_count}")
		return closed_count
	
	def reset(self):
		"""–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É"""
		self.positions.clear()
		self.trades_history.clear()
		self.stats = {
			"total_trades": 0,
			"winning_trades": 0,
			"losing_trades": 0,
			"total_commission": 0.0,
			"stop_loss_triggers": 0,
			"take_profit_triggers": 0,
			"trailing_stop_triggers": 0
		}
		self.start_time = datetime.now().isoformat()
	
	async def can_open_position(self, symbol: str) -> bool:
		"""–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é"""
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
		if not self.safety_limits.check_position_limits(symbol, self.positions):
			return False
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É —Å–∏–º–≤–æ–ª—É
		if symbol in self.positions:
			return False
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π
		# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
		balance = await bybit_trader.get_balance()
		usdt_balance = balance.get("USDT", 0.0)
		
		# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å (—Å–≤–æ–±–æ–¥–Ω—ã–π + –≤ –ø–æ–∑–∏—Ü–∏—è—Ö)
		total_pnl = sum(pos.get_pnl(0.0)["pnl"] for pos in self.positions.values())  # PnL –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω –ø–æ–∑–∂–µ
		total_balance = usdt_balance + total_pnl
		
		# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π
		dynamic_max_positions = get_dynamic_max_positions(total_balance)
		
		if len(self.positions) >= dynamic_max_positions:
			logger.warning(f"[CAN_OPEN] ‚ùå {symbol}: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π {len(self.positions)}/{dynamic_max_positions} (–±–∞–ª–∞–Ω—Å: ${total_balance:.2f})")
			return False
		
		return True
	
	async def open_position(
		self,
		symbol: str,
		price: float,
		signal_strength: int,
		atr: float = 0.0,
		position_size_percent: float = None,
		reasons: List[str] = None,
		active_mode: str = "UNKNOWN",
		bullish_votes: int = 0,
		bearish_votes: int = 0,
		rsi: float = 50.0,
		adx: float = 0.0,
		market_regime: str = "NEUTRAL",
		strategy_type: str = STRATEGY_TYPE_TF
	) -> Optional[Dict[str, Any]]:
		"""–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —á–µ—Ä–µ–∑ Bybit API"""
		logger.info(f"\n{'='*60}")
		logger.info(f"[REAL_OPEN] üìä –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é {symbol}")
		logger.info(f"[REAL_OPEN] –†–µ–∂–∏–º: {active_mode} | –¶–µ–Ω–∞: ${price:.4f}")
		logger.info(f"[REAL_OPEN] –ì–æ–ª–æ—Å–∞: +{bullish_votes}/-{bearish_votes} (delta={bullish_votes-bearish_votes})")
		logger.info(f"[REAL_OPEN] –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {signal_strength}, ATR: {atr:.4f}")
		if reasons:
			logger.info(f"[REAL_OPEN] üìã –ü—Ä–∏—á–∏–Ω—ã: {reasons[:3]}")
		
		if not await self.can_open_position(symbol):
			logger.warning(f"[REAL_OPEN] ‚ùå {symbol}: –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")
			return None
		
		# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ - –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
		if not check_correlation_risk(symbol, self.positions):
			logger.warning(f"[REAL_OPEN] ‚ùå {symbol}: –∫–æ–Ω—Ñ–ª–∏–∫—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏")
			return None
		
		# –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —Å –±–∏—Ä–∂–∏
		async with aiohttp.ClientSession() as session:
			try:
				balance_data = await bybit_trader.get_balance()
				usdt_balance = balance_data.get("USDT", 0.0)
				
				if usdt_balance <= 0:
					logger.error(f"[REAL_OPEN] ‚ùå {symbol}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –±–∞–ª–∞–Ω—Å–∞ (${usdt_balance:.2f})")
					return None
				
				# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Kelly multiplier
				atr_percent = (atr / price) * 100 if atr > 0 and price > 0 else 1.5
				kelly_multiplier = calculate_kelly_fraction(self.trades_history, atr_percent)
				
				# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π position_size_percent –∏–ª–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º
				if position_size_percent is None:
					position_size_percent = get_position_size_percent(signal_strength, atr, price, kelly_multiplier)
				
				# –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –ª–∏–º–∏—Ç–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
				invest_amount = min(usdt_balance * position_size_percent, REAL_MAX_POSITION_SIZE)
				
				# –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –º–∞–ª—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤
				# –ï—Å–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ Bybit, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
				if invest_amount < REAL_MIN_ORDER_VALUE and usdt_balance >= REAL_MIN_ORDER_VALUE:
					# –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É Bybit ($10) —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–∞–ª –º–µ–Ω—å—à–µ
					invest_amount = REAL_MIN_ORDER_VALUE
					position_size_percent = invest_amount / usdt_balance
					logger.info(f"[REAL_OPEN] üîß –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç: ${invest_amount:.2f} ({position_size_percent*100:.1f}%) - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ Bybit")
				elif invest_amount < REAL_MIN_ORDER_VALUE and usdt_balance < REAL_MIN_ORDER_VALUE:
					# –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
					logger.warning(f"[REAL_OPEN] ‚ùå {symbol}: –±–∞–ª–∞–Ω—Å ${usdt_balance:.2f} < –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã ${REAL_MIN_ORDER_VALUE}")
					return None
				
				if invest_amount <= 0:
					logger.error(f"[REAL_OPEN] ‚ùå {symbol}: invest_amount <= 0")
					return None
				
				# –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã Bybit
				if invest_amount < REAL_MIN_ORDER_VALUE:
					logger.warning(f"[REAL_OPEN] ‚ùå {symbol}: —Å—É–º–º–∞ –æ—Ä–¥–µ—Ä–∞ ${invest_amount:.2f} < –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ ${REAL_MIN_ORDER_VALUE}")
					return None
				
				# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
				quantity = invest_amount / price
				
				# –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ —Ä–∞–∑—É–º–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–∫–æ–≤
				# –î–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ 6-8 –∑–Ω–∞–∫–æ–≤
				rounded_quantity = round(quantity, 6)
				
				# –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Å—É–º–º—É —Å –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
				actual_invest_amount = rounded_quantity * price
				
				logger.info(f"[REAL_OPEN] üìä –†–∞—Å—á–µ—Ç: {invest_amount:.2f} USDT / {price:.4f} = {quantity:.8f} -> {rounded_quantity:.6f} (${actual_invest_amount:.2f})")
				
				# –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –±–∏—Ä–∂–µ
				if REAL_ORDER_TYPE == "MARKET":
					order_result = await bybit_trader.place_market_order(
						symbol, "Buy", rounded_quantity, price
					)
				else:  # LIMIT
					# –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ñ—Ñ—Å–µ—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
					limit_price = price * (1 + REAL_LIMIT_ORDER_OFFSET_PERCENT)
					order_result = await bybit_trader.place_limit_order(
						symbol, "Buy", rounded_quantity, limit_price, actual_invest_amount
					)
				
				order_id = order_result["order_id"]
				logger.info(f"[REAL_OPEN] ‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {order_id}")
				
				# –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
				position = Position(
					symbol=symbol,
					entry_price=price,
					amount=rounded_quantity,
					entry_time=datetime.now().isoformat(),
					signal_strength=signal_strength,
					invest_amount=actual_invest_amount,
					commission=actual_invest_amount * COMMISSION_RATE,
					atr=atr,
					rsi=rsi,
					adx=adx,
					market_regime=market_regime,
					strategy_type=strategy_type
				)
				
				# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é
				self.positions[symbol] = position
				
				# –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
				commission = actual_invest_amount * COMMISSION_RATE
				self.stats["total_commission"] += commission
				
				trade_info = {
					"type": "BUY",
					"symbol": symbol,
					"price": price,
					"amount": rounded_quantity,
					"invest_amount": actual_invest_amount,
					"commission": commission,
					"signal_strength": signal_strength,
					"time": position.entry_time,
					"order_id": order_id,
					"order_type": REAL_ORDER_TYPE,
					"status": "SUBMITTED",
					# v5.5 –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
					"bullish_votes": bullish_votes,
					"bearish_votes": bearish_votes,
					"votes_delta": bullish_votes - bearish_votes,
					"position_size_percent": position_size_percent,
					"reasons": reasons[:3] if reasons else []
				}
				self.trades_history.append(trade_info)
				self.stats["total_trades"] += 1
				
				# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
				try:
					db.add_real_trade(trade_info)
				except Exception as e:
					logger.error(f"[REAL_OPEN] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –≤ –ë–î: {e}")
				
				# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ–±—É—á–µ–Ω–∏—è Bayesian –º–æ–¥–µ–ª–∏
				if self.bayesian:
					signal_signature = self._get_signal_signature(position=position)
					if signal_signature:
						self.bayesian.record_signal(signal_signature, "BUY", price)
						logger.info(f"[REAL_OPEN] üìä –ó–∞–ø–∏—Å–∞–Ω —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {signal_signature[:50]}...")
				
				logger.info(f"[REAL_OPEN] ‚úÖ {symbol}: ${invest_amount:.2f} ({position_size_percent*100:.1f}%) | SL: {position.stop_loss_percent*100:.1f}% | TP: {TAKE_PROFIT_PERCENT*100:.1f}%")
				
				return trade_info
				
			except Exception as e:
				logger.error(f"[REAL_OPEN] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
				return None
	
	async def close_position(
		self,
		symbol: str,
		price: float,
		reason: str = "SELL"
	) -> Optional[Dict[str, Any]]:
		"""–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —á–µ—Ä–µ–∑ Bybit API"""
		logger.info(f"\n{'='*60}")
		logger.info(f"[REAL_CLOSE] üî¥ –ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ {symbol}")
		logger.info(f"[REAL_CLOSE] –ü—Ä–∏—á–∏–Ω–∞: {reason}, –¶–µ–Ω–∞: ${price:.4f}")
		
		if symbol not in self.positions:
			logger.warning(f"[REAL_CLOSE] ‚ùå –ü–æ–∑–∏—Ü–∏—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
			return None
		
		position = self.positions[symbol]
		
		logger.info(f"[REAL_CLOSE] üìä –í—Ö–æ–¥: ${position.entry_price:.4f}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {position.amount:.6f}")
		
		# –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç —Å –±–∏—Ä–∂–∏
		coin = symbol.replace("USDT", "")
		real_balance = await bybit_trader.get_coin_balance(coin)
		
		logger.info(f"[REAL_CLOSE] üìä –†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å {coin}: {real_balance:.8f}")
		logger.info(f"[REAL_CLOSE] üìä –ü–æ–∑–∏—Ü–∏—è –≤ –ø–∞–º—è—Ç–∏: {position.amount:.8f}")
		
		# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å, –µ—Å–ª–∏ –æ–Ω –±–æ–ª—å—à–µ 0
		sell_amount = real_balance if real_balance > 0 else position.amount
		
		if real_balance > 0 and abs(real_balance - position.amount) > 0.001:
			logger.warning(f"[REAL_CLOSE] ‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: –ø–æ–∑–∏—Ü–∏—è={position.amount:.8f}, –±–∞–ª–∞–Ω—Å={real_balance:.8f}")
			logger.info(f"[REAL_CLOSE] üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {sell_amount:.8f}")
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
		position_value = sell_amount * price
		if position_value < REAL_MIN_ORDER_VALUE:
			if position_value < 1.0:
				# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–∞–ª—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (< $1)
				logger.warning(f"[FORCE_CLOSE] üí∏ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –º–∞–ª–æ–π –ø–æ–∑–∏—Ü–∏–∏ {symbol}: ${position_value:.2f}")
				# –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–∑ –ø–∞–º—è—Ç–∏ –±–µ–∑ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ
				del self.positions[symbol]
				logger.info(f"[FORCE_CLOSE] üóëÔ∏è –ü–æ–∑–∏—Ü–∏—è {symbol} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø–∞–º—è—Ç–∏ (—Å–ª–∏—à–∫–æ–º –º–∞–ª–∞)")
				return {
					"type": "FORCE-CLOSE",
					"symbol": symbol,
					"price": price,
					"amount": sell_amount,
					"profit": 0.0,
					"profit_percent": 0.0,
					"reason": reason,
					"time": datetime.now().isoformat()
				}
			else:
				# –ü–æ–∑–∏—Ü–∏—è —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –¥–ª—è –æ—Ä–¥–µ—Ä–∞, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
				logger.warning(f"[REAL_CLOSE] ‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è {symbol} —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –¥–ª—è –æ—Ä–¥–µ—Ä–∞: ${position_value:.2f} < ${REAL_MIN_ORDER_VALUE}")
				return None
		
		# –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
		async with aiohttp.ClientSession() as session:
			try:
				if REAL_ORDER_TYPE == "MARKET":
					order_result = await bybit_trader.place_market_order(
						symbol, "Sell", sell_amount
					)
				else:  # LIMIT
					limit_price = price * (1 - REAL_LIMIT_ORDER_OFFSET_PERCENT)
					order_result = await bybit_trader.place_limit_order(
						symbol, "Sell", sell_amount, limit_price
					)
				
				order_id = order_result["order_id"]
				logger.info(f"[REAL_CLOSE] ‚úÖ –û—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É —Ä–∞–∑–º–µ—â–µ–Ω: {order_id}")
				
				# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å
				total_investment = position.total_invested if position.averaging_count > 0 else position.invest_amount
				
				# –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞, —É—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
				if position.partial_closed:
					remaining_invested = total_investment * (1 - PARTIAL_CLOSE_PERCENT)
				else:
					remaining_invested = total_investment
				
				# –î–ª—è LONG: –æ–±—ã—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç
				sell_value = sell_amount * price
				commission = sell_value * COMMISSION_RATE
				profit = sell_value - remaining_invested + position.partial_close_profit - commission
				profit_percent = (profit / total_investment) * 100
				
				# –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
				self.stats["total_commission"] += commission
				
				if profit > 0:
					self.stats["winning_trades"] += 1
				else:
					self.stats["losing_trades"] += 1
					
				if reason == "STOP-LOSS":
					self.stats["stop_loss_triggers"] += 1
				elif reason == "TRAILING-STOP":
					self.stats["trailing_stop_triggers"] += 1
				
				holding_time = self._calculate_holding_time(position.entry_time)
				
				# –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
				trade_info = {
					"type": reason,
					"symbol": symbol,
					"price": price,
					"amount": sell_amount,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
					"sell_value": sell_value,
					"commission": commission,
					"profit": profit,
					"profit_percent": profit_percent,
					"time": datetime.now().isoformat(),
					"order_id": order_id,
					"order_type": REAL_ORDER_TYPE,
					"status": "SUBMITTED",
					"holding_time": holding_time
				}
				self.trades_history.append(trade_info)
				
				# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
				try:
					db.add_real_trade(trade_info)
				except Exception as e:
					logger.error(f"[REAL_CLOSE] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –≤ –ë–î: {e}")
				
				# Win Rate
				total_closed = self.stats["winning_trades"] + self.stats["losing_trades"]
				win_rate = (self.stats["winning_trades"] / total_closed * 100) if total_closed > 0 else 0
				
				# –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ–±—É—á–µ–Ω–∏—è Bayesian –º–æ–¥–µ–ª–∏ (–ü–ï–†–ï–î —É–¥–∞–ª–µ–Ω–∏–µ–º –ø–æ–∑–∏—Ü–∏–∏)
				if self.bayesian:
					signal_signature = self._get_signal_signature(position=position)
					if signal_signature:
						self.bayesian.complete_signal(signal_signature, price, position.entry_price)
						logger.info(f"[REAL_CLOSE] üìä –ó–∞–≤–µ—Ä—à–µ–Ω —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {signal_signature[:50]}... (P&L: {profit_percent:+.1f}%)")
				
				# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏
				await self._check_and_cleanup_remaining_balance(symbol, coin)
				
				# –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
				del self.positions[symbol]
				
				# –ö—Ä–∞—Ç–∫–∏–π –ª–æ–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
				emoji = "üíö" if profit > 0 else "üíî"
				logger.info(f"[REAL_CLOSE] {emoji} {symbol}: {profit:+.2f} ({profit_percent:+.1f}%) | {holding_time} | WR: {win_rate:.1f}%")
				
				return trade_info
				
			except Exception as e:
				logger.error(f"[REAL_CLOSE] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {e}")
				return None
	
	async def _check_and_cleanup_remaining_balance(self, symbol: str, coin: str):
		"""–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ–∑–∏—Ü–∏–∏"""
		try:
			# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç—ã
			remaining_balance = await bybit_trader.get_coin_balance(coin)
			
			if remaining_balance > 0:
				# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
				current_price = await bybit_trader.get_current_price(symbol)
				
				# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Å—Ç–∞—Ç–∫–∞ –≤ USDT
				remaining_value = remaining_balance * current_price
				
				logger.info(f"[CLEANUP] üîç –û—Å—Ç–∞—Ç–æ–∫ {coin}: {remaining_balance:.8f} (${remaining_value:.2f})")
				
				# –ï—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ –±–æ–ª—å—à–µ $0.01, –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ –ø—Ä–æ–¥–∞—Ç—å
				if remaining_value > 0.01:
					logger.info(f"[CLEANUP] üßπ –ü—Ä–æ–¥–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ {coin}: {remaining_balance:.8f}")
					
					try:
						# –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–¥–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫
						cleanup_result = await bybit_trader.place_market_order(
							symbol, "Sell", remaining_balance
						)
						logger.info(f"[CLEANUP] ‚úÖ –û—Å—Ç–∞—Ç–æ–∫ –ø—Ä–æ–¥–∞–Ω: {cleanup_result['order_id']}")
					except Exception as e:
						logger.warning(f"[CLEANUP] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫: {e}")
				else:
					logger.info(f"[CLEANUP] üí∏ –û—Å—Ç–∞—Ç–æ–∫ —Å–ª–∏—à–∫–æ–º –º–∞–ª (${remaining_value:.4f}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
					
		except Exception as e:
			logger.error(f"[CLEANUP] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")
	
	async def partial_close_position(
		self,
		symbol: str,
		price: float
	) -> Optional[Dict[str, Any]]:
		"""–ß–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é (—Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç) –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ç—Ä–µ–π–¥–∏–Ω–≥–µ"""
		if symbol not in self.positions:
			return None
			
		position = self.positions[symbol]
		
		if position.partial_closed:
			return None
			
		# –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Å—Ç—å
		close_amount = position.amount * PARTIAL_CLOSE_PERCENT
		keep_amount = position.amount - close_amount
		
		# –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ —á–∞—Å—Ç–∏—á–Ω—É—é –ø—Ä–æ–¥–∞–∂—É
		async with aiohttp.ClientSession() as session:
			try:
				if REAL_ORDER_TYPE == "MARKET":
					order_result = await bybit_trader.place_market_order(
						symbol, "Sell", close_amount
					)
				else:  # LIMIT
					limit_price = price * (1 - REAL_LIMIT_ORDER_OFFSET_PERCENT)
					order_result = await bybit_trader.place_limit_order(
						symbol, "Sell", close_amount, limit_price
					)
				
				order_id = order_result["order_id"]
				logger.info(f"[REAL_PARTIAL_TP] ‚úÖ –ß–∞—Å—Ç–∏—á–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞: {order_id}")
				
				# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å –¥–ª—è –ø—Ä–æ–¥–∞–Ω–Ω–æ–π —á–∞—Å—Ç–∏
				total_investment = position.total_invested if position.averaging_count > 0 else position.invest_amount
				partial_invested = total_investment * PARTIAL_CLOSE_PERCENT
				
				sell_value = close_amount * price
				commission = sell_value * COMMISSION_RATE
				net_value = sell_value - commission
				profit = net_value - partial_invested
				profit_percent = ((price - position.average_entry_price) / position.average_entry_price) * 100 if position.average_entry_price > 0 else 0
				
				# –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
				self.stats["total_commission"] += commission
				self.stats["take_profit_triggers"] += 1
				
				# –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
				position.amount = keep_amount
				position.partial_closed = True
				position.max_price = price
				position.partial_close_profit = profit
				
				# –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
				trade_info = {
					"type": "PARTIAL-TP",
					"symbol": symbol,
					"price": price,
					"amount": close_amount,
					"sell_value": net_value,
					"commission": commission,
					"profit": profit,
					"profit_percent": profit_percent,
					"closed_percent": PARTIAL_CLOSE_PERCENT * 100,
					"time": datetime.now().isoformat(),
					"order_id": order_id
				}
				self.trades_history.append(trade_info)
				
				# –û—á–∏—â–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ—Å–ª–µ —á–∞—Å—Ç–∏—á–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏
				coin = symbol.replace("USDT", "")
				await self._check_and_cleanup_remaining_balance(symbol, coin)
				
				logger.info(f"[REAL_PARTIAL_TP] üíé {symbol}: {profit:+.2f} ({profit_percent:+.1f}%) | –ó–∞–∫—Ä—ã—Ç–æ: {PARTIAL_CLOSE_PERCENT*100:.0f}%")
				
				return trade_info
				
			except Exception as e:
				logger.error(f"[REAL_PARTIAL_TP] ‚ùå –û—à–∏–±–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏ {symbol}: {e}")
				return None
	
	async def average_position(
		self,
		symbol: str,
		price: float,
		signal_strength: int,
		adx: float,
		atr: float,
		reason: str
	) -> Optional[Dict[str, Any]]:
		"""
		–î–æ–∫—É–ø–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é (averaging down/pyramid up) –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ç—Ä–µ–π–¥–∏–Ω–≥–µ.
		"""
		if not ENABLE_AVERAGING:
			return None
		
		if symbol not in self.positions:
			return None
		
		position = self.positions[symbol]
		
		# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–∫—É–ø–∞–Ω–∏—è
		can_average, mode = position.can_average_down(price, adx)
		if not can_average:
			return None
		
		# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–æ–∫—É–ø–∞–Ω–∏—è
		if mode == "PYRAMID_UP":
			# –ü–∏—Ä–∞–º–∏–¥–∏–Ω–≥ –≤–≤–µ—Ä—Ö - —Ä–∞–∑–º–µ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
			size_multiplier = (signal_strength / SIGNAL_STRENGTH_STRONG) if signal_strength > 0 and SIGNAL_STRENGTH_STRONG > 0 else 0.5
			size_percent = AVERAGING_SIZE_PERCENT * size_multiplier * 0.6  # ~30% –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ
			position.pyramid_mode = True
		else:
			# –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –≤–Ω–∏–∑ - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
			size_percent = AVERAGING_SIZE_PERCENT  # 50% –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ
			position.pyramid_mode = False
		
		# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –¥–æ–∫—É–ø–∞–Ω–∏—è
		original_invest = position.invest_amount  # –ò—Å—Ö–æ–¥–Ω–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è (–±–µ–∑ –¥–æ–∫—É–ø–∞–Ω–∏–π)
		new_invest = original_invest * size_percent
		
		# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ —Ä–∏—Å–∫–∞
		total_invested_after = position.total_invested + new_invest
		if total_invested_after > position.invest_amount * MAX_TOTAL_RISK_MULTIPLIER:
			return None
		
		# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –±–∏—Ä–∂–µ
		async with aiohttp.ClientSession() as session:
			try:
				usdt_balance = await bybit_trader.get_balance()
				if new_invest > usdt_balance:
					logger.warning(f"[REAL_AVERAGING] ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –¥–æ–∫—É–ø–∞–Ω–∏—è {symbol}: ${new_invest:.2f} > ${usdt_balance:.2f}")
					return None
				
				# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –¥–æ–∫—É–ø–∞–Ω–∏—è
				commission = new_invest * COMMISSION_RATE
				net_invest = new_invest - commission
				new_amount = net_invest / price
				
				# –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É
				if REAL_ORDER_TYPE == "MARKET":
					order_result = await bybit_trader.place_market_order(
						symbol, "Buy", new_amount
					)
				else:  # LIMIT
					limit_price = price * (1 + REAL_LIMIT_ORDER_OFFSET_PERCENT)
					order_result = await bybit_trader.place_limit_order(
						symbol, "Buy", new_amount, limit_price
					)
				
				order_id = order_result["order_id"]
				logger.info(f"[REAL_AVERAGING] ‚úÖ –î–æ–∫—É–ø–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {order_id}")
				
				# –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
				old_total_invested = position.total_invested
				old_amount = position.amount
				old_avg_price = position.average_entry_price
				
				# –ù–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
				position.total_invested += new_invest
				position.amount += new_amount
				position.averaging_count += 1
				position.average_entry_price = (old_avg_price * old_amount + price * new_amount) / position.amount
				
				# –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º TP –æ—Ç –Ω–æ–≤–æ–π —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã
				position.take_profit_price = position.average_entry_price * (1 + TAKE_PROFIT_PERCENT)
				logger.info(f"[REAL_AVERAGING] üìà {symbol}: TP –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ ${position.take_profit_price:.4f} (–æ—Ç —Å—Ä–µ–¥–Ω–µ–π ${position.average_entry_price:.4f})")
				
				# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –¥–æ–∫—É–ø–∞–Ω–∏–∏
				averaging_entry = {
					"time": datetime.now().isoformat(),
					"price": price,
					"amount": new_amount,
					"invest": new_invest,
					"commission": commission,
					"mode": mode,
					"signal_strength": signal_strength,
					"adx": adx,
					"reason": reason
				}
				position.averaging_entries.append(averaging_entry)
				
				# –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
				self.stats["total_commission"] += commission
				self.stats["averaging_triggers"] = self.stats.get("averaging_triggers", 0) + 1
				
				# –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
				trade_info = {
					"type": "AVERAGING",
					"symbol": symbol,
					"price": price,
					"amount": new_amount,
					"invest": new_invest,
					"commission": commission,
					"mode": mode,
					"averaging_count": position.averaging_count,
					"new_avg_price": position.average_entry_price,
					"time": datetime.now().isoformat(),
					"order_id": order_id
				}
				self.trades_history.append(trade_info)
				
				logger.info(f"[REAL_AVERAGING] üìà {symbol}: {mode} | –¶–µ–Ω–∞: ${price:.4f} | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {new_amount:.6f} | –°—Ä–µ–¥–Ω—è—è: ${position.average_entry_price:.4f}")
				
				return trade_info
				
			except Exception as e:
				logger.error(f"[REAL_AVERAGING] ‚ùå –û—à–∏–±–∫–∞ –¥–æ–∫—É–ø–∞–Ω–∏—è {symbol}: {e}")
				return None
	
	async def check_positions(self, prices: Dict[str, float], strategy_type: str = None) -> List[Dict[str, Any]]:
		"""–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã, —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã –∏ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è"""
		actions = []
		
		if not self.positions:
			return actions
		
		for symbol, position in list(self.positions.items()):
			if symbol not in prices:
				continue
			
			# –ù–û–í–û–ï: –ò–∑–æ–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
			try:
				current_price = prices[symbol]
				
				# –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
				position.update_max_price(current_price)
				
				# 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è
				if position.check_time_exit():
					trade_info = await self.close_position(symbol, current_price, "TIME-EXIT")
					if trade_info:
						actions.append(trade_info)
					continue
				
				# 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º trailing stop (–µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞)
				if position.check_trailing_stop(current_price):
					trade_info = await self.close_position(symbol, current_price, "TRAILING-STOP")
					if trade_info:
						actions.append(trade_info)
					continue
					
				# 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
				if position.check_stop_loss(current_price):
					trade_info = await self.close_position(symbol, current_price, "STOP-LOSS")
					if trade_info:
						actions.append(trade_info)
					continue
					
				# 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (—á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ)
				# –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è TP
				tp_triggered = position.check_take_profit(current_price)
				if tp_triggered:
					logger.info(f"[TP_CHECK] üíé {symbol}: TP —Å—Ä–∞–±–æ—Ç–∞–ª! –¶–µ–Ω–∞: ${current_price:.4f} >= TP: ${position.take_profit_price:.4f}")
					# –†–µ–∞–ª–∏–∑—É–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∫–∞–∫ –≤ paper trading
					trade_info = await self.partial_close_position(symbol, current_price)
					if trade_info:
						actions.append(trade_info)
					continue
				else:
					# –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ TP –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
					if current_price > position.average_entry_price * 1.05:  # –ï—Å–ª–∏ –ø—Ä–∏–±—ã–ª—å > 5%
						logger.debug(f"[TP_CHECK] üîç {symbol}: –¶–µ–Ω–∞ ${current_price:.4f}, TP ${position.take_profit_price:.4f}, –°—Ä–µ–¥–Ω—è—è ${position.average_entry_price:.4f}")
				
				# 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–ª—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (< $0.01) –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
				position_value = position.amount * current_price
				if position_value < 0.01:
					logger.info(f"[AUTO_CLEANUP] üí∏ {symbol} –ø–æ–∑–∏—Ü–∏—è —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ (${position_value:.4f}), —É–¥–∞–ª—è–µ–º")
					# –ü–æ–ª—É—á–∞–µ–º –º–æ–Ω–µ—Ç—É –∏–∑ —Å–∏–º–≤–æ–ª–∞
					coin = symbol.replace("USDT", "")
					# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
					real_balance = await bybit_trader.get_coin_balance(coin)
					if real_balance <= 0 or (real_balance * current_price) < 0.01:
						# –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–∑ –ø–∞–º—è—Ç–∏
						del self.positions[symbol]
						logger.info(f"[AUTO_CLEANUP] üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è {symbol} –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
					continue
					
			except Exception as e:
				# –ò–∑–æ–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
				logger.error(f"[CHECK_POSITIONS] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
				continue
		
		return actions
	
	async def get_status(self) -> Dict[str, Any]:
		"""–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞"""
		# –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏
		async with aiohttp.ClientSession() as session:
			try:
				balance_data = await bybit_trader.get_balance()
				if not balance_data:
					raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å–∞")
				usdt_balance = balance_data.get("USDT", 0.0)
				
				# –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–∏
				exchange_positions = await bybit_trader.get_positions()
				
				positions_info = []
				total_pnl = 0.0
				
				# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –ø–æ–∑–∏—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã —á–µ—Ä–µ–∑ –±–æ—Ç–∞
				for symbol, local_pos in self.positions.items():
					# –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –±–∏—Ä–∂–µ
					exchange_pos = None
					for pos in exchange_positions:
						if pos["symbol"] == symbol:
							exchange_pos = pos
							break
					
					if exchange_pos:
						# –ü–æ–∑–∏—Ü–∏—è –µ—Å—Ç—å –∏ –Ω–∞ –±–∏—Ä–∂–µ, –∏ –≤ –±–æ—Ç–µ
						positions_info.append({
							"symbol": symbol,
							"quantity": exchange_pos["quantity"],
							"entry_price": local_pos.entry_price,
							"stop_loss": local_pos.stop_loss_price,
							"take_profit": local_pos.take_profit_price,
							"current_price": 0.0,  # –ë—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–∞ –≤ telegram_real_trading.py
							"side": exchange_pos["side"]
						})
					else:
						# –ü–æ–∑–∏—Ü–∏—è –µ—Å—Ç—å –≤ –±–æ—Ç–µ, –Ω–æ –Ω–µ—Ç –Ω–∞ –±–∏—Ä–∂–µ - –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞
						logger.warning(f"–ü–æ–∑–∏—Ü–∏—è {symbol} –µ—Å—Ç—å –≤ –±–æ—Ç–µ, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ –±–∏—Ä–∂–µ")
						# –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ positions_info - –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞
				
				# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π PnL
				total_balance = usdt_balance + total_pnl
				
				# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π
				dynamic_max_positions = get_dynamic_max_positions(total_balance)
				
				win_rate = 0.0
				if self.stats["winning_trades"] + self.stats["losing_trades"] > 0:
					win_rate = (self.stats["winning_trades"] / (self.stats["winning_trades"] + self.stats["losing_trades"])) * 100
				
				return {
					"is_running": self.is_running,
					"usdt_balance": usdt_balance,
					"total_balance": total_balance,
					"positions_count": len(positions_info),
					"max_positions": dynamic_max_positions,
					"positions": positions_info,
					"stats": {
						**self.stats,
						"win_rate": win_rate
					},
					"start_time": self.start_time,
					"daily_loss": self.safety_limits.get_daily_loss(),
					"daily_loss_limit": REAL_MAX_DAILY_LOSS
				}
				
			except Exception as e:
				logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å –±–∏—Ä–∂–∏: {e}")
				return {
					"is_running": self.is_running,
					"error": str(e)
				}
	
	def _calculate_holding_time(self, entry_time: str) -> str:
		"""–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
		try:
			entry_dt = datetime.fromisoformat(entry_time)
			now_dt = datetime.now()
			delta = now_dt - entry_dt
			
			hours = delta.seconds // 3600
			minutes = (delta.seconds % 3600) // 60
			
			if delta.days > 0:
				return f"{delta.days}–¥ {hours}—á"
			elif hours > 0:
				return f"{hours}—á {minutes}–º"
			else:
				return f"{minutes}–º"
		except:
			return "N/A"
	
	def save_state(self):
		"""–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î"""
		try:
			# –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
			start_time = datetime.fromisoformat(self.start_time) if isinstance(self.start_time, str) and self.start_time else datetime.now()
			db.save_real_state(
				is_running=self.is_running,
				start_time=start_time,
				stats=self.stats
			)
			
			# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
			for symbol, pos in self.positions.items():
				pos_data = pos.to_dict()
				# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º entry_time –≤ datetime
				if isinstance(pos_data.get("entry_time"), str):
					pos_data["entry_time"] = datetime.fromisoformat(pos_data["entry_time"])
				
				# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é
				averaging_entries = pos_data.pop("averaging_entries", [])
				db_position = db.save_position(pos_data)
				
				# –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–ø–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ)
				existing_entries = db.get_averaging_entries(db_position.id)
				if len(averaging_entries) > len(existing_entries):
					for entry in averaging_entries[len(existing_entries):]:
						entry_time = datetime.fromisoformat(entry["time"]) if isinstance(entry.get("time"), str) else datetime.now()
						db.add_averaging_entry(
							position_id=db_position.id,
							price=entry.get("price", 0),
							amount=entry.get("amount", 0),
							invest_amount=entry.get("invest_amount", 0),
							commission=entry.get("commission", 0),
							mode=entry.get("mode", ""),
							reason=entry.get("reason", ""),
							time=entry_time
						)
			
			# –£–¥–∞–ª—è–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –ë–î
			db_positions = db.get_all_positions()
			for db_pos in db_positions:
				if db_pos.symbol not in self.positions:
					db.delete_position(db_pos.symbol)
			
		except Exception as e:
			logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –ë–î: {e}")
			raise
			
	def load_state(self) -> bool:
		"""–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ë–î"""
		try:
			# –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
			db_state = db.get_real_state()
			if not db_state:
				logger.info("Real Trading: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
				return False
			
			self.is_running = db_state.is_running
			self.start_time = db_state.start_time.isoformat() if db_state.start_time else None
			
			self.stats = {
				"total_trades": db_state.total_trades,
				"winning_trades": db_state.winning_trades,
				"losing_trades": db_state.losing_trades,
				"total_commission": db_state.total_commission,
				"stop_loss_triggers": db_state.stop_loss_triggers,
				"take_profit_triggers": db_state.take_profit_triggers,
				"trailing_stop_triggers": db_state.trailing_stop_triggers
			}
			
			# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
			db_positions = db.get_all_positions()
			self.positions = {}
			
			for db_pos in db_positions:
				# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DB –º–æ–¥–µ–ª—å –≤ Position –æ–±—ä–µ–∫—Ç
				pos_data = {
					"symbol": db_pos.symbol,
					"entry_price": db_pos.entry_price,
					"amount": db_pos.amount,
					"entry_time": db_pos.entry_time.isoformat() if db_pos.entry_time else datetime.now().isoformat(),
					"signal_strength": db_pos.signal_strength,
					"invest_amount": db_pos.invest_amount,
					"commission": db_pos.entry_commission,
					"atr": db_pos.atr,
					"stop_loss_price": db_pos.stop_loss_price,
					"stop_loss_percent": db_pos.stop_loss_percent,
					"take_profit_price": db_pos.take_profit_price,
					"partial_closed": db_pos.partial_closed,
					"max_price": db_pos.max_price,
					"partial_close_profit": db_pos.partial_close_profit,
					"original_amount": db_pos.original_amount,
					"averaging_count": db_pos.averaging_count,
					"average_entry_price": db_pos.average_entry_price,
					"pyramid_mode": db_pos.pyramid_mode,
					"total_invested": db_pos.total_invested,
					"averaging_entries": db.get_averaging_entries(db_pos.id)
				}
				
				self.positions[db_pos.symbol] = Position.from_dict(pos_data)
			
			# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000)
			db_trades = db.get_real_trades_history(limit=1000)
			self.trades_history = db_trades
			
			logger.info(f"Real Trading –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ë–î: {len(self.positions)} –ø–æ–∑–∏—Ü–∏–π, {len(self.trades_history)} —Å–¥–µ–ª–æ–∫")
			return True
			
		except Exception as e:
			logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –ë–î: {e}")
			raise
	
	async def get_balance(self, session=None):
		"""–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å —Å –±–∏—Ä–∂–∏"""
		try:
			return await bybit_trader.get_balance()
		except Exception as e:
			logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
			return {}
