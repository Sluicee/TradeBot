import os
import time
import logging
from typing import Optional

LOG_DIR = "logs"
os.makedirs(LOG_DIR, exist_ok=True)

# –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –ª–æ–≥–æ–≤
COMPACT_FORMAT = "%(asctime)s | %(levelname)s | %(message)s"
VERBOSE_FORMAT = "%(asctime)s ‚Äî %(name)s ‚Äî %(levelname)s ‚Äî %(message)s"

def get_log_filename():
    return os.path.join(LOG_DIR, time.strftime("log_%Y%m%d_%H%M%S.txt"))

class TimedFileHandler(logging.FileHandler):
    def __init__(self, interval=8*60*60, *args, **kwargs):
        self.interval = interval
        self.start_time = time.time()
        self.baseFilename = get_log_filename()
        super().__init__(self.baseFilename, encoding="utf-8", *args, **kwargs)

    def emit(self, record):
        if time.time() - self.start_time > self.interval:
            self.start_time = time.time()
            self.baseFilename = get_log_filename()
            self.stream.close()
            self.stream = self._open()
        super().emit(record)

class CompactFormatter(logging.Formatter):
    """–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –ª–æ–≥–æ–≤"""
    
    def format(self, record):
        # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = record.getMessage()
        
        # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if "[SIGNAL_DIAG]" in message:
            if "üìä" in message and "@" in message:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                parts = message.split("|")
                if len(parts) >= 2:
                    symbol_part = parts[0].split("üìä")[-1].strip()
                    signal_part = parts[1].strip() if len(parts) > 1 else ""
                    message = f"SIGNAL: {symbol_part} | {signal_part}"
            elif "–ì–æ–ª–æ—Å–∞:" in message:
                # –°–æ–∫—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–∞—Ö
                message = message.replace("–ì–æ–ª–æ—Å–∞: ", "Votes: ").replace("Bullish=", "B=").replace("Bearish=", "S=").replace("Delta=", "D=")
            elif "–¢–æ–ø-3 –ø—Ä–∏—á–∏–Ω—ã:" in message:
                message = "REASONS: " + message.split("–¢–æ–ø-3 –ø—Ä–∏—á–∏–Ω—ã:")[-1].strip()[:50] + "..."
            elif "=" * 80 in message:
                message = "---"
        
        # –°–æ–∫—Ä–∞—â–∞–µ–º –¥—Ä—É–≥–∏–µ –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(message) > 100:
            message = message[:97] + "..."
            
        record.msg = message
        return super().format(record)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger("crypto_signal_bot")

# –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
for handler in logger.handlers[:]:
    logger.removeHandler(handler)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ config
try:
    import config
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º
    if getattr(config, 'PRODUCTION_LOGGING', False):
        logger.setLevel(getattr(logging, config.PRODUCTION_LOG_LEVEL.upper(), logging.WARNING))
        use_compact = True
    else:
        logger.setLevel(getattr(logging, config.LOG_LEVEL.upper(), logging.INFO))
        use_compact = getattr(config, 'COMPACT_LOGGING', True)
except ImportError:
    logger.setLevel(logging.INFO)
    use_compact = True

# –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∏–ª–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
console_handler = logging.StreamHandler()
if use_compact:
    console_handler.setFormatter(CompactFormatter(COMPACT_FORMAT))
else:
    console_handler.setFormatter(logging.Formatter(VERBOSE_FORMAT))
logger.addHandler(console_handler)

# –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ñ–∞–π–ª–æ–≤—ã–π –≤—ã–≤–æ–¥ (–≤—Å–µ–≥–¥–∞ –ø–æ–¥—Ä–æ–±–Ω—ã–π –¥–ª—è —Ñ–∞–π–ª–æ–≤)
file_handler = TimedFileHandler()
file_handler.setFormatter(logging.Formatter(VERBOSE_FORMAT))
logger.addHandler(file_handler)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def set_log_level(level: str, compact: bool = True):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–µ–∂–∏–º"""
    levels = {
        'DEBUG': logging.DEBUG,
        'INFO': logging.INFO,
        'WARNING': logging.WARNING,
        'ERROR': logging.ERROR
    }
    
    logger.setLevel(levels.get(level.upper(), logging.INFO))
    
    if compact:
        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        for handler in logger.handlers:
            if isinstance(handler, logging.StreamHandler) and not isinstance(handler, logging.FileHandler):
                handler.setFormatter(CompactFormatter(COMPACT_FORMAT))
    else:
        # –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º
        for handler in logger.handlers:
            if isinstance(handler, logging.StreamHandler) and not isinstance(handler, logging.FileHandler):
                handler.setFormatter(logging.Formatter(VERBOSE_FORMAT))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
def log_important(message: str, level: str = "INFO"):
    """–õ–æ–≥–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    getattr(logger, level.lower())(f"üîî {message}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
def log_signal_compact(symbol: str, signal: str, price: float, votes: int = None):
    """–ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    votes_str = f" (v{votes})" if votes else ""
    logger.info(f"üìä {symbol}: {signal} @ {price:.4f}{votes_str}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
def log_error(message: str, error: Exception = None):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏"""
    if error:
        logger.error(f"‚ùå {message}: {error}")
    else:
        logger.error(f"‚ùå {message}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º
def enable_production_mode():
    """–í–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º - —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è"""
    try:
        import config
        config.PRODUCTION_LOGGING = True
        logger.setLevel(logging.WARNING)
        logger.info("üîß –ü—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω - —Ç–æ–ª—å–∫–æ WARNING –∏ ERROR")
    except ImportError:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
def enable_development_mode():
    """–í–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏"""
    try:
        import config
        config.PRODUCTION_LOGGING = False
        config.COMPACT_LOGGING = False
        logger.setLevel(logging.DEBUG)
        logger.info("üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–∫–ª—é—á–µ–Ω - –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏")
    except ImportError:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
def enable_compact_mode():
    """–í–∫–ª—é—á–∞–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º - —Å–∂–∞—Ç—ã–µ –ª–æ–≥–∏"""
    try:
        import config
        config.COMPACT_LOGGING = True
        config.SIGNAL_DIAG_COMPACT = True
        logger.info("üîß –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω")
    except ImportError:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º")
