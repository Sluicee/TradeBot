#!/usr/bin/env python3
"""
üî¥ –ë–≠–ö–¢–ï–°–¢ SHORT –ú–ï–•–ê–ù–ò–ö–ò –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 48 –ß–ê–°–û–í

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É SHORT v2.1 –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 48 —á–∞—Å–æ–≤.
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏—é SHORT —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import requests
import json
from typing import Dict, Any, List
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from signal_generator import SignalGenerator
from config import *
from logger import logger

class ShortBacktest48h:
    """–ë—ç–∫—Ç–µ—Å—Ç SHORT –º–µ—Ö–∞–Ω–∏–∫–∏ –∑–∞ 48 —á–∞—Å–æ–≤"""
    
    def __init__(self, symbol: str = "BTCUSDT", interval: str = "1h"):
        self.symbol = symbol
        self.interval = interval
        self.results = []
        self.short_signals = []
        self.total_signals = 0
        self.short_activated = 0
        
    def get_historical_data(self, hours: int = 24) -> pd.DataFrame:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å Binance (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–≤–µ—á–µ–π)
            url = "https://api.binance.com/api/v3/klines"
            params = {
                'symbol': self.symbol,
                'interval': self.interval,
                'limit': 1000
            }
            
            response = requests.get(url, params=params, timeout=15)
            response.raise_for_status()
            data = response.json()
            
            if not data:
                raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç API")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame
            df = pd.DataFrame(data, columns=[
                'timestamp', 'open', 'high', 'low', 'close', 'volume',
                'close_time', 'quote_asset_volume', 'number_of_trades',
                'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume', 'ignore'
            ])
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
            for col in ['open', 'high', 'low', 'close', 'volume']:
                df[col] = pd.to_numeric(df[col], errors='coerce')
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—Ä–µ–º–µ–Ω–∏
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df.set_index('timestamp', inplace=True)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            df.sort_index(inplace=True)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤
            if hours < 24:
                cutoff_time = df.index[-1] - timedelta(hours=hours)
                df = df[df.index >= cutoff_time]
            
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –¥–ª—è {self.symbol}")
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return pd.DataFrame()
    
    def run_backtest(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±—ç–∫—Ç–µ—Å—Ç SHORT –º–µ—Ö–∞–Ω–∏–∫–∏"""
        logger.info("üöÄ –ó–ê–ü–£–°–ö –ë–≠–ö–¢–ï–°–¢–ê SHORT –ú–ï–•–ê–ù–ò–ö–ò –ó–ê 24 –ß–ê–°–ê")
        logger.info("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = self.get_historical_data(24)
        if df.empty:
            return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"}
        
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
        generator = SignalGenerator(df)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        try:
            generator.compute_indicators()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return {"error": f"–û—à–∏–±–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}"}
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —Å–≤–µ—á–µ
        for i in range(50, len(df)):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 50-–π —Å–≤–µ—á–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            current_df = df.iloc[:i+1].copy()
            
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ä–µ–∑–∞
                current_generator = SignalGenerator(current_df)
                current_generator.compute_indicators()
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
                signal_result = current_generator.generate_signal()
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                signal = signal_result.get("signal", "HOLD")
                price = signal_result.get("price", 0)
                timestamp = current_df.index[-1]
                
                self.total_signals += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º SHORT –∞–∫—Ç–∏–≤–∞—Ü–∏—é
                if signal == "SHORT":
                    self.short_activated += 1
                    self.short_signals.append({
                        'timestamp': timestamp,
                        'price': price,
                        'signal': signal,
                        'short_score': signal_result.get("short_score", 0),
                        'short_conditions': signal_result.get("short_conditions", []),
                        'fear_greed_index': signal_result.get("fear_greed_index", 50),
                        'bearish_votes': signal_result.get("bearish_votes", 0),
                        'bullish_votes': signal_result.get("bullish_votes", 0),
                        'market_regime': signal_result.get("market_regime", "NEUTRAL")
                    })
                    
                    logger.info(f"üî¥ SHORT –°–ò–ì–ù–ê–õ: {timestamp} @ ${price:.2f}")
                    logger.info(f"   –°–∫–æ—Ä: {signal_result.get('short_score', 0):.2f}")
                    logger.info(f"   –£—Å–ª–æ–≤–∏—è: {len(signal_result.get('short_conditions', []))}")
                    logger.info(f"   –°—Ç—Ä–∞—Ö: {signal_result.get('fear_greed_index', 50)}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                self.results.append({
                    'timestamp': timestamp,
                    'price': price,
                    'signal': signal,
                    'bearish_votes': signal_result.get("bearish_votes", 0),
                    'bullish_votes': signal_result.get("bullish_votes", 0),
                    'short_enabled': signal_result.get("short_enabled", False),
                    'short_score': signal_result.get("short_score", 0),
                    'fear_greed_index': signal_result.get("fear_greed_index", 50)
                })
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞ —Å–≤–µ—á–µ {i}: {e}")
                continue
        
        return self.analyze_results()
    
    def analyze_results(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞"""
        if not self.results:
            return {"error": "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal_counts = {}
        for result in self.results:
            signal = result['signal']
            signal_counts[signal] = signal_counts.get(signal, 0) + 1
        
        # –ê–Ω–∞–ª–∏–∑ SHORT —Å–∏–≥–Ω–∞–ª–æ–≤
        short_analysis = {
            'total_short_signals': len(self.short_signals),
            'short_activation_rate': len(self.short_signals) / self.total_signals * 100 if self.total_signals > 0 else 0,
            'avg_short_score': np.mean([s['short_score'] for s in self.short_signals]) if self.short_signals else 0,
            'avg_fear_index': np.mean([s['fear_greed_index'] for s in self.short_signals]) if self.short_signals else 0,
            'avg_conditions': np.mean([len(s['short_conditions']) for s in self.short_signals]) if self.short_signals else 0
        }
        
        # –ê–Ω–∞–ª–∏–∑ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        bearish_dominance = sum(1 for r in self.results if r['bearish_votes'] > r['bullish_votes'])
        bullish_dominance = sum(1 for r in self.results if r['bullish_votes'] > r['bearish_votes'])
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ö–∞
        fear_periods = sum(1 for r in self.results if r['fear_greed_index'] < 45)
        
        return {
            'backtest_period': '48 hours',
            'symbol': self.symbol,
            'interval': self.interval,
            'total_candles': len(self.results),
            'signal_distribution': signal_counts,
            'short_analysis': short_analysis,
            'market_analysis': {
                'bearish_dominance_periods': bearish_dominance,
                'bullish_dominance_periods': bullish_dominance,
                'fear_periods': fear_periods,
                'fear_percentage': fear_periods / len(self.results) * 100 if self.results else 0
            },
            'short_signals': self.short_signals[-10:] if self.short_signals else [],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 SHORT —Å–∏–≥–Ω–∞–ª–æ–≤
            'recommendations': self.generate_recommendations()
        }
    
    def generate_recommendations(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        recommendations = []
        
        if len(self.short_signals) == 0:
            recommendations.append("‚ùå SHORT —Å–∏–≥–Ω–∞–ª—ã –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        if self.short_activated / self.total_signals * 100 < 1:
            recommendations.append("‚ö†Ô∏è –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ SHORT —Å–∏–≥–Ω–∞–ª–æ–≤ - –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ä–æ–≥–∏ —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∏–µ")
        
        fear_periods = sum(1 for r in self.results if r['fear_greed_index'] < 45)
        if fear_periods < len(self.results) * 0.1:
            recommendations.append("üìä –ú–∞–ª–æ –ø–µ—Ä–∏–æ–¥–æ–≤ —Å—Ç—Ä–∞—Ö–∞ - SHORT –º–µ—Ö–∞–Ω–∏–∫–∞ –º–æ–∂–µ—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å—Å—è")
        
        bearish_dominance = sum(1 for r in self.results if r['bearish_votes'] > r['bullish_votes'])
        if bearish_dominance < len(self.results) * 0.3:
            recommendations.append("üìâ –ú–∞–ª–æ –º–µ–¥–≤–µ–∂—å–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ - SHORT —É—Å–ª–æ–≤–∏—è —Ä–µ–¥–∫–æ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è")
        
        return recommendations
    
    def print_report(self, results: Dict[str, Any]):
        """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö"""
        print("\n" + "=" * 80)
        print("üî¥ –û–¢–ß–ï–¢ –ë–≠–ö–¢–ï–°–¢–ê SHORT –ú–ï–•–ê–ù–ò–ö–ò –ó–ê 48 –ß–ê–°–û–í")
        print("=" * 80)
        
        print(f"üìä –°–∏–º–≤–æ–ª: {results['symbol']}")
        print(f"‚è∞ –ü–µ—Ä–∏–æ–¥: {results['backtest_period']}")
        print(f"üìà –ò–Ω—Ç–µ—Ä–≤–∞–ª: {results['interval']}")
        print(f"üïØÔ∏è –í—Å–µ–≥–æ —Å–≤–µ—á–µ–π: {results['total_candles']}")
        
        print(f"\nüìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–ò–ì–ù–ê–õ–û–í:")
        for signal, count in results['signal_distribution'].items():
            percentage = count / results['total_candles'] * 100
            print(f"   {signal}: {count} ({percentage:.1f}%)")
        
        print(f"\nüî¥ –ê–ù–ê–õ–ò–ó SHORT –°–ò–ì–ù–ê–õ–û–í:")
        short_analysis = results['short_analysis']
        print(f"   –í—Å–µ–≥–æ SHORT —Å–∏–≥–Ω–∞–ª–æ–≤: {short_analysis['total_short_signals']}")
        print(f"   –ß–∞—Å—Ç–æ—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {short_analysis['short_activation_rate']:.2f}%")
        print(f"   –°—Ä–µ–¥–Ω–∏–π —Å–∫–æ—Ä: {short_analysis['avg_short_score']:.2f}")
        print(f"   –°—Ä–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞: {short_analysis['avg_fear_index']:.1f}")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ª–æ–≤–∏–π: {short_analysis['avg_conditions']:.1f}")
        
        print(f"\nüìà –ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê:")
        market = results['market_analysis']
        print(f"   –ú–µ–¥–≤–µ–∂—å–∏ –ø–µ—Ä–∏–æ–¥—ã: {market['bearish_dominance_periods']}")
        print(f"   –ë—ã—á—å–∏ –ø–µ—Ä–∏–æ–¥—ã: {market['bullish_dominance_periods']}")
        print(f"   –ü–µ—Ä–∏–æ–¥—ã —Å—Ç—Ä–∞—Ö–∞: {market['fear_periods']} ({market['fear_percentage']:.1f}%)")
        
        if results['short_signals']:
            print(f"\nüî¥ –ü–û–°–õ–ï–î–ù–ò–ï SHORT –°–ò–ì–ù–ê–õ–´:")
            for signal in results['short_signals'][-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
                print(f"   {signal['timestamp']} @ ${signal['price']:.2f}")
                print(f"      –°–∫–æ—Ä: {signal['short_score']:.2f}, –°—Ç—Ä–∞—Ö: {signal['fear_greed_index']}")
                print(f"      –ì–æ–ª–æ—Å–∞: {signal['bearish_votes']} vs {signal['bullish_votes']}")
        
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for rec in results['recommendations']:
            print(f"   {rec}")
        
        print("=" * 80)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–ê–ü–£–°–ö –ë–≠–ö–¢–ï–°–¢–ê SHORT –ú–ï–•–ê–ù–ò–ö–ò")
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç
    backtest = ShortBacktest48h(symbol="BTCUSDT", interval="1h")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    results = backtest.run_backtest()
    
    if "error" in results:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞: {results['error']}")
        return
    
    # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
    backtest.print_report(results)
    
    logger.info("‚úÖ –ë–≠–ö–¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")

if __name__ == "__main__":
    main()
