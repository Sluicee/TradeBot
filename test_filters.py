"""
–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ Mean Reversion –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
"""
import asyncio
import aiohttp
from data_provider import DataProvider
from signal_generator import SignalGenerator
from config import (
	MR_RSI_OVERSOLD, MR_ZSCORE_BUY_THRESHOLD, MR_ADX_MAX,
	USE_RED_CANDLES_FILTER, VOLUME_SPIKE_THRESHOLD,
	NO_BUY_IF_PRICE_BELOW_N_DAY_LOW_PERCENT
)

async def main():
	print("="*80)
	print("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –§–ò–õ–¨–¢–†–û–í MEAN REVERSION V5.1")
	print("="*80)
	print(f"\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤:")
	print(f"  MR_RSI_OVERSOLD: {MR_RSI_OVERSOLD}")
	print(f"  MR_ZSCORE_BUY_THRESHOLD: {MR_ZSCORE_BUY_THRESHOLD}")
	print(f"  MR_ADX_MAX: {MR_ADX_MAX}")
	print(f"  USE_RED_CANDLES_FILTER: {USE_RED_CANDLES_FILTER}")
	print(f"  VOLUME_SPIKE_THRESHOLD: {VOLUME_SPIKE_THRESHOLD}")
	print(f"  NO_BUY_IF_PRICE_BELOW_N_DAY_LOW_PERCENT: {NO_BUY_IF_PRICE_BELOW_N_DAY_LOW_PERCENT}")
	print("\n" + "="*80)
	
	# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
	async with aiohttp.ClientSession() as session:
		provider = DataProvider(session)
		df = await provider.fetch_klines("BTCUSDT", "1h", limit=1000)
		
		if df is None or df.empty:
			print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
			return
		
		print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π")
		
		# –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º 50 —Å–≤–µ—á–∞–º –∏ –∏—â–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
		buy_signals_found = 0
		blocked_by_filters = 0
		rsi_zscore_match = 0  # –ü–æ–¥—Ö–æ–¥—è—â–∏–µ RSI+Z-score –Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
		
		for i in range(max(200, len(df)-50), len(df)):
			sub_df = df.iloc[:i+1]
			gen = SignalGenerator(sub_df)
			gen.compute_indicators()
			result = gen.generate_signal_mean_reversion()
			
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –≤—Ä—É—á–Ω—É—é
			rsi = result.get("RSI", 100)
			zscore = result.get("zscore", 0)
			adx = result.get("ADX", 100)
			
			is_rsi_oversold = rsi < MR_RSI_OVERSOLD
			is_zscore_low = zscore < MR_ZSCORE_BUY_THRESHOLD
			is_adx_ok = adx < MR_ADX_MAX
			
			if result["signal"] == "BUY":
				buy_signals_found += 1
				print(f"\n‚úÖ BUY —Å–∏–≥–Ω–∞–ª –Ω–∞ —Å–≤–µ—á–µ {i}:")
				print(f"  –¶–µ–Ω–∞: ${result['price']:.2f}")
				print(f"  RSI: {rsi:.1f}")
				print(f"  Z-score: {zscore:.2f}")
				print(f"  ADX: {adx:.1f}")
				print(f"  –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {result['position_size_percent']*100:.0f}%")
			elif result.get("falling_knife_detected", False):
				blocked_by_filters += 1
				if is_rsi_oversold and is_zscore_low:
					rsi_zscore_match += 1
					if rsi_zscore_match <= 3:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–∏–º–µ—Ä–∞
						print(f"\n‚ö†Ô∏è –ë–õ–û–ö–ò–†–û–í–ê–ù —Å–≤–µ—á–∞ {i} (RSI+Z –ø–æ–¥—Ö–æ–¥—è—Ç, –Ω–æ —Ñ–∏–ª—å—Ç—Ä—ã –±–ª–æ–∫–∏—Ä—É—é—Ç):")
						print(f"  –¶–µ–Ω–∞: ${result['price']:.2f}")
						print(f"  RSI: {rsi:.1f} (<{MR_RSI_OVERSOLD}) ‚úì")
						print(f"  Z-score: {zscore:.2f} (<{MR_ZSCORE_BUY_THRESHOLD}) ‚úì")
						print(f"  ADX: {adx:.1f} {'‚úì' if is_adx_ok else '‚úó'}")
						print(f"  –ü—Ä–∏—á–∏–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
						for reason in result.get("reasons", []):
							if "üö´" in reason:
								print(f"    {reason}")
		
		print("\n" + "="*80)
		print(f"–†–ï–ó–£–õ–¨–¢–ê–¢–´:")
		print(f"  BUY —Å–∏–≥–Ω–∞–ª–æ–≤: {buy_signals_found}")
		print(f"  –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: {blocked_by_filters}")
		print(f"  –ò–∑ –Ω–∏—Ö RSI+Z-score –ø–æ–¥—Ö–æ–¥–∏–ª–∏: {rsi_zscore_match}")
		print(f"  –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–≤–µ—á–µ–π: 50")
		print("="*80)

if __name__ == "__main__":
	asyncio.run(main())

