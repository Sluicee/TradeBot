"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ HYBRID: –ø–æ—á–µ–º—É –Ω–µ—Ç BUY —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import asyncio
import pandas as pd
from datetime import datetime
from data_provider import DataProvider
from signal_generator import SignalGenerator
import config

async def diagnose():
	print("\n" + "="*80)
	print("–î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê HYBRID")
	print("="*80)
	
	# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ BNB (–ø–æ–∫–∞–∑–∞–ª +32% —Ä–æ—Å—Ç)
	import aiohttp
	async with aiohttp.ClientSession() as session:
		provider = DataProvider(session=session)
		df = await provider.fetch_klines(symbol="BNBUSDT", interval="1h", limit=720)
		
		print(f"\n–î–∞–Ω–Ω—ã–µ: BNBUSDT, 1h, {len(df)} —Å–≤–µ—á–µ–π")
		print(f"–ü–µ—Ä–∏–æ–¥: {df.index[0]} -> {df.index[-1]}")
		print(f"–¶–µ–Ω–∞: ${df['close'].iloc[0]:.2f} -> ${df['close'].iloc[-1]:.2f} ({((df['close'].iloc[-1]/df['close'].iloc[0])-1)*100:+.1f}%)")
		
		# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
		gen = SignalGenerator(df)
		gen.compute_indicators()
		
		print(f"\n{'='*80}")
		print("–ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• 10 –°–í–ï–ß–ï–ô")
		print(f"{'='*80}")
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–≤–µ—á–µ–π
		buy_votes_history = []
		
		for i in range(len(gen.df) - 10, len(gen.df)):
			sub_df = gen.df.iloc[:i+1].copy()
			temp_gen = SignalGenerator(sub_df)
			temp_gen.df = sub_df
			
			result = temp_gen.generate_signal_hybrid(last_mode="HOLD", last_mode_time=0)
			
			date = gen.df.index[i]
			price = gen.df['close'].iloc[i]
			signal = result['signal']
			bullish = result.get('bullish_votes', 0)
			bearish = result.get('bearish_votes', 0)
			delta = bullish - bearish
			mode = result.get('active_mode', 'N/A')
			regime = result.get('market_regime', 'N/A')
			
			buy_votes_history.append(delta)
			
			print(f"\n{date.strftime('%Y-%m-%d %H:%M')} | ${price:.2f}")
			print(f"  Signal: {signal} | Mode: {mode} | Regime: {regime}")
			print(f"  Votes: {bullish} bull vs {bearish} bear ‚Üí delta={delta:+d} (need +5 for BUY)")
			
			# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
			if f'ADX_{config.ADX_WINDOW}' in sub_df.columns:
				adx = sub_df[f'ADX_{config.ADX_WINDOW}'].iloc[-1]
				print(f"  ADX: {adx:.1f}")
			
			if f'RSI_{config.RSI_WINDOW}' in sub_df.columns:
				rsi = sub_df[f'RSI_{config.RSI_WINDOW}'].iloc[-1]
				print(f"  RSI: {rsi:.1f}")
			
			# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—ã
			reasons = result.get('reasons', [])
			if reasons:
				print(f"  –ü—Ä–∏—á–∏–Ω—ã:")
				for reason in reasons[:5]:
					print(f"    - {reason}")
		
		print(f"\n{'='*80}")
		print("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ì–û–õ–û–°–ê–ú")
		print(f"{'='*80}")
		
		# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥
		all_votes = []
		buy_signal_count = 0
		max_delta = -999
		max_delta_date = None
		
		for i in range(200, len(gen.df)):
			sub_df = gen.df.iloc[:i+1].copy()
			temp_gen = SignalGenerator(sub_df)
			temp_gen.df = sub_df
			
			result = temp_gen.generate_signal_hybrid(last_mode="HOLD", last_mode_time=0)
			
			if result['signal'] == 'BUY':
				buy_signal_count += 1
			
			bullish = result.get('bullish_votes', 0)
			bearish = result.get('bearish_votes', 0)
			delta = bullish - bearish
			
			all_votes.append(delta)
			
			if delta > max_delta:
				max_delta = delta
				max_delta_date = gen.df.index[i]
		
		print(f"–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–≤–µ—á–µ–π: {len(all_votes)}")
		print(f"BUY —Å–∏–≥–Ω–∞–ª–æ–≤ (votes >= 5): {buy_signal_count}")
		print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ votes delta:")
		print(f"  Min: {min(all_votes):+d}")
		print(f"  Max: {max_delta:+d} (–¥–∞—Ç–∞: {max_delta_date})")
		print(f"  Avg: {sum(all_votes)/len(all_votes):+.1f}")
		print(f"  Median: {sorted(all_votes)[len(all_votes)//2]:+d}")
		
		# –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
		print(f"\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ votes delta:")
		ranges = [
			(float('-inf'), -5, "–°–∏–ª—å–Ω–æ bearish (<-5)"),
			(-5, -3, "–°—Ä–µ–¥–Ω–µ bearish (-5 to -3)"),
			(-3, 0, "–°–ª–∞–±–æ bearish (-3 to 0)"),
			(0, 3, "–°–ª–∞–±–æ bullish (0 to 3)"),
			(3, 5, "–°—Ä–µ–¥–Ω–µ bullish (3 to 5)"),
			(5, float('inf'), "–°–∏–ª—å–Ω–æ bullish (>=5) üéØ")
		]
		
		for low, high, label in ranges:
			count = len([v for v in all_votes if low <= v < high])
			pct = count / len(all_votes) * 100
			print(f"  {label}: {count} ({pct:.1f}%)")
		
		print(f"\n{'='*80}")
		print("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
		print(f"{'='*80}")
		
		if max_delta < 5:
			print(f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π votes delta = {max_delta} < 5")
			print(f"   –ü–æ—Ä–æ–≥ 5 –≥–æ–ª–æ—Å–æ–≤ –ù–ò–ö–û–ì–î–ê –Ω–µ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è!")
			print(f"\nüí° –†–ï–®–ï–ù–ò–ï:")
			print(f"   1. –°–Ω–∏–∑–∏—Ç—å –ø–æ—Ä–æ–≥ —Å 5 –¥–æ 3 –≥–æ–ª–æ—Å–æ–≤")
			print(f"   2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥:")
			print(f"      - 3 –≥–æ–ª–æ—Å–∞ = 30% –ø–æ–∑–∏—Ü–∏—è")
			print(f"      - 4 –≥–æ–ª–æ—Å–∞ = 40% –ø–æ–∑–∏—Ü–∏—è")
			print(f"      - 5+ –≥–æ–ª–æ—Å–æ–≤ = 50% –ø–æ–∑–∏—Ü–∏—è")
		elif buy_signal_count > 0:
			print(f"‚úÖ –°–∏–≥–Ω–∞–ª—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è ({buy_signal_count} —à—Ç)")
			print(f"   –ù–æ –∏—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø—Ä–∏–±—ã–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏")
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
		conflicts = len([r for r in all_votes if -2 <= r <= 2])
		conflict_pct = conflicts / len(all_votes) * 100
		
		print(f"\nüìä –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {conflicts} ({conflict_pct:.1f}%)")
		if conflict_pct > 30:
			print(f"   ‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤! –£–ø—Ä–æ—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")

if __name__ == "__main__":
	asyncio.run(diagnose())

