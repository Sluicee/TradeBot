#!/usr/bin/env python3
"""
üî¥ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ SHORT –õ–û–ì–ò–ö–ò

–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ SHORT –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤.
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_short_conditions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è SHORT –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
    print("–ü–†–û–°–¢–û–ô –¢–ï–°–¢ SHORT –õ–û–ì–ò–ö–ò")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    scenarios = [
        {
            'name': '–°–∏–ª—å–Ω—ã–π —Å—Ç—Ä–∞—Ö + –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥',
            'fear_greed_index': 25,  # –°–∏–ª—å–Ω—ã–π —Å—Ç—Ä–∞—Ö
            'funding_rate': -0.01,  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π funding
            'long_liquidations': 15.0,  # –í—ã—Å–æ–∫–∏–µ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ long
            'short_liquidations': 5.0,  # –ù–∏–∑–∫–∏–µ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ short
            'btc_dominance_change': 1.5,  # –†–æ—Å—Ç –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è BTC
            'ema_short': 109000,  # EMA short
            'ema_long': 110000,   # EMA long (–º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥)
            'rsi': 45,  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π RSI
            'expected_short': True
        },
        {
            'name': '–£–º–µ—Ä–µ–Ω–Ω—ã–π —Å—Ç—Ä–∞—Ö + –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥',
            'fear_greed_index': 35,  # –£–º–µ—Ä–µ–Ω–Ω—ã–π —Å—Ç—Ä–∞—Ö
            'funding_rate': -0.005,  # –°–ª–∞–±–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π funding
            'long_liquidations': 10.0,
            'short_liquidations': 8.0,
            'btc_dominance_change': 0.5,
            'ema_short': 109000,
            'ema_long': 110000,
            'rsi': 45,
            'expected_short': True
        },
        {
            'name': '–°–ª–∞–±—ã–π —Å—Ç—Ä–∞—Ö + –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥',
            'fear_greed_index': 45,  # –°–ª–∞–±—ã–π —Å—Ç—Ä–∞—Ö
            'funding_rate': 0.001,  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π funding
            'long_liquidations': 5.0,
            'short_liquidations': 5.0,
            'btc_dominance_change': 0.0,
            'ema_short': 109000,
            'ema_long': 110000,
            'rsi': 45,
            'expected_short': False
        },
        {
            'name': '–ñ–∞–¥–Ω–æ—Å—Ç—å + –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥',
            'fear_greed_index': 65,  # –ñ–∞–¥–Ω–æ—Å—Ç—å
            'funding_rate': 0.01,  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π funding
            'long_liquidations': 3.0,
            'short_liquidations': 7.0,
            'btc_dominance_change': -0.5,
            'ema_short': 109000,
            'ema_long': 110000,
            'rsi': 45,
            'expected_short': False
        }
    ]
    
    results = []
    
    for scenario in scenarios:
        print(f"\n–¢–ï–°–¢: {scenario['name']}")
        print(f"   –°—Ç—Ä–∞—Ö: {scenario['fear_greed_index']}")
        print(f"   Funding: {scenario['funding_rate']:.3f}%")
        print(f"   Long liq: ${scenario['long_liquidations']:.1f}M")
        print(f"   Short liq: ${scenario['short_liquidations']:.1f}M")
        print(f"   BTC.D: {scenario['btc_dominance_change']:+.1f}%")
        print(f"   EMA: {scenario['ema_short']} < {scenario['ema_long']} (–º–µ–¥–≤–µ–∂–∏–π)")
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π
        conditions = []
        score = 0.0
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞—Ö–∞ (–≤–µ—Å 0.25)
        if scenario['fear_greed_index'] < 45:  # SHORT_FEAR_MODERATE_THRESHOLD
            conditions.append("–°—Ç—Ä–∞—Ö")
            score += 0.25
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ funding rate (–≤–µ—Å 0.15)
        if scenario['funding_rate'] < 0.0:  # SHORT_FUNDING_RATE_THRESHOLD
            conditions.append("Funding")
            score += 0.15
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π (–≤–µ—Å 0.2)
        if scenario['long_liquidations'] > scenario['short_liquidations'] * 1.5:  # SHORT_LIQUIDATION_RATIO_THRESHOLD
            conditions.append("–õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏")
            score += 0.2
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ RSI (–≤–µ—Å 0.2)
        if scenario['rsi'] > 70:  # RSI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
            conditions.append("RSI")
            score += 0.2
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ EMA —Ç—Ä–µ–Ω–¥–∞ (–≤–µ—Å 0.1)
        if scenario['ema_short'] < scenario['ema_long']:  # –ú–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥
            conditions.append("EMA")
            score += 0.1
        
        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (–≤–µ—Å 0.1)
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –≤—ã—Å–æ–∫—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        conditions.append("–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
        score += 0.1
        
        # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ BTC –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–±–æ–Ω—É—Å)
        if scenario['btc_dominance_change'] > 1.0 and scenario['fear_greed_index'] < 30:
            conditions.append("BTC.D")
            score += 0.1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        short_enabled = score > 0.55  # SHORT_MIN_SCORE
        
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"      –°–∫–æ—Ä: {score:.3f}")
        print(f"      –£—Å–ª–æ–≤–∏—è: {', '.join(conditions)}")
        print(f"      –ê–∫—Ç–∏–≤–∞—Ü–∏—è: {'–î–ê' if short_enabled else '–ù–ï–¢'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
        expected = scenario['expected_short']
        actual = short_enabled
        status = "–ü–†–û–®–ï–õ" if expected == actual else "–ü–†–û–í–ê–õ–ï–ù"
        
        print(f"      –û–∂–∏–¥–∞–Ω–∏–µ: {'–î–ê' if expected else '–ù–ï–¢'}")
        print(f"      –°—Ç–∞—Ç—É—Å: {status}")
        
        results.append({
            'scenario': scenario['name'],
            'expected': expected,
            'actual': actual,
            'score': score,
            'conditions': len(conditions),
            'status': status
        })
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 80)
    print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø SHORT –õ–û–ì–ò–ö–ò")
    print("=" * 80)
    
    passed = sum(1 for r in results if "–ü–†–û–®–ï–õ" in r['status'])
    total = len(results)
    
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
    print(f"–ü—Ä–æ—à–ª–æ: {passed}")
    print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}")
    print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed/total*100:.1f}%")
    
    print(f"\n–î–ï–¢–ê–õ–ò –¢–ï–°–¢–û–í:")
    for result in results:
        print(f"   {result['scenario']}: {result['status']}")
        if "–ü–†–û–®–ï–õ" in result['status']:
            print(f"      –°–∫–æ—Ä: {result['score']:.3f}, –£—Å–ª–æ–≤–∏—è: {result['conditions']}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if passed == total:
        print("   –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ - SHORT –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("   –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã - —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        failed_tests = [r for r in results if "–ü–†–û–í–ê–õ–ï–ù" in r['status']]
        for test in failed_tests:
            print(f"   - {test['scenario']}: –æ–∂–∏–¥–∞–ª—Å—è {test['expected']}, –ø–æ–ª—É—á–µ–Ω {test['actual']}")
    
    return results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        results = test_short_conditions()
        print("\n–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        return results
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return []

if __name__ == "__main__":
    main()
