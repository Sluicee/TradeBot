import os
import pandas as pd
import numpy as np
from data_provider import DataProvider
from signal_generator import SignalGenerator
from paper_trader import get_position_size_percent
import aiohttp
import asyncio
import json
from datetime import datetime, timedelta
from itertools import product
from typing import Dict, List, Tuple, Any
from config import (
	COMMISSION_RATE, INITIAL_BALANCE,
	STOP_LOSS_PERCENT, TAKE_PROFIT_PERCENT,
	PARTIAL_CLOSE_PERCENT, TRAILING_STOP_PERCENT
)

# ====================================================================
# WALK-FORWARD –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø
# ====================================================================

class WalkForwardOptimizer:
	"""
	Walk-Forward –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
	
	–ü—Ä–æ—Ü–µ—Å—Å:
	1. –î–µ–ª–∏–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ–∫–Ω–∞ IS/OOS
	2. –ù–∞ IS-–æ–∫–Ω–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
	3. –ù–∞ OOS-–æ–∫–Ω–µ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å –ª—É—á—à–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
	4. –°–¥–≤–∏–≥–∞–µ–º –æ–∫–Ω–æ –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
	5. –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö OOS –ø–µ—Ä–∏–æ–¥–æ–≤
	"""
	
	def __init__(
		self,
		symbol: str,
		interval: str = "15m",
		is_period_hours: int = 168,  # 7 –¥–Ω–µ–π (1 –Ω–µ–¥–µ–ª—è) - —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ –¥–ª—è Bybit API
		oos_period_hours: int = 48,   # 2 –¥–Ω—è - —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥
		start_balance: float = None,
		anchored: bool = False,  # False = Rolling, True = Anchored
		use_statistical_models: bool = False  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏
	):
		self.symbol = symbol
		self.interval = interval
		self.is_period_hours = is_period_hours
		self.oos_period_hours = oos_period_hours
		self.start_balance = start_balance or INITIAL_BALANCE
		self.anchored = anchored
		self.use_statistical_models = use_statistical_models
		
		# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è —Å–µ—Ç–∫–∞ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
		# üöÄ –ë–´–°–¢–†–´–ô —Ä–µ–∂–∏–º: ~12 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π, ~5 –º–∏–Ω—É—Ç
		self.param_grid = {
			'ema_short': [12],  # –§–∏–∫—Å–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
			'ema_long': [26],   # –§–∏–∫—Å–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
			'rsi_window': [14],  # –§–∏–∫—Å–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
			'macd_fast': [12],   # –§–∏–∫—Å–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
			'macd_slow': [26],   # –§–∏–∫—Å–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
			'macd_signal': [9],  # –§–∏–∫—Å–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
            'vote_threshold_trending': [1, 2, 3],      # –±—ã–ª–æ [2, 3]
            'vote_threshold_ranging': [2, 3, 4, 5],    # –±—ã–ª–æ [3, 4, 5]
            'min_filters': [1, 2, 3],                  # –±—ã–ª–æ [2, 3]
		}
		
		# üê¢ –ü–û–õ–ù–´–ô —Ä–µ–∂–∏–º: ~400 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π, ~1-2 —á–∞—Å–∞ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –¥–ª—è production)
		# self.param_grid = {
		# 	'ema_short': [10, 12, 14],
		# 	'ema_long': [24, 26, 28],
		# 	'rsi_window': [12, 14, 16],
		# 	'macd_fast': [12],
		# 	'macd_slow': [26],
		# 	'macd_signal': [9],
		# 	'vote_threshold_trending': [2, 3],
		# 	'vote_threshold_ranging': [3, 4, 5],
		# 	'min_filters': [2, 3]
		# }
		
		self.results = {
			'iterations': [],
			'oos_aggregate': {},
			'parameter_stability': {}
		}
	
	async def run(self) -> Dict[str, Any]:
		"""–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π Walk-Forward –∞–Ω–∞–ª–∏–∑"""
		models_label = " [–°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ï –ú–û–î–ï–õ–ò]" if self.use_statistical_models else ""
		print(f"\n{'='*100}")
		print(f"WALK-FORWARD –ë–≠–ö–¢–ï–°–¢–ò–ù–ì: {self.symbol}{models_label}")
		print(f"{'='*100}")
		print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
		print(f"  ‚Ä¢ –†–µ–∂–∏–º: {'Anchored' if self.anchored else 'Rolling'}")
		print(f"  ‚Ä¢ IS –ø–µ—Ä–∏–æ–¥: {self.is_period_hours}—á ({self.is_period_hours/24:.0f} –¥–Ω–µ–π)")
		print(f"  ‚Ä¢ OOS –ø–µ—Ä–∏–æ–¥: {self.oos_period_hours}—á ({self.oos_period_hours/24:.0f} –¥–Ω–µ–π)")
		print(f"  ‚Ä¢ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${self.start_balance}")
		print(f"  ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏: {'–î–ê' if self.use_statistical_models else '–ù–ï–¢'}")
		print(f"{'='*100}\n")
		
		# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç
		# –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è 6 –∏—Ç–µ—Ä–∞—Ü–∏–π, –Ω–æ –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º—Å—è –∫ –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–∞–Ω–Ω—ã–º
		desired_hours = self.is_period_hours + self.oos_period_hours * 6
		df = await self._fetch_data(desired_hours)
		
		if df is None or len(df) == 0:
			print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
			return None
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ: 1 IS + 1 OOS
		candles_per_hour = int(60 / int(self.interval.replace('m',''))) if 'm' in self.interval else 1
		min_candles = (self.is_period_hours + self.oos_period_hours) * candles_per_hour
		
		if len(df) < min_candles:
			print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Walk-Forward –∞–Ω–∞–ª–∏–∑–∞")
			print(f"   –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º: {min_candles} —Å–≤–µ—á–µ–π ({(self.is_period_hours + self.oos_period_hours)/24:.0f} –¥–Ω–µ–π)")
			print(f"   –î–æ—Å—Ç—É–ø–Ω–æ: {len(df)} —Å–≤–µ—á–µ–π ({len(df)/candles_per_hour/24:.0f} –¥–Ω–µ–π)")
			print(f"\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
			print(f"   ‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç—å IS/OOS –ø–µ—Ä–∏–æ–¥—ã")
			print(f"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª—å—à–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (30m, 1h, 4h)")
			return None
		
		print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π (–ø–µ—Ä–∏–æ–¥: {df.index[0]} - {df.index[-1]})\n")
		
		# –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ–∫–Ω–∞
		windows = self._create_windows(df)
		print(f"‚úì –°–æ–∑–¥–∞–Ω–æ {len(windows)} –æ–∫–æ–Ω Walk-Forward\n")
		
		# –ò—Ç–µ—Ä–∞—Ü–∏–∏ Walk-Forward
		iteration_num = 1
		oos_balances = []
		oos_trades = []
		
		for is_data, oos_data in windows:
			print(f"\n{'‚îÄ'*100}")
			print(f"üìä –ò–¢–ï–†–ê–¶–ò–Ø {iteration_num}/{len(windows)}")
			print(f"{'‚îÄ'*100}")
			print(f"IS –ø–µ—Ä–∏–æ–¥:  {is_data.index[0]} ‚Äî {is_data.index[-1]} ({len(is_data)} —Å–≤–µ—á–µ–π)")
			print(f"OOS –ø–µ—Ä–∏–æ–¥: {oos_data.index[0]} ‚Äî {oos_data.index[-1]} ({len(oos_data)} —Å–≤–µ—á–µ–π)")
			
			# –®–∞–≥ 1: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞ IS
			print(f"\nüîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ IS...")
			best_params, is_metrics = await self._optimize_on_is(is_data)
			
			print(f"\n‚úì –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–π–¥–µ–Ω—ã:")
			for param, value in best_params.items():
				print(f"  ‚Ä¢ {param}: {value}")
			print(f"\n–ú–µ—Ç—Ä–∏–∫–∏ IS:")
			print(f"  ‚Ä¢ –ü—Ä–∏–±—ã–ª—å: {is_metrics['profit_percent']:+.2f}%")
			print(f"  ‚Ä¢ Sharpe: {is_metrics['sharpe_ratio']:.2f}")
			print(f"  ‚Ä¢ Win Rate: {is_metrics['win_rate']:.1f}%")
			print(f"  ‚Ä¢ Max DD: {is_metrics['max_drawdown']:.2f}%")
			
			# –®–∞–≥ 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ OOS
			print(f"\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ OOS (–Ω–µ–≤–∏–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)...")
			oos_metrics, oos_trades_list = await self._test_on_oos(oos_data, best_params)
			
			print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã OOS:")
			print(f"  ‚Ä¢ –ü—Ä–∏–±—ã–ª—å: {oos_metrics['profit_percent']:+.2f}%")
			print(f"  ‚Ä¢ Sharpe: {oos_metrics['sharpe_ratio']:.2f}")
			print(f"  ‚Ä¢ Win Rate: {oos_metrics['win_rate']:.1f}%")
			print(f"  ‚Ä¢ Max DD: {oos_metrics['max_drawdown']:.2f}%")
			print(f"  ‚Ä¢ –°–¥–µ–ª–æ–∫: {oos_metrics['trades_count']}")
			
			# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ IS vs OOS
			profit_degradation = (oos_metrics['profit_percent'] / is_metrics['profit_percent'] * 100) if is_metrics['profit_percent'] != 0 else 0
			print(f"\nüìâ –î–µ–≥—Ä–∞–¥–∞—Ü–∏—è IS‚ÜíOOS: {profit_degradation:.1f}% –æ—Ç IS –ø—Ä–∏–±—ã–ª–∏")
			if profit_degradation < 50:
				print(f"   ‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –°–∏–ª—å–Ω–∞—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è! –í–æ–∑–º–æ–∂–Ω—ã–π overfitting")
			elif profit_degradation > 80:
				print(f"   ‚úÖ –•–æ—Ä–æ—à–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
			
			# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Ç–µ—Ä–∞—Ü–∏–∏
			self.results['iterations'].append({
				'iteration': iteration_num,
				'is_period': (str(is_data.index[0]), str(is_data.index[-1])),
				'oos_period': (str(oos_data.index[0]), str(oos_data.index[-1])),
				'best_params': best_params,
				'is_metrics': is_metrics,
				'oos_metrics': oos_metrics,
				'degradation': profit_degradation
			})
			
			oos_balances.append(oos_metrics['final_balance'])
			oos_trades.extend(oos_trades_list)
			
			iteration_num += 1
		
		# –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö OOS –ø–µ—Ä–∏–æ–¥–æ–≤
		self._aggregate_results(oos_balances, oos_trades)
		
		# –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
		self._analyze_parameter_stability()
		
		# –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
		self._save_report()
		
		return self.results
	
	async def _fetch_data(self, hours: int) -> pd.DataFrame:
		"""–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"""
		candles_per_hour = int(60 / int(self.interval.replace('m',''))) if 'm' in self.interval else 1
		total_candles_needed = hours * candles_per_hour
		
		# Bybit API –ª–∏–º–∏—Ç - –æ–±—ã—á–Ω–æ 200-1000 —Å–≤–µ—á–µ–π
		api_limit = 1000
		
		print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {total_candles_needed} —Å–≤–µ—á–µ–π (~{hours/24:.0f} –¥–Ω–µ–π)...")
		
		if total_candles_needed > api_limit:
			print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–ø—Ä–æ—à–µ–Ω–æ {total_candles_needed} —Å–≤–µ—á–µ–π, –Ω–æ Bybit API –æ–≥—Ä–∞–Ω–∏—á–µ–Ω ~{api_limit} —Å–≤–µ—á–∞–º–∏")
			print(f"   –ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ~{api_limit} —Å–≤–µ—á–µ–π (~{api_limit/candles_per_hour/24:.0f} –¥–Ω–µ–π)")
			print(f"\nüí° –î–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª—å—à–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:")
			print(f"   ‚Ä¢ 15m ‚Üí –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–æ 10 –¥–Ω–µ–π")
			print(f"   ‚Ä¢ 1h ‚Üí –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–æ 40 –¥–Ω–µ–π")
			print(f"   ‚Ä¢ 4h ‚Üí –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–æ 160 –¥–Ω–µ–π")
			print()
			total_candles_needed = api_limit
		
		async with aiohttp.ClientSession() as session:
			provider = DataProvider(session)
			df = await provider.fetch_klines(
				symbol=self.symbol,
				interval=self.interval,
				limit=total_candles_needed
			)
			return df
	
	def _create_windows(self, df: pd.DataFrame) -> List[Tuple[pd.DataFrame, pd.DataFrame]]:
		"""–°–æ–∑–¥–∞–µ—Ç –æ–∫–Ω–∞ IS/OOS –¥–ª—è Walk-Forward"""
		windows = []
		
		candles_per_hour = int(60 / int(self.interval.replace('m',''))) if 'm' in self.interval else 1
		is_candles = self.is_period_hours * candles_per_hour
		oos_candles = self.oos_period_hours * candles_per_hour
		
		if self.anchored:
			# Anchored: IS —Ä–∞—Å—Ç–µ—Ç, –Ω–∞—á–∞–ª–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ
			start_idx = 0
			while start_idx + is_candles + oos_candles <= len(df):
				is_end = start_idx + is_candles
				oos_end = is_end + oos_candles
				
				is_data = df.iloc[start_idx:is_end].copy()
				oos_data = df.iloc[is_end:oos_end].copy()
				
				windows.append((is_data, oos_data))
				
				# –î–ª—è Anchored: –Ω–∞—á–∞–ª–æ –Ω–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è, –Ω–æ –±–µ—Ä–µ–º –±–æ–ª—å—à–µ IS –¥–∞–Ω–Ω—ã—Ö
				is_candles += oos_candles
		else:
			# Rolling: –æ–∫–Ω–æ —Å–∫–æ–ª—å–∑–∏—Ç
			start_idx = 0
			while start_idx + is_candles + oos_candles <= len(df):
				is_end = start_idx + is_candles
				oos_end = is_end + oos_candles
				
				is_data = df.iloc[start_idx:is_end].copy()
				oos_data = df.iloc[is_end:oos_end].copy()
				
				windows.append((is_data, oos_data))
				
				# –°–¥–≤–∏–≥–∞–µ–º –æ–∫–Ω–æ –Ω–∞ OOS –ø–µ—Ä–∏–æ–¥
				start_idx += oos_candles
		
		return windows
	
	async def _optimize_on_is(self, is_data: pd.DataFrame) -> Tuple[Dict, Dict]:
		"""–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ IS –ø–µ—Ä–∏–æ–¥–µ"""
		best_sharpe = -999
		best_params = None
		best_metrics = None
		
		# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
		param_names = list(self.param_grid.keys())
		param_values = [self.param_grid[k] for k in param_names]
		
		total_combinations = np.prod([len(v) for v in param_values])
		print(f"  –¢–µ—Å—Ç–∏—Ä—É–µ–º {total_combinations} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
		
		tested = 0
		for combination in product(*param_values):
			params = dict(zip(param_names, combination))
			
			# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏: short < long
			if params['ema_short'] >= params['ema_long']:
				continue
			if params['macd_fast'] >= params['macd_slow']:
				continue
			
			tested += 1
			print(f"  [{tested}/{total_combinations}] –¢–µ—Å—Ç–∏—Ä—É—é: vote_trend={params.get('vote_threshold_trending', '?')}, vote_range={params.get('vote_threshold_ranging', '?')}, min_filters={params.get('min_filters', '?')}", end='')
			
			# –ë—ç–∫—Ç–µ—Å—Ç —Å —ç—Ç–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
			metrics, _ = await self._backtest_with_params(is_data, params)
			
			print(f" ‚Üí Sharpe={metrics['sharpe_ratio']:.2f}, Profit={metrics['profit_percent']:+.1f}%")
			
			# –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø–æ Sharpe Ratio (—Ä–∏—Å–∫-—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å)
			if metrics['sharpe_ratio'] > best_sharpe:
				best_sharpe = metrics['sharpe_ratio']
				best_params = params
				best_metrics = metrics
				print(f"     ‚úì –ù–æ–≤—ã–π –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
		
		print(f"\n  ‚úì –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ({tested} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ)")
		
		return best_params, best_metrics
	
	async def _test_on_oos(self, oos_data: pd.DataFrame, params: Dict) -> Tuple[Dict, List]:
		"""–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ OOS –ø–µ—Ä–∏–æ–¥–µ"""
		metrics, trades = await self._backtest_with_params(oos_data, params)
		return metrics, trades
	
	async def _backtest_with_params(
		self, df: pd.DataFrame, params: Dict
	) -> Tuple[Dict, List]:
		"""–í—ã–ø–æ–ª–Ω—è–µ—Ç –±—ç–∫—Ç–µ—Å—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
		# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
		signals = []
		min_window = max(params['rsi_window'], params['ema_long'])
		
		for i in range(len(df)):
			sub_df = df.iloc[:i+1]
			if len(sub_df) < min_window:
				signals.append({
					"time": sub_df.index[-1],
					"price": sub_df["close"].iloc[-1],
					"signal": "HOLD",
					"bullish_votes": 0,
					"bearish_votes": 0,
					"ATR": 0
				})
				continue
			
			gen = SignalGenerator(sub_df, use_statistical_models=self.use_statistical_models)
			gen.compute_indicators(
				ema_short_window=params['ema_short'],
				ema_long_window=params['ema_long'],
				rsi_window=params['rsi_window'],
				macd_fast=params['macd_fast'],
				macd_slow=params['macd_slow'],
				macd_signal=params['macd_signal']
			)
			res = gen.generate_signal()
			
			signals.append({
				"time": sub_df.index[-1],
				"price": res["price"],
				"signal": res["signal"],
				"bullish_votes": res["bullish_votes"],
				"bearish_votes": res["bearish_votes"],
				"ATR": res.get("ATR", 0)
			})
		
		# –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
		balance = self.start_balance
		position = 0.0
		entry_price = None
		trades = []
		equity_curve = [balance]
		total_commission = 0.0
		
		stop_loss_triggers = 0
		take_profit_triggers = 0
		partial_closed = False
		max_price = 0.0
		
		for s in signals:
			price = s["price"]
			sig = s["signal"]
			signal_strength = abs(s["bullish_votes"] - s["bearish_votes"])
			atr = s.get("ATR", 0.0)
			
			# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
			if position > 0 and entry_price:
				price_change = (price - entry_price) / entry_price
				
				if partial_closed:
					if price > max_price:
						max_price = price
					
					trailing_drop = (max_price - price) / max_price
					if trailing_drop >= TRAILING_STOP_PERCENT:
						sell_value = position * price
						commission = sell_value * COMMISSION_RATE
						total_commission += commission
						balance += sell_value - commission
						trades.append({
							'type': 'TRAILING-STOP',
							'price': price,
							'profit_pct': ((price - entry_price) / entry_price) * 100
						})
						position = 0.0
						entry_price = None
						partial_closed = False
						max_price = 0.0
						continue
				else:
					if price_change <= -STOP_LOSS_PERCENT:
						sell_value = position * price
						commission = sell_value * COMMISSION_RATE
						total_commission += commission
						balance += sell_value - commission
						trades.append({
							'type': 'STOP-LOSS',
							'price': price,
							'profit_pct': price_change * 100
						})
						position = 0.0
						entry_price = None
						stop_loss_triggers += 1
						continue
					
					if price_change >= TAKE_PROFIT_PERCENT:
						close_amount = position * PARTIAL_CLOSE_PERCENT
						keep_amount = position - close_amount
						
						sell_value = close_amount * price
						commission = sell_value * COMMISSION_RATE
						total_commission += commission
						balance += sell_value - commission
						
						trades.append({
							'type': 'PARTIAL-TP',
							'price': price,
							'profit_pct': price_change * 100
						})
						
						position = keep_amount
						partial_closed = True
						max_price = price
						take_profit_triggers += 1
						continue
			
			# –õ–æ–≥–∏–∫–∞ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞
			if sig == "BUY" and position == 0 and balance > 0:
				position_size_percent = get_position_size_percent(signal_strength, atr, price)
				invest_amount = balance * position_size_percent
				
				commission = invest_amount * COMMISSION_RATE
				total_commission += commission
				position = (invest_amount - commission) / price
				entry_price = price
				balance -= invest_amount
				
				trades.append({
					'type': 'BUY',
					'price': price,
					'profit_pct': 0
				})
				
			elif sig == "SELL" and position > 0 and not partial_closed:
				sell_value = position * price
				commission = sell_value * COMMISSION_RATE
				total_commission += commission
				balance += sell_value - commission
				
				profit_on_trade = ((price - entry_price) / entry_price) * 100
				trades.append({
					'type': 'SELL',
					'price': price,
					'profit_pct': profit_on_trade
				})
				position = 0.0
				entry_price = None
			
			# –û–±–Ω–æ–≤–ª—è–µ–º equity curve
			total_equity = balance + (position * price if position > 0 else 0)
			equity_curve.append(total_equity)
		
		# –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è –ø–æ–∑–∏—Ü–∏—é
		if position > 0:
			final_price = signals[-1]["price"]
			sell_value = position * final_price
			commission = sell_value * COMMISSION_RATE
			total_commission += commission
			balance += sell_value - commission
			profit_on_trade = ((final_price - entry_price) / entry_price) * 100
			trades.append({
				'type': 'FINAL-CLOSE',
				'price': final_price,
				'profit_pct': profit_on_trade
			})
			position = 0.0
		
		# –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
		final_balance = balance
		profit = final_balance - self.start_balance
		profit_percent = (profit / self.start_balance) * 100
		
		# Win Rate
		profitable_trades = [t for t in trades if t['type'] in ['SELL', 'PARTIAL-TP', 'FINAL-CLOSE'] and t['profit_pct'] > 0]
		losing_trades = [t for t in trades if t['type'] in ['SELL', 'STOP-LOSS', 'TRAILING-STOP', 'FINAL-CLOSE'] and t['profit_pct'] < 0]
		win_rate = (len(profitable_trades) / (len(profitable_trades) + len(losing_trades)) * 100) if (len(profitable_trades) + len(losing_trades)) > 0 else 0
		
		# Sharpe Ratio (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π: –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å / –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏)
		returns = np.diff(equity_curve) / equity_curve[:-1]
		sharpe_ratio = (np.mean(returns) / np.std(returns) * np.sqrt(252)) if len(returns) > 0 and np.std(returns) > 0 else 0
		
		# Max Drawdown
		max_drawdown = self._calculate_max_drawdown(equity_curve)
		
		metrics = {
			'final_balance': final_balance,
			'profit': profit,
			'profit_percent': profit_percent,
			'sharpe_ratio': sharpe_ratio,
			'win_rate': win_rate,
			'max_drawdown': max_drawdown,
			'trades_count': len(trades),
			'total_commission': total_commission
		}
		
		return metrics, trades
	
	def _calculate_max_drawdown(self, equity_curve: List[float]) -> float:
		"""–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ—Å–∞–¥–∫—É"""
		peak = equity_curve[0]
		max_dd = 0
		
		for value in equity_curve:
			if value > peak:
				peak = value
			dd = (peak - value) / peak * 100
			if dd > max_dd:
				max_dd = dd
		
		return max_dd
	
	def _aggregate_results(self, oos_balances: List[float], oos_trades: List[Dict]):
		"""–ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö OOS –ø–µ—Ä–∏–æ–¥–æ–≤"""
		print(f"\n\n{'='*100}")
		print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ WALK-FORWARD")
		print(f"{'='*100}\n")
		
		# –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å = —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ OOS
		final_balance = oos_balances[-1]
		total_profit = final_balance - self.start_balance
		total_profit_pct = (total_profit / self.start_balance) * 100
		
		print(f"–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${self.start_balance:.2f}")
		print(f"–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${final_balance:.2f}")
		print(f"–û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${total_profit:+.2f} ({total_profit_pct:+.2f}%)")
		print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π: {len(oos_balances)}")
		print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ (OOS): {len(oos_trades)}\n")
		
		# Win Rate –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
		profitable = [t for t in oos_trades if t['profit_pct'] > 0]
		losing = [t for t in oos_trades if t['profit_pct'] < 0]
		total_wr = (len(profitable) / (len(profitable) + len(losing)) * 100) if (len(profitable) + len(losing)) > 0 else 0
		
		print(f"–ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Win Rate: {total_wr:.1f}% ({len(profitable)}W / {len(losing)}L)")
		
		# –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –ø–æ OOS –ø–µ—Ä–∏–æ–¥–∞–º
		oos_profits = []
		oos_sharpes = []
		for it in self.results['iterations']:
			oos_profits.append(it['oos_metrics']['profit_percent'])
			oos_sharpes.append(it['oos_metrics']['sharpe_ratio'])
		
		avg_oos_profit = np.mean(oos_profits)
		std_oos_profit = np.std(oos_profits)
		avg_sharpe = np.mean(oos_sharpes)
		
		print(f"–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å OOS: {avg_oos_profit:+.2f}% (¬±{std_oos_profit:.2f}%)")
		print(f"–°—Ä–µ–¥–Ω–∏–π Sharpe OOS: {avg_sharpe:.2f}")
		
		# –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∏—Ç–µ—Ä–∞—Ü–∏—è–º
		print(f"\n{'‚îÄ'*100}")
		print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∏—Ç–µ—Ä–∞—Ü–∏—è–º:")
		print(f"{'‚îÄ'*100}")
		print(f"{'–ò—Ç–µ—Ä':<6} {'IS Profit':<12} {'OOS Profit':<12} {'–î–µ–≥—Ä–∞–¥–∞—Ü–∏—è':<12} {'OOS Sharpe':<12} {'OOS WR':<10}")
		print(f"{'‚îÄ'*100}")
		
		for it in self.results['iterations']:
			print(f"{it['iteration']:<6} "
				  f"{it['is_metrics']['profit_percent']:>+10.2f}% "
				  f"{it['oos_metrics']['profit_percent']:>+10.2f}% "
				  f"{it['degradation']:>10.1f}% "
				  f"{it['oos_metrics']['sharpe_ratio']:>10.2f} "
				  f"{it['oos_metrics']['win_rate']:>8.1f}%")
		
		print(f"{'‚îÄ'*100}\n")
		
		# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
		self.results['oos_aggregate'] = {
			'final_balance': final_balance,
			'total_profit': total_profit,
			'total_profit_pct': total_profit_pct,
			'avg_oos_profit': avg_oos_profit,
			'std_oos_profit': std_oos_profit,
			'avg_sharpe': avg_sharpe,
			'total_win_rate': total_wr,
			'iterations_count': len(oos_balances),
			'total_trades': len(oos_trades)
		}
	
	def _analyze_parameter_stability(self):
		"""–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏"""
		print(f"\n{'='*100}")
		print("üîç –ê–ù–ê–õ–ò–ó –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò –ü–ê–†–ê–ú–ï–¢–†–û–í")
		print(f"{'='*100}\n")
		
		# –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∏—Ç–µ—Ä–∞—Ü–∏—è–º
		param_history = {}
		for it in self.results['iterations']:
			for param, value in it['best_params'].items():
				if param not in param_history:
					param_history[param] = []
				param_history[param].append(value)
		
		# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
		for param, values in param_history.items():
			unique_values = len(set(values))
			most_common = max(set(values), key=values.count)
			frequency = values.count(most_common) / len(values) * 100
			
			print(f"{param}:")
			print(f"  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {unique_values}/{len(values)}")
			print(f"  ‚Ä¢ –ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ–µ: {most_common} ({frequency:.0f}%)")
			print(f"  ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è: {values}")
			
			if frequency > 70:
				print(f"  ‚úÖ –í—ã—Å–æ–∫–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å")
			elif frequency > 50:
				print(f"  ‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å")
			else:
				print(f"  ‚ùå –ù–∏–∑–∫–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å - –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–∏–ª—å–Ω–æ –º–µ–Ω—è–µ—Ç—Å—è")
			print()
		
		self.results['parameter_stability'] = param_history
	
	def _save_report(self):
		"""–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –≤ JSON"""
		output_dir = "backtests"
		os.makedirs(output_dir, exist_ok=True)
		
		timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
		models_suffix = "_statmodels" if self.use_statistical_models else ""
		filename = f"walkforward_{self.symbol}_{self.interval}{models_suffix}_{timestamp}.json"
		filepath = os.path.join(output_dir, filename)
		
		with open(filepath, "w", encoding="utf-8") as f:
			json.dump(self.results, f, ensure_ascii=False, indent=2, default=str)
		
		print(f"\n‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}\n")


# ====================================================================
# CLI
# ====================================================================

async def main():
	import sys
	
	if len(sys.argv) < 2:
		print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
		print("  python backtest_walkforward.py <SYMBOL> [interval] [is_hours] [oos_hours] [balance] [--anchored] [--statmodels]")
		print("\n–ü—Ä–∏–º–µ—Ä—ã:")
		print("  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (7 –¥–Ω–µ–π IS / 2 –¥–Ω—è OOS)")
		print("  python backtest_walkforward.py BTCUSDT")
		print()
		print("  # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (15m –∏–Ω—Ç–µ—Ä–≤–∞–ª)")
		print("  python backtest_walkforward.py BTCUSDT 15m 168 48 100")
		print()
		print("  # Anchored —Ä–µ–∂–∏–º (IS —Ä–∞—Å—Ç–µ—Ç)")
		print("  python backtest_walkforward.py BTCUSDT 15m 168 48 100 --anchored")
		print()
		print("  # –°–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏")
		print("  python backtest_walkforward.py BTCUSDT 15m 168 48 100 --statmodels")
		print()
		print("  # –î–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª—å—à–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª")
		print("  python backtest_walkforward.py BTCUSDT 1h 720 240 100  # 30 –¥–Ω–µ–π IS / 10 –¥–Ω–µ–π OOS")
		print("  python backtest_walkforward.py BTCUSDT 4h 2160 720 100  # 90 –¥–Ω–µ–π IS / 30 –¥–Ω–µ–π OOS")
		print()
		print("‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Bybit API: ~1000 —Å–≤–µ—á–µ–π –º–∞–∫—Å–∏–º—É–º")
		print("  ‚Ä¢ 15m ‚Üí –¥–æ 10 –¥–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏")
		print("  ‚Ä¢ 1h ‚Üí –¥–æ 40 –¥–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏")
		print("  ‚Ä¢ 4h ‚Üí –¥–æ 160 –¥–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏")
		return
	
	symbol = sys.argv[1]
	interval = sys.argv[2] if len(sys.argv) > 2 else "15m"
	is_hours = int(sys.argv[3]) if len(sys.argv) > 3 else 168  # 7 –¥–Ω–µ–π (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ)
	oos_hours = int(sys.argv[4]) if len(sys.argv) > 4 else 48  # 2 –¥–Ω—è
	balance = float(sys.argv[5]) if len(sys.argv) > 5 else INITIAL_BALANCE
	anchored = "--anchored" in sys.argv
	use_statistical_models = "--statmodels" in sys.argv
	
	optimizer = WalkForwardOptimizer(
		symbol=symbol,
		interval=interval,
		is_period_hours=is_hours,
		oos_period_hours=oos_hours,
		start_balance=balance,
		anchored=anchored,
		use_statistical_models=use_statistical_models
	)
	
	await optimizer.run()


if __name__ == "__main__":
	asyncio.run(main())

