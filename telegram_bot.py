import aiohttp
import asyncio
import json
import html
import math
import threading
from datetime import datetime
from telegram import Update, __version__ as tg_version
from telegram.ext import Application, CommandHandler, ContextTypes
from config import (
	TELEGRAM_TOKEN, OWNER_CHAT_ID, DEFAULT_SYMBOL, DEFAULT_INTERVAL,
	POLL_INTERVAL, POLL_INTERVAL_MIN, POLL_INTERVAL_MAX,
	VOLATILITY_WINDOW, VOLATILITY_THRESHOLD,
	POLL_VOLATILITY_HIGH_THRESHOLD, POLL_VOLATILITY_LOW_THRESHOLD, VOLATILITY_ALERT_COOLDOWN,
	INITIAL_BALANCE, STRATEGY_MODE, ADX_WINDOW,
	MODE_MEAN_REVERSION, MODE_TREND_FOLLOWING, MODE_TRANSITION,
	USE_STATISTICAL_MODELS
)
from signal_logger import log_signal
from data_provider import DataProvider
from signal_generator import SignalGenerator
from paper_trader import PaperTrader
from logger import logger
from database import db
from telegram_handlers import TelegramHandlers


class TelegramBot:
	def __init__(self, token: str, default_symbol: str = "BTCUSDT", default_interval: str = "1m"):
		if token is None:
			raise RuntimeError("TELEGRAM_TOKEN not set")
		self.token = token
		self.default_symbol = default_symbol
		self.default_interval = default_interval
		self.tracked_symbols: set[str] = set()
		
		# –ù–û–í–û–ï: Lock –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è race condition –≤ paper_trader –æ–ø–µ—Ä–∞—Ü–∏—è—Ö
		self.paper_trader_lock = threading.Lock()
		
		# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
		if OWNER_CHAT_ID:
			try:
				self.owner_chat_id = int(OWNER_CHAT_ID)
				logger.info(f"–í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞: {self.owner_chat_id}")
			except ValueError:
				logger.error("OWNER_CHAT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
				self.owner_chat_id = None
		else:
			logger.warning("OWNER_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ .env –¥–ª—è –∑–∞—â–∏—Ç—ã.")
			self.owner_chat_id = None
		
		self._load_tracked_symbols()
		self.last_signals: dict[str, str] = {}
		self.last_volatility_alert: dict[str, float] = {}
		self.last_volatility_alert_time: dict[str, float] = {}  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
		self.current_poll_interval = POLL_INTERVAL  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
		
		# Paper Trading
		self.paper_trader = PaperTrader()  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç INITIAL_BALANCE –∏–∑ config
		self.paper_trader.load_state()
		
		# –ì–∏–±—Ä–∏–¥–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
		self.symbol_modes: dict[str, str] = {}  # symbol -> "MR", "TF", "TRANSITION"
		self.symbol_mode_times: dict[str, float] = {}  # symbol -> –≤—Ä–µ–º—è –≤ —Ä–µ–∂–∏–º–µ (—á–∞—Å—ã)
		self.symbol_mode_updates: dict[str, datetime] = {}  # symbol -> –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
		
		# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –ü–ï–†–ï–î —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
		self.handlers = TelegramHandlers(self)
		
		# –¢–µ–ø–µ—Ä—å –º–æ–∂–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
		self.application = Application.builder().token(self.token).build()
		self._register_handlers()

	def _is_authorized(self, update: Update) -> bool:
		"""–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞"""
		if self.owner_chat_id is None:
			# –ï—Å–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º)
			return True
		return update.effective_chat.id == self.owner_chat_id
	
	def _generate_signal_with_strategy(self, generator: SignalGenerator, symbol: str = None, use_mtf: bool = None) -> dict:
		"""
		–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (STRATEGY_MODE)
		
		Args:
			generator: SignalGenerator —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
			symbol: —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω—É–∂–Ω–∞ –¥–ª—è MTF –∞–Ω–∞–ª–∏–∑–∞)
			use_mtf: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å multi-timeframe –∞–Ω–∞–ª–∏–∑ (–µ—Å–ª–∏ None, –±–µ—Ä—ë—Ç—Å—è –∏–∑ USE_MULTI_TIMEFRAME)
		"""
		from config import USE_MULTI_TIMEFRAME
		
		# –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ MTF
		if use_mtf is None:
			use_mtf = USE_MULTI_TIMEFRAME
		
		# –ï—Å–ª–∏ MTF –≤–∫–ª—é—á–µ–Ω –∏ —Å–∏–º–≤–æ–ª —É–∫–∞–∑–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º MTF –∞–Ω–∞–ª–∏–∑
		if use_mtf and symbol and hasattr(self, 'data_provider'):
			try:
				# MTF –∞–Ω–∞–ª–∏–∑ - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
				loop = asyncio.get_event_loop()
				return loop.run_until_complete(
					generator.generate_signal_multi_timeframe(
						data_provider=self.data_provider,
						symbol=symbol,
						strategy=STRATEGY_MODE
					)
				)
			except Exception as e:
				logger.error(f"–û—à–∏–±–∫–∞ MTF –∞–Ω–∞–ª–∏–∑–∞: {e}, fallback –Ω–∞ single TF")
				# Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –æ—à–∏–±–∫–µ
		
		# –û–±—ã—á–Ω—ã–π single-timeframe –∞–Ω–∞–ª–∏–∑
		try:
			if STRATEGY_MODE == "MEAN_REVERSION":
				return generator.generate_signal_mean_reversion()
			elif STRATEGY_MODE == "HYBRID":
				# –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
				symbol = symbol or self.default_symbol
				last_mode = self.symbol_modes.get(symbol)
				last_mode_time = self.symbol_mode_times.get(symbol, 0)
				
				# –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ —Ä–µ–∂–∏–º–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
				if symbol in self.symbol_mode_updates:
					time_diff = (datetime.now() - self.symbol_mode_updates[symbol]).total_seconds() / 3600
					last_mode_time += time_diff
					self.symbol_mode_times[symbol] = last_mode_time
				
				result = generator.generate_signal_hybrid(
					last_mode=last_mode,
					last_mode_time=last_mode_time
				)
				
				# –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∂–∏–º –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
				active_mode = result.get("active_mode")
				if active_mode and active_mode in [MODE_MEAN_REVERSION, MODE_TREND_FOLLOWING, MODE_TRANSITION]:
					if active_mode != last_mode:
						# –†–µ–∂–∏–º –∏–∑–º–µ–Ω–∏–ª—Å—è - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è
						old_mode = last_mode
						self.symbol_modes[symbol] = active_mode
						self.symbol_mode_times[symbol] = 0
						logger.info(f"üîÑ –°–ú–ï–ù–ê –†–ï–ñ–ò–ú–ê {symbol}: {old_mode} ‚Üí {active_mode}, –≤—Ä–µ–º—è —Å–±—Ä–æ—à–µ–Ω–æ")
					else:
						# –†–µ–∂–∏–º –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è - –≤—Ä–µ–º—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å—Å—è
						logger.info(f"‚è± –†–ï–ñ–ò–ú –ù–ï –ò–ó–ú–ï–ù–ò–õ–°–Ø {symbol}: {active_mode}, –≤—Ä–µ–º—è –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è: {last_mode_time:.2f}h")
				
				# –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
				self.symbol_mode_updates[symbol] = datetime.now()
				return result
			else:  # TREND_FOLLOWING (default)
				return generator.generate_signal()
		except Exception as e:
			logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
			# –í–æ–∑–≤—Ä–∞—â–∞–µ–º HOLD –ø—Ä–∏ –æ—à–∏–±–∫–µ
			return {
				"signal": "HOLD",
				"reasons": [f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {str(e)}"],
				"price": float(generator.df["close"].iloc[-1]) if not generator.df.empty else 0,
				"market_regime": "NONE",
				"bullish_votes": 0,
				"bearish_votes": 0,
				"vote_delta": 0,
				"filters_passed": 0,
				"short_enabled": False,
				"short_conditions": [],
				"indicators": {
					"RSI": "–Ω/–¥",
					"ADX": "–Ω/–¥",
					"MACD": "–Ω/–¥"
				}
			}
	
	def _register_handlers(self):
		# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
		self.application.add_handler(CommandHandler("start", self.handlers.start))
		self.application.add_handler(CommandHandler("help", self.handlers.help))
		self.application.add_handler(CommandHandler("status", self.handlers.status))
		self.application.add_handler(CommandHandler("analyze", self.handlers.analyze))
		self.application.add_handler(CommandHandler("mtf_signal", self.handlers.mtf_signal))
		self.application.add_handler(CommandHandler("add", self.handlers.add_symbol))
		self.application.add_handler(CommandHandler("remove", self.handlers.remove_symbol))
		self.application.add_handler(CommandHandler("list", self.handlers.list_symbols))
		self.application.add_handler(CommandHandler("settings", self.handlers.settings))
		
		# Paper Trading
		self.application.add_handler(CommandHandler("paper_start", self.handlers.paper_start))
		self.application.add_handler(CommandHandler("paper_stop", self.handlers.paper_stop))
		self.application.add_handler(CommandHandler("paper_status", self.handlers.paper_status))
		self.application.add_handler(CommandHandler("paper_balance", self.handlers.paper_balance))
		self.application.add_handler(CommandHandler("paper_trades", self.handlers.paper_trades))
		self.application.add_handler(CommandHandler("paper_reset", self.handlers.paper_reset))
		self.application.add_handler(CommandHandler("paper_backtest", self.handlers.paper_backtest))
		self.application.add_handler(CommandHandler("paper_debug", self.handlers.paper_debug))
		self.application.add_handler(CommandHandler("paper_candidates", self.handlers.paper_candidates))
		self.application.add_handler(CommandHandler("paper_force_buy", self.handlers.paper_force_buy))
		self.application.add_handler(CommandHandler("paper_force_sell", self.handlers.paper_force_sell))
		
		# Kelly Criterion –∏ Averaging
		self.application.add_handler(CommandHandler("kelly_info", self.handlers.kelly_info))
		self.application.add_handler(CommandHandler("averaging_status", self.handlers.averaging_status))
		
		# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ (v5.5)
		self.application.add_handler(CommandHandler("signal_stats", self.handlers.signal_stats))
		self.application.add_handler(CommandHandler("signal_analysis", self.handlers.signal_analysis))

	# -----------------------------
	# –†–∞–±–æ—Ç–∞ —Å –ë–î
	# -----------------------------
	def _load_tracked_symbols(self):
		try:
			# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î
			symbols = db.get_tracked_symbols()
			self.tracked_symbols = set(symbols)
			
			# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
			settings = db.get_bot_settings()
			if settings:
				self.chat_id = settings.chat_id
				self.poll_interval = settings.poll_interval
				self.volatility_window = settings.volatility_window
				self.volatility_threshold = settings.volatility_threshold
			else:
				self.chat_id = None
				self.poll_interval = POLL_INTERVAL
				self.volatility_window = VOLATILITY_WINDOW
				self.volatility_threshold = VOLATILITY_THRESHOLD
			
			logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.tracked_symbols)} –ø–∞—Ä –∏–∑ –ë–î")
			
		except Exception as e:
			logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –ë–î: {e}")
			self.tracked_symbols = set()
			self.chat_id = None
			self.poll_interval = POLL_INTERVAL
			self.volatility_window = VOLATILITY_WINDOW
			self.volatility_threshold = VOLATILITY_THRESHOLD

	def _save_tracked_symbols(self):
		try:
			# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
			# –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –ë–î
			db_symbols = set(db.get_tracked_symbols())
			
			# –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ self.tracked_symbols
			for symbol in db_symbols:
				if symbol not in self.tracked_symbols:
					db.remove_tracked_symbol(symbol)
			
			# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
			for symbol in self.tracked_symbols:
				if symbol not in db_symbols:
					db.add_tracked_symbol(symbol)
			
			# –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
			if self.chat_id:
				db.save_bot_settings(
					chat_id=self.chat_id,
					poll_interval=self.poll_interval,
					volatility_window=self.volatility_window,
					volatility_threshold=self.volatility_threshold
				)
			
		except Exception as e:
			logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
			raise

	def _calculate_adaptive_poll_interval(self, volatilities: list[float]) -> int:
		"""–í—ã—á–∏—Å–ª—è–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
		if not volatilities:
			return POLL_INTERVAL
		
		avg_volatility = sum(abs(v) for v in volatilities) / len(volatilities)
		
		# –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–µ (—Å–Ω–∏–∂–∞–µ–º —Å–ø–∞–º)
		if avg_volatility >= POLL_VOLATILITY_HIGH_THRESHOLD:
			interval = POLL_INTERVAL_MAX
			logger.info(f"–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å {avg_volatility*100:.2f}%, —É–≤–µ–ª–∏—á–∏–≤–∞—é –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ {interval}—Å")
		# –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —á–∞—â–µ
		elif avg_volatility <= POLL_VOLATILITY_LOW_THRESHOLD:
			interval = POLL_INTERVAL_MIN
			logger.info(f"–ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å {avg_volatility*100:.2f}%, –∏–Ω—Ç–µ—Ä–≤–∞–ª {interval}—Å")
		# –£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - –ª–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
		else:
			# –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –º–µ–∂–¥—É MIN –∏ MAX
			ratio = (avg_volatility - POLL_VOLATILITY_LOW_THRESHOLD) / (POLL_VOLATILITY_HIGH_THRESHOLD - POLL_VOLATILITY_LOW_THRESHOLD)
			interval = int(POLL_INTERVAL_MIN + (POLL_INTERVAL_MAX - POLL_INTERVAL_MIN) * ratio)
			logger.info(f"–£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å {avg_volatility*100:.2f}%, –∏–Ω—Ç–µ—Ä–≤–∞–ª {interval}—Å")
		
		return interval

	# -------------------------
	# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å retry
	# -------------------------
	async def _send_telegram_message_with_retry(self, message: str, max_retries: int = 3):
		"""–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å retry –ª–æ–≥–∏–∫–æ–π"""
		import asyncio
		from telegram.error import TimedOut, NetworkError
		
		for attempt in range(max_retries):
			try:
				await self.application.bot.send_message(
					chat_id=self.chat_id, 
					text=message, 
					parse_mode="HTML"
				)
				logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–ø–æ–ø—ã—Ç–∫–∞ %d)", attempt + 1)
				return
			except (TimedOut, NetworkError) as e:
				if attempt < max_retries - 1:
					wait_time = 2 ** attempt  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff: 1s, 2s, 4s
					logger.warning("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ø–æ–ø—ã—Ç–∫–∞ %d/%d): %s. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ %ds", 
						attempt + 1, max_retries, e, wait_time)
					await asyncio.sleep(wait_time)
				else:
					logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫: %s", max_retries, e)
			except Exception as e:
				logger.error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", e)
				break

	# -------------------------
	# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞
	# -------------------------
	async def _background_task(self):
		import time
		
		while True:
			if not self.tracked_symbols:
				await asyncio.sleep(self.current_poll_interval)
				continue
			if self.chat_id is None:
				await asyncio.sleep(self.current_poll_interval)
				continue
			
			# –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–∏–º –±–∞—Ç—á–µ–º
			all_messages = []
			
			# –î–ª—è paper trading —Å–æ–±–∏—Ä–∞–µ–º —Ü–µ–Ω—ã –∏ —Å–∏–≥–Ω–∞–ª—ã
			current_prices = {}
			trading_signals = {}
			
			# –î–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
			volatilities = []
			
			async with aiohttp.ClientSession() as session:
				provider = DataProvider(session)
				
				# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ paper trading
				if self.paper_trader.is_running and self.paper_trader.positions:
					for symbol in list(self.paper_trader.positions.keys()):
						try:
							klines = await provider.fetch_klines(symbol=symbol, interval=self.default_interval, limit=1)
							df = provider.klines_to_dataframe(klines)
							if not df.empty:
								current_prices[symbol] = float(df['close'].iloc[-1])
						except Exception as e:
							logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
					
					# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å—ã –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã (—Å lock)
					with self.paper_trader_lock:
						actions = self.paper_trader.check_positions(current_prices)
					for action in actions:
						trade_type = action['type']
						symbol = action['symbol']
						price = action['price']
						profit = action.get('profit', 0)
						profit_percent = action.get('profit_percent', 0)
						
						if trade_type == "STOP-LOSS":
							msg = f"üõë <b>STOP-LOSS</b> {symbol}\n  –¶–µ–Ω–∞: {self.handlers.formatters.format_price(price)}\n  –£–±—ã—Ç–æ–∫: ${profit:+.2f} ({profit_percent:+.2f}%)"
						elif trade_type == "PARTIAL-TP":
							msg = f"üíé <b>PARTIAL TP</b> {symbol}\n  –¶–µ–Ω–∞: {self.handlers.formatters.format_price(price)}\n  –ü—Ä–∏–±—ã–ª—å: ${profit:+.2f} ({profit_percent:+.2f}%)\n  –ó–∞–∫—Ä—ã—Ç–æ: 50%, –∞–∫—Ç–∏–≤–µ–Ω trailing stop"
						elif trade_type == "TRAILING-STOP":
							msg = f"üîª <b>TRAILING STOP</b> {symbol}\n  –¶–µ–Ω–∞: {self.handlers.formatters.format_price(price)}\n  –ü—Ä–∏–±—ã–ª—å: ${profit:+.2f} ({profit_percent:+.2f}%)"
						else:
							msg = f"üìä <b>{trade_type}</b> {symbol} @ {self.handlers.formatters.format_price(price)}"
							
						all_messages.append(msg)
						logger.info(f"[PAPER] {trade_type} {symbol} @ {self.handlers.formatters.format_price(price)}")
						
						# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –±—ã–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è
						if actions:
							self.paper_trader.save_state()
				
				# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã
				for symbol in self.tracked_symbols:
					try:
						klines = await provider.fetch_klines(symbol=symbol, interval=self.default_interval, limit=500)
						df = provider.klines_to_dataframe(klines)
						if df.empty:
							logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è %s, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", symbol)
							continue

						generator = SignalGenerator(df, use_statistical_models=USE_STATISTICAL_MODELS)
						generator.compute_indicators()
						result = self._generate_signal_with_strategy(generator, symbol=symbol)
						signal = result["signal"]
						current_price = float(df['close'].iloc[-1])
						
						# –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è paper trading
						current_prices[symbol] = current_price
						trading_signals[symbol] = result

						last = self.last_signals.get(symbol)
						if last != signal:
							text = self.handlers.formatters.format_analysis(result, symbol, self.default_interval)
							all_messages.append(text)
							self.last_signals[symbol] = signal
							log_signal(symbol, self.default_interval, signal, result["reasons"], result["price"])
							logger.info("–°–∏–≥–Ω–∞–ª %s: %s", symbol, signal)

						# -------------------
						# –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
						# -------------------
						if len(df) >= self.volatility_window + 1:
							recent_df = df.iloc[-self.volatility_window:]
							# –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å —Ü–µ–Ω–æ–π N —Å–≤–µ—á–µ–π –Ω–∞–∑–∞–¥
							prev_close = df["close"].iloc[-(self.volatility_window + 1)]
							current_close = df["close"].iloc[-1]
							change = (current_close - prev_close) / prev_close
							
							# –°–æ–±–∏—Ä–∞–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
							volatilities.append(change)

							# –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
							current_time = time.time()
							last_alert_time = self.last_volatility_alert_time.get(symbol, 0)
							time_since_last_alert = current_time - last_alert_time
							
							# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
							# 1. –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞
							# 2. –ü—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (cooldown)
							# 3. –¶–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
							last_alert_price = self.last_volatility_alert.get(symbol)
							price_changed_significantly = last_alert_price is None or abs(current_close - last_alert_price) / last_alert_price >= self.volatility_threshold * 0.5
							
							if abs(change) >= self.volatility_threshold and time_since_last_alert >= VOLATILITY_ALERT_COOLDOWN and price_changed_significantly:
								text = self.handlers.formatters.format_volatility(symbol, self.default_interval, change, current_close, self.volatility_window)
								all_messages.append(text)
								self.last_volatility_alert[symbol] = current_close
								self.last_volatility_alert_time[symbol] = current_time
								logger.info("–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å %s: %.2f%% (cooldown: %.1f –º–∏–Ω)", symbol, change*100, VOLATILITY_ALERT_COOLDOWN/60)

					except Exception as e:
						logger.error("–û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ %s: %s", symbol, e)
				
			# ==========================================
			# Paper Trading: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
			# ==========================================
			if self.paper_trader.is_running:
				from signal_diagnostics import diagnostics
				
				# –ù–û–í–û–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ–¥ lock –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è race condition
				with self.paper_trader_lock:
					for symbol, result in trading_signals.items():
						signal = result["signal"]
						price = current_prices.get(symbol)
						
						if price is None:
							continue
						
						# –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ (v5.5 HYBRID)
						signal_strength = abs(result.get("bullish_votes", 0) - result.get("bearish_votes", 0))
						atr = result.get("ATR", 0.0)
						bullish_votes = result.get("bullish_votes", 0)
						bearish_votes = result.get("bearish_votes", 0)
						active_mode = result.get("active_mode", "UNKNOWN")
						reasons = result.get("reasons", [])
						position_size_percent = result.get("position_size_percent", None)
						
						# BUY —Å–∏–≥–Ω–∞–ª - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
						if signal == "BUY" and symbol not in self.paper_trader.positions:
							can_buy = self.paper_trader.can_open_position(symbol)
							block_reason = None if can_buy else "–õ–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π –∏–ª–∏ –±–∞–ª–∞–Ω—Å"
							
							# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
							diagnostics.log_signal_generation(
								symbol=symbol,
								signal_result=result,
								price=price,
								can_buy=can_buy,
								block_reason=block_reason
							)
							
							if can_buy:
								trade_info = self.paper_trader.open_position(
									symbol=symbol,
									price=price,
									signal_strength=signal_strength,
									atr=atr,
									position_size_percent=position_size_percent,
									reasons=reasons,
									active_mode=active_mode,
									bullish_votes=bullish_votes,
									bearish_votes=bearish_votes
								)
								if trade_info:
									# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ position_size_percent
									position_size_display = f"{position_size_percent*100:.0f}%" if position_size_percent is not None else "N/A"
									
									msg = (
										f"üü¢ <b>–ö–£–ü–ò–õ</b> {symbol} ({active_mode})\n"
										f"  –¶–µ–Ω–∞: {self.handlers.formatters.format_price(price)}\n"
										f"  –í–ª–æ–∂–µ–Ω–æ: ${trade_info['invest_amount']:.2f} ({position_size_display})\n"
										f"  –ì–æ–ª–æ—Å–∞: +{bullish_votes}/-{bearish_votes} (Œî{bullish_votes-bearish_votes:+d})\n"
										f"  –ë–∞–ª–∞–Ω—Å: ${trade_info['balance_after']:.2f}"
									)
									all_messages.append(msg)
								self.paper_trader.save_state()
					
						# BUY —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–π LONG –ø–æ–∑–∏—Ü–∏–∏ - –¥–æ–∫—É–ø–∞–Ω–∏–µ
						elif signal == "BUY" and symbol in self.paper_trader.positions:
							adx = result.get("ADX", 0.0)
							trade_info = self.paper_trader.average_position(
								symbol=symbol,
								price=price,
								signal_strength=signal_strength,
								adx=adx,
								atr=atr,
								reason="SIGNAL"
							)
							if trade_info:
								mode = trade_info.get("type", "AVERAGE")
								msg = (
									f"üü° <b>–î–û–ö–£–ü–ò–õ</b> {symbol} ({mode})\n"
									f"  –¶–µ–Ω–∞: {self.handlers.formatters.format_price(price)}\n"
									f"  –î–æ–∫—É–ø–ª–µ–Ω–æ: ${trade_info['invest_amount']:.2f}\n"
									f"  –ü–æ–ø—ã—Ç–∫–∞ #{trade_info['averaging_count']}\n"
									f"  –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {self.handlers.formatters.format_price(trade_info['average_entry_price'])}\n"
									f"  –ë–∞–ª–∞–Ω—Å: ${trade_info['balance_after']:.2f}"
								)
								all_messages.append(msg)
								self.paper_trader.save_state()
				
						# SELL —Å–∏–≥–Ω–∞–ª - –∑–∞–∫—Ä—ã–≤–∞–µ–º LONG –ø–æ–∑–∏—Ü–∏—é (–µ—Å–ª–∏ –Ω–µ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞)
						elif signal == "SELL" and symbol in self.paper_trader.positions:
							position = self.paper_trader.positions[symbol]
							if not position.partial_closed:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞
								trade_info = self.paper_trader.close_position(symbol, price, "SELL")
								if trade_info:
									profit_emoji = "üìà" if trade_info['profit'] > 0 else "üìâ"
									msg = (
										f"üî¥ <b>–ü–†–û–î–ê–õ</b> {symbol}\n"
										f"  –¶–µ–Ω–∞: {self.handlers.formatters.format_price(price)}\n"
										f"  {profit_emoji} –ü—Ä–∏–±—ã–ª—å: ${trade_info['profit']:+.2f} ({trade_info['profit_percent']:+.2f}%)\n"
										f"  –ë–∞–ª–∞–Ω—Å: ${trade_info['balance_after']:.2f}"
									)
									all_messages.append(msg)
									self.paper_trader.save_state()
					
					
						# HOLD/SELL - –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (–µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏)
						else:
							if symbol not in self.paper_trader.positions:
								diagnostics.log_signal_generation(
									symbol=symbol,
									signal_result=result,
									price=price,
									can_buy=False,
									block_reason=f"–°–∏–≥–Ω–∞–ª {signal}, –Ω–µ BUY"
								)
			
			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–∏–º –±–∞—Ç—á–µ–º
			if all_messages:
				combined_message = "\n\n".join(all_messages)
				await self._send_telegram_message_with_retry(combined_message)
			
			# –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
			if volatilities:
				self.current_poll_interval = self._calculate_adaptive_poll_interval(volatilities)
			else:
				self.current_poll_interval = POLL_INTERVAL
			
			await asyncio.sleep(self.current_poll_interval)

	# -------------------------
	# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
	# -------------------------
	def run(self):
		logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

		async def start_background(application):
			asyncio.create_task(self._background_task())

		self.application.post_init = start_background
		self.application.run_polling(stop_signals=None)
