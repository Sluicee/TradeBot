import aiohttp
import asyncio
import json
from datetime import datetime
from telegram import Update, __version__ as tg_version
from telegram.ext import Application, CommandHandler, ContextTypes
from config import (
	TELEGRAM_TOKEN, OWNER_CHAT_ID, DEFAULT_SYMBOL, DEFAULT_INTERVAL,
	POLL_INTERVAL, POLL_INTERVAL_MIN, POLL_INTERVAL_MAX,
	VOLATILITY_WINDOW, VOLATILITY_THRESHOLD,
	VOLATILITY_HIGH_THRESHOLD, VOLATILITY_LOW_THRESHOLD, VOLATILITY_ALERT_COOLDOWN,
	INITIAL_BALANCE
)
from signal_logger import log_signal
from data_provider import DataProvider
from signal_generator import SignalGenerator
from paper_trader import PaperTrader
from logger import logger
from database import db
import math

def format_price(price: float) -> str:
	"""–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ–ª–∏—á–∏–Ω—ã"""
	if price >= 1000:
		return f"${price:,.2f}"  # 1,234.56
	elif price >= 1:
		return f"${price:.4f}"  # 12.3456
	elif price >= 0.0001:
		# –î–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ü–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–∞—â–∏–µ —Ü–∏—Ñ—Ä—ã
		decimals = max(4, abs(int(math.log10(abs(price)))) + 3)
		return f"${price:.{decimals}f}"
	else:
		return f"${price:.8f}"  # –°–æ–≤—Å–µ–º –º–∞–ª–µ–Ω—å–∫–∏–µ —Ü–µ–Ω—ã

class TelegramBot:
	def __init__(self, token: str, default_symbol: str = "BTCUSDT", default_interval: str = "1m"):
		if token is None:
			raise RuntimeError("TELEGRAM_TOKEN not set")
		self.token = token
		self.default_symbol = default_symbol
		self.default_interval = default_interval
		self.tracked_symbols: set[str] = set()
		
		# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
		if OWNER_CHAT_ID:
			try:
				self.owner_chat_id = int(OWNER_CHAT_ID)
				logger.info(f"–í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞: {self.owner_chat_id}")
			except ValueError:
				logger.error("OWNER_CHAT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
				self.owner_chat_id = None
		else:
			logger.warning("OWNER_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ .env –¥–ª—è –∑–∞—â–∏—Ç—ã.")
			self.owner_chat_id = None
		
		self._load_tracked_symbols()
		self.application = Application.builder().token(self.token).build()
		self._register_handlers()
		self.last_signals: dict[str, str] = {}
		self.last_volatility_alert: dict[str, float] = {}
		self.last_volatility_alert_time: dict[str, float] = {}  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
		self.current_poll_interval = POLL_INTERVAL  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
		
		# Paper Trading
		self.paper_trader = PaperTrader()  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç INITIAL_BALANCE –∏–∑ config
		self.paper_trader.load_state()

	def _is_authorized(self, update: Update) -> bool:
		"""–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞"""
		if self.owner_chat_id is None:
			# –ï—Å–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º)
			return True
		return update.effective_chat.id == self.owner_chat_id
	
	def _register_handlers(self):
		self.application.add_handler(CommandHandler("start", self.start))
		self.application.add_handler(CommandHandler("help", self.help))
		self.application.add_handler(CommandHandler("status", self.status))
		self.application.add_handler(CommandHandler("analyze", self.analyze))
		self.application.add_handler(CommandHandler("add", self.add_symbol))
		self.application.add_handler(CommandHandler("remove", self.remove_symbol))
		self.application.add_handler(CommandHandler("list", self.list_symbols))
		self.application.add_handler(CommandHandler("settings", self.settings))
		
		# Paper Trading
		self.application.add_handler(CommandHandler("paper_start", self.paper_start))
		self.application.add_handler(CommandHandler("paper_stop", self.paper_stop))
		self.application.add_handler(CommandHandler("paper_status", self.paper_status))
		self.application.add_handler(CommandHandler("paper_balance", self.paper_balance))
		self.application.add_handler(CommandHandler("paper_trades", self.paper_trades))
		self.application.add_handler(CommandHandler("paper_reset", self.paper_reset))
		self.application.add_handler(CommandHandler("paper_backtest", self.paper_backtest))
		self.application.add_handler(CommandHandler("paper_debug", self.paper_debug))
		self.application.add_handler(CommandHandler("paper_candidates", self.paper_candidates))
		self.application.add_handler(CommandHandler("paper_force_buy", self.paper_force_buy))
		
		# Kelly Criterion –∏ Averaging
		self.application.add_handler(CommandHandler("kelly_info", self.kelly_info))
		self.application.add_handler(CommandHandler("averaging_status", self.averaging_status))

	# -----------------------------
	# –†–∞–±–æ—Ç–∞ —Å –ë–î
	# -----------------------------
	def _load_tracked_symbols(self):
		try:
			# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î
			symbols = db.get_tracked_symbols()
			self.tracked_symbols = set(symbols)
			
			# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
			settings = db.get_bot_settings()
			if settings:
				self.chat_id = settings.chat_id
				self.poll_interval = settings.poll_interval
				self.volatility_window = settings.volatility_window
				self.volatility_threshold = settings.volatility_threshold
			else:
				self.chat_id = None
				self.poll_interval = POLL_INTERVAL
				self.volatility_window = VOLATILITY_WINDOW
				self.volatility_threshold = VOLATILITY_THRESHOLD
			
			logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.tracked_symbols)} –ø–∞—Ä –∏–∑ –ë–î")
			
		except Exception as e:
			logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –ë–î: {e}")
			self.tracked_symbols = set()
			self.chat_id = None
			self.poll_interval = POLL_INTERVAL
			self.volatility_window = VOLATILITY_WINDOW
			self.volatility_threshold = VOLATILITY_THRESHOLD

	def _save_tracked_symbols(self):
		try:
			# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
			# –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –ë–î
			db_symbols = set(db.get_tracked_symbols())
			
			# –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ self.tracked_symbols
			for symbol in db_symbols:
				if symbol not in self.tracked_symbols:
					db.remove_tracked_symbol(symbol)
			
			# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
			for symbol in self.tracked_symbols:
				if symbol not in db_symbols:
					db.add_tracked_symbol(symbol)
			
			# –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
			if self.chat_id:
				db.save_bot_settings(
					chat_id=self.chat_id,
					poll_interval=self.poll_interval,
					volatility_window=self.volatility_window,
					volatility_threshold=self.volatility_threshold
				)
			
		except Exception as e:
			logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
			raise

	# -------------------------
	# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞
	# -------------------------
	def format_analysis(self, result, symbol, interval):
		def html_escape(s):
			s = str(s)
			s = s.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace('"', '&quot;')
			return s

		def fmt(val):
			if val is None or (isinstance(val, float) and (math.isnan(val) or math.isinf(val))):
				return '–Ω/–¥'
			return f'{val:.8f}' if isinstance(val, float) else str(val)

		# –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –ø—Ä–∏—á–∏–Ω—É –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é
		main_reason = html_escape(result["reasons"][0]) if result["reasons"] else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
		
		return (
			f"<b>{html_escape(symbol)}</b> {result['signal_emoji']} <b>{html_escape(result['signal'])}</b>\n"
			f"  ‚Çø{fmt(result['price'])} | RSI {fmt(result['RSI'])}\n"
			f"  {main_reason}"
		)

	def format_volatility(self, symbol, interval, change, close_price, window):
		direction = "‚Üë" if change > 0 else "‚Üì"
		return f"<b>{symbol}</b> ‚ö†Ô∏è {change*100:.2f}% {direction} | –¶–µ–Ω–∞: {close_price:.8f}"

	# -------------------------
	# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
	# -------------------------
	async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		if not self._is_authorized(update):
			await update.message.reply_text(
				"üö´ <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
				"–≠—Ç–æ—Ç –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.\n"
				f"–í–∞—à ID: <code>{update.effective_chat.id}</code>\n\n"
				"–ï—Å–ª–∏ —ç—Ç–æ –≤–∞—à –±–æ—Ç, –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π ID –≤ —Ñ–∞–π–ª .env:\n"
				"<code>OWNER_CHAT_ID={}</code>".format(update.effective_chat.id),
				parse_mode="HTML"
			)
			return
		
		text = (
			"<b>üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.</b>\n\n"
			"<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
			"‚Ä¢ /start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
			"‚Ä¢ /help ‚Äî –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
			"‚Ä¢ /status ‚Äî —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã\n"
			"‚Ä¢ /analyze [SYMBOL] [INTERVAL] ‚Äî –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä—ã\n"
			"‚Ä¢ /add SYMBOL ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ\n"
			"‚Ä¢ /remove SYMBOL ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö\n"
			"‚Ä¢ /list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã\n\n"
			"<b>üìä Paper Trading:</b>\n"
			"‚Ä¢ /paper_start [–±–∞–ª–∞–Ω—Å] ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é\n"
			"‚Ä¢ /paper_stop ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏\n"
			"‚Ä¢ /paper_status ‚Äî —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –ø–æ–∑–∏—Ü–∏–∏\n"
			"‚Ä¢ /paper_balance ‚Äî –¥–µ—Ç–∞–ª–∏ –±–∞–ª–∞–Ω—Å–∞\n"
			"‚Ä¢ /paper_trades [N] ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–¥–µ–ª–æ–∫\n"
			"‚Ä¢ /paper_backtest [—á–∞—Å—ã] ‚Äî –±—ã—Å—Ç—Ä–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏\n"
			"‚Ä¢ /paper_debug [SYMBOL] ‚Äî –æ—Ç–ª–∞–¥–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤\n"
			"‚Ä¢ /paper_candidates ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ —Å–¥–µ–ª–∫—É\n"
			"‚Ä¢ /paper_reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏ –∏—Å—Ç–æ—Ä–∏—é"
		)
		await update.message.reply_text(text, parse_mode="HTML")
		
		if self.chat_id is None:
			self.chat_id = update.effective_chat.id
			self._save_tracked_symbols()

	async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		if not self._is_authorized(update):
			await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
			return
		
		text = (
			"<b>üÜò –ü–æ–º–æ—â—å:</b>\n\n"
			"<b>–ê–Ω–∞–ª–∏–∑:</b>\n"
			"‚Ä¢ /analyze SYMBOL INTERVAL ‚Äî –∞–Ω–∞–ª–∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞—Ä—ã\n"
			"‚Ä¢ /add SYMBOL ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ\n"
			"‚Ä¢ /remove SYMBOL ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö\n"
			"‚Ä¢ /list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã\n\n"
			"<b>Paper Trading:</b>\n"
			"‚Ä¢ /paper_start [–±–∞–ª–∞–Ω—Å] ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é\n"
			"‚Ä¢ /paper_stop ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏\n"
			"‚Ä¢ /paper_status ‚Äî —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –ø–æ–∑–∏—Ü–∏–∏\n"
			"‚Ä¢ /paper_balance ‚Äî –¥–µ—Ç–∞–ª–∏ –±–∞–ª–∞–Ω—Å–∞\n"
			"‚Ä¢ /paper_trades [N] ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–¥–µ–ª–æ–∫\n"
			"‚Ä¢ /paper_backtest [—á–∞—Å—ã] ‚Äî –±—ã—Å—Ç—Ä–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏\n"
			"‚Ä¢ /paper_debug [SYMBOL] ‚Äî –æ—Ç–ª–∞–¥–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤\n"
			"‚Ä¢ /paper_candidates ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ —Å–¥–µ–ª–∫—É\n"
			"‚Ä¢ /paper_force_buy [SYMBOL] ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞\n"
			"‚Ä¢ /paper_reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏ –∏—Å—Ç–æ—Ä–∏—é\n\n"
			"<i>–ï—Å–ª–∏ SYMBOL –∏ INTERVAL –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.</i>"
		)
		await update.message.reply_text(text, parse_mode="HTML")

	async def status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		if not self._is_authorized(update):
			await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
			return
		
		symbols = ", ".join(self.tracked_symbols) if self.tracked_symbols else "–Ω–µ—Ç"
		text = (
			f"<b>‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>\n"
			f"‚Ä¢ –í–µ—Ä—Å–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: python-telegram-bot {tg_version}\n"
			f"‚Ä¢ –°–∏–º–≤–æ–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {self.default_symbol}\n"
			f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {self.default_interval}\n"
			f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã: {symbols}\n"
			f"‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ OK"
		)
		await update.message.reply_text(text, parse_mode="HTML")
		
		if self.chat_id is None:
			self.chat_id = update.effective_chat.id
			self._save_tracked_symbols()

	# -------------------------
	# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–∏
	# -------------------------
	async def add_symbol(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		if not self._is_authorized(update):
			await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
			return
		
		if not context.args:
			await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add SYMBOL")
			return
		symbol = context.args[0].upper()
		if symbol in self.tracked_symbols:
			await update.message.reply_text(f"‚ÑπÔ∏è {symbol} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.")
		else:
			self.tracked_symbols.add(symbol)
			self._save_tracked_symbols()
			await update.message.reply_text(f"‚úÖ {symbol} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.")

	async def remove_symbol(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		if not self._is_authorized(update):
			await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
			return
		
		if not context.args:
			await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove SYMBOL")
			return
		symbol = context.args[0].upper()
		if symbol in self.tracked_symbols:
			self.tracked_symbols.remove(symbol)
			self._save_tracked_symbols()
			await update.message.reply_text(f"‚úÖ {symbol} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.")
		else:
			await update.message.reply_text(f"‚ÑπÔ∏è {symbol} –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.")

	async def list_symbols(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		if not self._is_authorized(update):
			await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
			return
		
		if self.tracked_symbols:
			text = "<b>üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã:</b>\n" + "\n".join([f"‚Ä¢ {s}" for s in self.tracked_symbols])
		else:
			text = "üìã –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä –ø—É—Å—Ç."
		await update.message.reply_text(text, parse_mode="HTML")


	# -------------------------
	# –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä—ã
	# -------------------------
	async def analyze(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		if not self._is_authorized(update):
			await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
			return
		
		args = context.args or []
		symbol = args[0].upper() if len(args) >= 1 else self.default_symbol
		interval = args[1] if len(args) >= 2 else self.default_interval

		msg = await update.message.reply_text(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} {interval}...")

		try:
			async with aiohttp.ClientSession() as session:
				provider = DataProvider(session)
				klines = await provider.fetch_klines(symbol=symbol, interval=interval, limit=500)
				df = provider.klines_to_dataframe(klines)

			if df.empty:
				await msg.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç ByBIT.")
				return

			generator = SignalGenerator(df)
			generator.compute_indicators()
			result = generator.generate_signal()

			text = self.format_analysis(result, symbol, interval)
			await msg.edit_text(text, parse_mode="HTML")
		except Exception as e:
			await msg.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")

	def _calculate_adaptive_poll_interval(self, volatilities: list[float]) -> int:
		"""–í—ã—á–∏—Å–ª—è–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
		if not volatilities:
			return POLL_INTERVAL
		
		avg_volatility = sum(abs(v) for v in volatilities) / len(volatilities)
		
		# –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–µ (—Å–Ω–∏–∂–∞–µ–º —Å–ø–∞–º)
		if avg_volatility >= VOLATILITY_HIGH_THRESHOLD:
			interval = POLL_INTERVAL_MAX
			logger.info(f"–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å {avg_volatility*100:.2f}%, —É–≤–µ–ª–∏—á–∏–≤–∞—é –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ {interval}—Å")
		# –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —á–∞—â–µ
		elif avg_volatility <= VOLATILITY_LOW_THRESHOLD:
			interval = POLL_INTERVAL_MIN
			logger.info(f"–ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å {avg_volatility*100:.2f}%, –∏–Ω—Ç–µ—Ä–≤–∞–ª {interval}—Å")
		# –£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - –ª–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
		else:
			# –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –º–µ–∂–¥—É MIN –∏ MAX
			ratio = (avg_volatility - VOLATILITY_LOW_THRESHOLD) / (VOLATILITY_HIGH_THRESHOLD - VOLATILITY_LOW_THRESHOLD)
			interval = int(POLL_INTERVAL_MIN + (POLL_INTERVAL_MAX - POLL_INTERVAL_MIN) * ratio)
			logger.info(f"–£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å {avg_volatility*100:.2f}%, –∏–Ω—Ç–µ—Ä–≤–∞–ª {interval}—Å")
		
		return interval

	# -------------------------
	# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞
	# -------------------------
	async def _background_task(self):
		import time
		
		while True:
			if not self.tracked_symbols:
				await asyncio.sleep(self.current_poll_interval)
				continue
			if self.chat_id is None:
				await asyncio.sleep(self.current_poll_interval)
				continue
			
			# –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–∏–º –±–∞—Ç—á–µ–º
			all_messages = []
			
			# –î–ª—è paper trading —Å–æ–±–∏—Ä–∞–µ–º —Ü–µ–Ω—ã –∏ —Å–∏–≥–Ω–∞–ª—ã
			current_prices = {}
			trading_signals = {}
			
			# –î–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
			volatilities = []
			
			async with aiohttp.ClientSession() as session:
				provider = DataProvider(session)
				
				# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ paper trading
				if self.paper_trader.is_running and self.paper_trader.positions:
					for symbol in list(self.paper_trader.positions.keys()):
						try:
							klines = await provider.fetch_klines(symbol=symbol, interval=self.default_interval, limit=1)
							df = provider.klines_to_dataframe(klines)
							if not df.empty:
								current_prices[symbol] = float(df['close'].iloc[-1])
						except Exception as e:
							logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
					
					# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å—ã –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã
					actions = self.paper_trader.check_positions(current_prices)
					for action in actions:
						trade_type = action['type']
						symbol = action['symbol']
						price = action['price']
						profit = action.get('profit', 0)
						profit_percent = action.get('profit_percent', 0)
						
						if trade_type == "STOP-LOSS":
							msg = f"üõë <b>STOP-LOSS</b> {symbol}\n  –¶–µ–Ω–∞: {format_price(price)}\n  –£–±—ã—Ç–æ–∫: ${profit:+.2f} ({profit_percent:+.2f}%)"
						elif trade_type == "PARTIAL-TP":
							msg = f"üíé <b>PARTIAL TP</b> {symbol}\n  –¶–µ–Ω–∞: {format_price(price)}\n  –ü—Ä–∏–±—ã–ª—å: ${profit:+.2f} ({profit_percent:+.2f}%)\n  –ó–∞–∫—Ä—ã—Ç–æ: 50%, –∞–∫—Ç–∏–≤–µ–Ω trailing stop"
						elif trade_type == "TRAILING-STOP":
							msg = f"üîª <b>TRAILING STOP</b> {symbol}\n  –¶–µ–Ω–∞: {format_price(price)}\n  –ü—Ä–∏–±—ã–ª—å: ${profit:+.2f} ({profit_percent:+.2f}%)"
						else:
							msg = f"üìä <b>{trade_type}</b> {symbol} @ {format_price(price)}"
							
						all_messages.append(msg)
						logger.info(f"[PAPER] {trade_type} {symbol} @ {format_price(price)}")
						
					# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –±—ã–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è
					if actions:
						self.paper_trader.save_state()
				
				# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã
				for symbol in self.tracked_symbols:
					try:
						klines = await provider.fetch_klines(symbol=symbol, interval=self.default_interval, limit=500)
						df = provider.klines_to_dataframe(klines)
						if df.empty:
							logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è %s, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", symbol)
							continue

						generator = SignalGenerator(df)
						generator.compute_indicators()
						result = generator.generate_signal()
						signal = result["signal"]
						current_price = float(df['close'].iloc[-1])
						
						# –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è paper trading
						current_prices[symbol] = current_price
						trading_signals[symbol] = result

						last = self.last_signals.get(symbol)
						if last != signal:
							text = self.format_analysis(result, symbol, self.default_interval)
							all_messages.append(text)
							self.last_signals[symbol] = signal
							log_signal(symbol, self.default_interval, signal, result["reasons"], result["price"])
							logger.info("–°–∏–≥–Ω–∞–ª %s: %s", symbol, signal)

						# -------------------
						# –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
						# -------------------
						if len(df) >= self.volatility_window + 1:
							recent_df = df.iloc[-self.volatility_window:]
							# –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å —Ü–µ–Ω–æ–π N —Å–≤–µ—á–µ–π –Ω–∞–∑–∞–¥
							prev_close = df["close"].iloc[-(self.volatility_window + 1)]
							current_close = df["close"].iloc[-1]
							change = (current_close - prev_close) / prev_close
							
							# –°–æ–±–∏—Ä–∞–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
							volatilities.append(change)

							# –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
							current_time = time.time()
							last_alert_time = self.last_volatility_alert_time.get(symbol, 0)
							time_since_last_alert = current_time - last_alert_time
							
							# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
							# 1. –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞
							# 2. –ü—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (cooldown)
							# 3. –¶–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
							last_alert_price = self.last_volatility_alert.get(symbol)
							price_changed_significantly = last_alert_price is None or abs(current_close - last_alert_price) / last_alert_price >= self.volatility_threshold * 0.5
							
							if abs(change) >= self.volatility_threshold and time_since_last_alert >= VOLATILITY_ALERT_COOLDOWN and price_changed_significantly:
								text = self.format_volatility(symbol, self.default_interval, change, current_close, self.volatility_window)
								all_messages.append(text)
								self.last_volatility_alert[symbol] = current_close
								self.last_volatility_alert_time[symbol] = current_time
								logger.info("–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å %s: %.2f%% (cooldown: %.1f –º–∏–Ω)", symbol, change*100, VOLATILITY_ALERT_COOLDOWN/60)

					except Exception as e:
						logger.error("–û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ %s: %s", symbol, e)
				
				# ==========================================
				# Paper Trading: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
				# ==========================================
				if self.paper_trader.is_running:
					for symbol, result in trading_signals.items():
						signal = result["signal"]
						price = current_prices.get(symbol)
						
						if price is None:
							continue
						
						# –ü–æ–ª—É—á–∞–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞ –∏ ATR
						signal_strength = abs(result.get("bullish_votes", 0) - result.get("bearish_votes", 0))
						atr = result.get("ATR", 0.0)
						
						# BUY —Å–∏–≥–Ω–∞–ª - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
						if signal == "BUY" and symbol not in self.paper_trader.positions:
							if self.paper_trader.can_open_position(symbol):
								trade_info = self.paper_trader.open_position(symbol, price, signal_strength, atr)
								if trade_info:
									msg = (
										f"üü¢ <b>–ö–£–ü–ò–õ</b> {symbol}\n"
										f"  –¶–µ–Ω–∞: {format_price(price)}\n"
										f"  –í–ª–æ–∂–µ–Ω–æ: ${trade_info['invest_amount']:.2f}\n"
										f"  –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {signal_strength}\n"
										f"  –ë–∞–ª–∞–Ω—Å: ${trade_info['balance_after']:.2f}"
									)
									all_messages.append(msg)
									self.paper_trader.save_state()
						
						# SELL —Å–∏–≥–Ω–∞–ª - –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é (–µ—Å–ª–∏ –Ω–µ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞)
						elif signal == "SELL" and symbol in self.paper_trader.positions:
							position = self.paper_trader.positions[symbol]
							if not position.partial_closed:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞
								trade_info = self.paper_trader.close_position(symbol, price, "SELL")
								if trade_info:
									profit_emoji = "üìà" if trade_info['profit'] > 0 else "üìâ"
									msg = (
										f"üî¥ <b>–ü–†–û–î–ê–õ</b> {symbol}\n"
										f"  –¶–µ–Ω–∞: {format_price(price)}\n"
										f"  {profit_emoji} –ü—Ä–∏–±—ã–ª—å: ${trade_info['profit']:+.2f} ({trade_info['profit_percent']:+.2f}%)\n"
										f"  –ë–∞–ª–∞–Ω—Å: ${trade_info['balance_after']:.2f}"
									)
									all_messages.append(msg)
									self.paper_trader.save_state()
			
			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–∏–º –±–∞—Ç—á–µ–º
			if all_messages:
				combined_message = "\n\n".join(all_messages)
				await self.application.bot.send_message(chat_id=self.chat_id, text=combined_message, parse_mode="HTML")
				logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ %d –∏–∑–º–µ–Ω–µ–Ω–∏–π", len(all_messages))
			
			# –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
			if volatilities:
				self.current_poll_interval = self._calculate_adaptive_poll_interval(volatilities)
			else:
				self.current_poll_interval = POLL_INTERVAL
			
			await asyncio.sleep(self.current_poll_interval)

	# -------------------------
	# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
	# -------------------------
	async def settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		if not self._is_authorized(update):
			await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
			return
		
		args = context.args
		if not args:
			text = (
				f"<b>‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
				f"<b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞:</b>\n"
				f"  ‚Ä¢ –¢–µ–∫—É—â–∏–π: {self.current_poll_interval} —Å–µ–∫\n"
				f"  ‚Ä¢ –ë–∞–∑–æ–≤—ã–π: {self.poll_interval} —Å–µ–∫\n"
				f"  ‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: {POLL_INTERVAL_MIN}-{POLL_INTERVAL_MAX} —Å–µ–∫\n\n"
				f"<b>–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å:</b>\n"
				f"  ‚Ä¢ –û–∫–Ω–æ: {self.volatility_window} —Å–≤–µ—á–µ–π\n"
				f"  ‚Ä¢ –ü–æ—Ä–æ–≥ –∞–ª–µ—Ä—Ç–∞: {self.volatility_threshold*100:.2f}%\n"
				f"  ‚Ä¢ –ü–æ—Ä–æ–≥ –≤—ã—Å–æ–∫–æ–π: {VOLATILITY_HIGH_THRESHOLD*100:.2f}%\n"
				f"  ‚Ä¢ –ü–æ—Ä–æ–≥ –Ω–∏–∑–∫–æ–π: {VOLATILITY_LOW_THRESHOLD*100:.2f}%\n"
				f"  ‚Ä¢ Cooldown: {VOLATILITY_ALERT_COOLDOWN/60:.0f} –º–∏–Ω\n\n"
				f"<i>–ü—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
				f"—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –¥–æ {POLL_INTERVAL_MAX}—Å –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Å–ø–∞–º–∞</i>"
			)
			await update.message.reply_text(text, parse_mode="HTML")
			return

		try:
			if len(args) >= 1:
				self.poll_interval = int(args[0])
			if len(args) >= 2:
				self.volatility_window = int(args[1])
			if len(args) >= 3:
				self.volatility_threshold = float(args[2])
			self._save_tracked_symbols()
			await update.message.reply_text(
				f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n"
				f"poll_interval = {self.poll_interval} —Å–µ–∫\n"
				f"volatility_window = {self.volatility_window} —Å–≤–µ—á–µ–π\n"
				f"volatility_threshold = {self.volatility_threshold*100:.2f}%"
			)
		except Exception as e:
			await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

	# -------------------------
	# Paper Trading –∫–æ–º–∞–Ω–¥—ã
	# -------------------------
	async def paper_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		"""–ó–∞–ø—É—Å–∫–∞–µ—Ç paper trading"""
		if not self._is_authorized(update):
			await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
			return
		
		if self.paper_trader.is_running:
			await update.message.reply_text("‚ö†Ô∏è Paper Trading —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
			return
		
		# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
		if context.args and len(context.args) > 0:
			try:
				initial_balance = float(context.args[0])
				self.paper_trader = PaperTrader(initial_balance=initial_balance)
			except ValueError:
				await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±–∞–ª–∞–Ω—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é $100")
		
		self.paper_trader.start()
		self.paper_trader.save_state()
		
		text = (
			f"<b>üöÄ Paper Trading –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
			f"üí∞ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${self.paper_trader.initial_balance:.2f}\n"
			f"üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –∫–∞–∫ –≤ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–µ\n"
			f"‚Ä¢ –°—Ç–æ–ø-–ª–æ—Å—Å: 5%\n"
			f"‚Ä¢ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: 10% (—á–∞—Å—Ç–∏—á–Ω–æ–µ 50%)\n"
			f"‚Ä¢ Trailing stop: 2%\n"
			f"‚Ä¢ –ú–∞–∫—Å. –ø–æ–∑–∏—Ü–∏–π: 3\n\n"
			f"–ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º.\n"
			f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /paper_status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è."
		)
		await update.message.reply_text(text, parse_mode="HTML")
		
		if self.chat_id is None:
			self.chat_id = update.effective_chat.id
			self._save_tracked_symbols()

	async def paper_stop(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		"""–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç paper trading –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏"""
		if not self._is_authorized(update):
			await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
			return
		
		if not self.paper_trader.is_running:
			await update.message.reply_text("‚ö†Ô∏è Paper Trading –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
			return
		
		# –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Ç–µ–∫—É—â–∏–º —Ü–µ–Ω–∞–º
		if self.paper_trader.positions:
			msg = await update.message.reply_text("‚è≥ –ó–∞–∫—Ä—ã–≤–∞—é –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏...")
			
			closed_positions = []
			async with aiohttp.ClientSession() as session:
				provider = DataProvider(session)
				for symbol in list(self.paper_trader.positions.keys()):
					try:
						klines = await provider.fetch_klines(symbol=symbol, interval=self.default_interval, limit=1)
						df = provider.klines_to_dataframe(klines)
						if not df.empty:
							current_price = float(df['close'].iloc[-1])
							trade_info = self.paper_trader.close_position(symbol, current_price, "MANUAL-CLOSE")
							if trade_info:
								closed_positions.append(f"‚Ä¢ {symbol}: {trade_info['profit']:+.2f} USD ({trade_info['profit_percent']:+.2f}%)")
					except Exception as e:
						logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
			
			positions_text = "\n".join(closed_positions) if closed_positions else "–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è"
		else:
			positions_text = "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"
		
		self.paper_trader.stop()
		self.paper_trader.save_state()
		
		status = self.paper_trader.get_status()
		text = (
			f"<b>‚è∏ Paper Trading –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
			f"–ó–∞–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π:\n{positions_text}\n\n"
			f"üí∞ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${status['total_balance']:.2f}\n"
			f"üìà –ü—Ä–∏–±—ã–ª—å: {status['total_profit']:+.2f} USD ({status['total_profit_percent']:+.2f}%)"
		)
		
		if self.paper_trader.positions:
			await msg.edit_text(text, parse_mode="HTML")
		else:
			await update.message.reply_text(text, parse_mode="HTML")

	async def paper_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		"""–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å paper trading"""
		if not self._is_authorized(update):
			await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
			return
		
		status = self.paper_trader.get_status()
		
		# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ PnL
		current_prices = {}
		if status['positions']:
			async with aiohttp.ClientSession() as session:
				provider = DataProvider(session)
				for pos in status['positions']:
					symbol = pos['symbol']
					try:
						klines = await provider.fetch_klines(symbol=symbol, interval=self.default_interval, limit=1)
						df = provider.klines_to_dataframe(klines)
						if not df.empty:
							current_prices[symbol] = float(df['close'].iloc[-1])
					except:
						current_prices[symbol] = pos['entry_price']
		
		# –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º PnL —Å —Ç–µ–∫—É—â–∏–º–∏ —Ü–µ–Ω–∞–º–∏
		total_pnl = 0.0
		positions_text = ""
		for pos in status['positions']:
			symbol = pos['symbol']
			current_price = current_prices.get(symbol, pos['entry_price'])
			position_obj = self.paper_trader.positions[symbol]
			pnl_info = position_obj.get_pnl(current_price)
			total_pnl += pnl_info['pnl']
			
			emoji = "üü¢" if pnl_info['pnl'] > 0 else "üî¥" if pnl_info['pnl'] < 0 else "‚ö™"
			partial_mark = " [—á–∞—Å—Ç–∏—á–Ω–æ]" if pos['partial_closed'] else ""
			
			positions_text += (
				f"  {emoji} <b>{symbol}</b>{partial_mark}\n"
				f"    –í—Ö–æ–¥: {format_price(pos['entry_price'])} ‚Üí –°–µ–π—á–∞—Å: {format_price(current_price)}\n"
				f"    PnL: ${pnl_info['pnl']:+.2f} ({pnl_info['pnl_percent']:+.2f}%)\n"
				f"    SL: {format_price(pos['stop_loss'])} | TP: {format_price(pos['take_profit'])}\n\n"
			)
		
		total_balance = status['current_balance'] + sum(
			self.paper_trader.positions[pos['symbol']].get_pnl(current_prices.get(pos['symbol'], pos['entry_price']))['current_value']
			for pos in status['positions']
		)
		
		total_profit = total_balance - status['initial_balance']
		total_profit_percent = (total_profit / status['initial_balance']) * 100
		
		status_emoji = "üü¢" if status['is_running'] else "‚è∏"
		
		text = (
			f"<b>{status_emoji} Paper Trading Status</b>\n\n"
			f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b>\n"
			f"  ‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ: ${status['current_balance']:.2f}\n"
			f"  ‚Ä¢ –í—Å–µ–≥–æ: ${total_balance:.2f}\n"
			f"  ‚Ä¢ –ü—Ä–∏–±—ã–ª—å: {total_profit:+.2f} USD ({total_profit_percent:+.2f}%)\n\n"
			f"üìä <b>–ü–æ–∑–∏—Ü–∏–∏ ({len(status['positions'])}/3):</b>\n"
		)
		
		if positions_text:
			text += positions_text
		else:
			text += "  –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π\n\n"
		
		text += (
			f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
			f"  ‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {status['stats']['total_trades']}\n"
			f"  ‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {status['stats']['win_rate']:.1f}%\n"
			f"  ‚Ä¢ –ö–æ–º–∏—Å—Å–∏–∏: ${status['stats']['total_commission']:.4f}\n"
			f"  ‚Ä¢ Stop-loss: {status['stats']['stop_loss_triggers']}\n"
			f"  ‚Ä¢ Take-profit: {status['stats']['take_profit_triggers']}\n"
			f"  ‚Ä¢ Trailing-stop: {status['stats']['trailing_stop_triggers']}"
		)
		
		await update.message.reply_text(text, parse_mode="HTML")

	async def paper_balance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		"""–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ"""
		if not self._is_authorized(update):
			await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
			return
		
		status = self.paper_trader.get_status()
		
		# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
		current_prices = {}
		if status['positions']:
			async with aiohttp.ClientSession() as session:
				provider = DataProvider(session)
				for pos in status['positions']:
					symbol = pos['symbol']
					try:
						klines = await provider.fetch_klines(symbol=symbol, interval=self.default_interval, limit=1)
						df = provider.klines_to_dataframe(klines)
						if not df.empty:
							current_prices[symbol] = float(df['close'].iloc[-1])
					except:
						current_prices[symbol] = pos['entry_price']
		
		# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
		total_invested = sum(
			self.paper_trader.positions[pos['symbol']].invest_amount
			for pos in status['positions']
		)
		
		total_current_value = sum(
			self.paper_trader.positions[pos['symbol']].get_pnl(current_prices.get(pos['symbol'], pos['entry_price']))['current_value']
			for pos in status['positions']
		)
		
		total_balance = status['current_balance'] + total_current_value
		total_profit = total_balance - status['initial_balance']
		total_profit_percent = (total_profit / status['initial_balance']) * 100
		
		text = (
			f"<b>üí∞ Paper Trading Balance</b>\n\n"
			f"<b>–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:</b> ${status['initial_balance']:.2f}\n"
			f"<b>–°–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞:</b> ${status['current_balance']:.2f}\n"
			f"<b>–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:</b> ${total_invested:.2f}\n"
			f"<b>–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π:</b> ${total_current_value:.2f}\n"
			f"<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${total_balance:.2f}\n\n"
			f"<b>{'üìà' if total_profit >= 0 else 'üìâ'} –ü—Ä–∏–±—ã–ª—å/–£–±—ã—Ç–æ–∫:</b> {total_profit:+.2f} USD ({total_profit_percent:+.2f}%)\n"
			f"<b>üí∏ –ö–æ–º–∏—Å—Å–∏–∏:</b> ${status['stats']['total_commission']:.4f}\n\n"
			f"<b>–ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞:</b> {(total_invested / status['initial_balance'] * 100):.1f}%"
		)
		
		await update.message.reply_text(text, parse_mode="HTML")

	async def paper_trades(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		"""–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""
		if not self._is_authorized(update):
			await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
			return
			
		limit = 10
		if context.args and len(context.args) > 0:
			try:
				limit = int(context.args[0])
				limit = min(max(limit, 1), 50)  # –û—Ç 1 –¥–æ 50
			except ValueError:
				pass
		
		trades = self.paper_trader.trades_history[-limit:]
		
		if not trades:
			await update.message.reply_text("üìù –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –ø—É—Å—Ç–∞.")
			return
		
		text = f"<b>üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(trades)} —Å–¥–µ–ª–æ–∫:</b>\n\n"
		
		for trade in reversed(trades):
			trade_type = trade['type']
			symbol = trade.get('symbol', 'N/A')
			price = trade.get('price', 0)
			
			if trade_type == "BUY":
				emoji = "üü¢"
				details = f"  –ö—É–ø–∏–ª {trade['amount']:.6f} @ {format_price(price)}\n  –í–ª–æ–∂–µ–Ω–æ: ${trade['invest_amount']:.2f}"
			elif trade_type in ["SELL", "MANUAL-CLOSE"]:
				emoji = "üî¥"
				profit_emoji = "üìà" if trade['profit'] >= 0 else "üìâ"
				details = f"  –ü—Ä–æ–¥–∞–ª {trade['amount']:.6f} @ {format_price(price)}\n  {profit_emoji} –ü—Ä–∏–±—ã–ª—å: ${trade['profit']:+.2f} ({trade['profit_percent']:+.2f}%)"
			elif trade_type == "STOP-LOSS":
				emoji = "üõë"
				details = f"  –°—Ç–æ–ø-–ª–æ—Å—Å {trade['amount']:.6f} @ {format_price(price)}\n  üìâ –£–±—ã—Ç–æ–∫: ${trade['profit']:+.2f} ({trade['profit_percent']:+.2f}%)"
			elif trade_type == "PARTIAL-TP":
				emoji = "üíé"
				details = f"  –ß–∞—Å—Ç–∏—á–Ω—ã–π —Ç–µ–π–∫ {trade['amount']:.6f} @ {format_price(price)}\n  üìà –ü—Ä–∏–±—ã–ª—å: ${trade['profit']:+.2f} ({trade['profit_percent']:+.2f}%)"
			elif trade_type == "TRAILING-STOP":
				emoji = "üîª"
				details = f"  Trailing stop {trade['amount']:.6f} @ {format_price(price)}\n  üìä –ü—Ä–∏–±—ã–ª—å: ${trade['profit']:+.2f} ({trade['profit_percent']:+.2f}%)"
			else:
				emoji = "‚ö™"
				details = f"  {trade.get('amount', 0):.6f} @ {format_price(price)}"
			
			time_str = trade.get('time', 'N/A')
			if isinstance(time_str, datetime):
				time_str = time_str.strftime('%H:%M:%S')
			elif isinstance(time_str, str) and 'T' in time_str:
				time_str = time_str.split('T')[1].split('.')[0]
			
			text += f"{emoji} <b>{trade_type}</b> {symbol} [{time_str}]\n{details}\n\n"
		
		await update.message.reply_text(text, parse_mode="HTML")

	async def paper_reset(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		"""–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç paper trading"""
		if not self._is_authorized(update):
			await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
			return
		
		if self.paper_trader.is_running:
			await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Paper Trading –∫–æ–º–∞–Ω–¥–æ–π /paper_stop")
			return
		
		old_balance = self.paper_trader.balance
		old_trades = len(self.paper_trader.trades_history)
		
		self.paper_trader.reset()
		self.paper_trader.save_state()
		
		text = (
			f"<b>üîÑ Paper Trading —Å–±—Ä–æ—à–µ–Ω</b>\n\n"
			f"–ë–∞–ª–∞–Ω—Å —Å–±—Ä–æ—à–µ–Ω —Å ${old_balance:.2f} ‚Üí ${self.paper_trader.initial_balance:.2f}\n"
			f"–£–¥–∞–ª–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {old_trades}\n\n"
			f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /paper_start –¥–ª—è –∑–∞–ø—É—Å–∫–∞."
		)
		await update.message.reply_text(text, parse_mode="HTML")

	async def paper_backtest(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		"""–ë—ã—Å—Ç—Ä–∞—è —Å–∏–º—É–ª—è—Ü–∏—è paper trading –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
		if not self._is_authorized(update):
			await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
			return
		
		period_hours = 24  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 24 —á–∞—Å–∞
		if context.args and len(context.args) > 0:
			try:
				period_hours = int(context.args[0])
				period_hours = min(max(period_hours, 1), 168)  # –û—Ç 1 –¥–æ 168 —á–∞—Å–æ–≤ (–Ω–µ–¥–µ–ª—è)
			except ValueError:
				await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É—é 24 —á–∞—Å–∞.")
		
		if not self.tracked_symbols:
			await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add SYMBOL")
			return
		
		msg = await update.message.reply_text(f"‚è≥ –ó–∞–ø—É—Å–∫–∞—é —Å–∏–º—É–ª—è—Ü–∏—é –∑–∞ {period_hours}—á –Ω–∞ {len(self.tracked_symbols)} –ø–∞—Ä–∞—Ö...")
		
		from backtest import run_backtest_multiple
		import asyncio as aio_backtest
		
		try:
			# –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç
			symbols = list(self.tracked_symbols)
			results = []
			
			async with aiohttp.ClientSession() as session:
				provider = DataProvider(session)
				
				for i, symbol in enumerate(symbols):
					await msg.edit_text(f"‚è≥ –°–∏–º—É–ª—è—Ü–∏—è {i+1}/{len(symbols)}: {symbol}...")
					
					# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
					candles_per_hour = int(60 / int(self.default_interval.replace('m',''))) if 'm' in self.default_interval else 1
					limit = period_hours * candles_per_hour
					
					df = await provider.fetch_klines(symbol=symbol, interval=self.default_interval, limit=limit)
					
					if df is None or df.empty:
						continue
					
					# –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–∞–∫ –≤ backtest.py
					generator = SignalGenerator(df)
					generator.compute_indicators()
					
					signals = []
					min_window = 14
					
					for j in range(len(df)):
						sub_df = df.iloc[:j+1]
						if len(sub_df) < min_window:
							signals.append({"signal": "HOLD", "price": sub_df["close"].iloc[-1]})
							continue
						gen = SignalGenerator(sub_df)
						gen.compute_indicators()
						res = gen.generate_signal()
						signals.append(res)
					
					# –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
					from paper_trader import COMMISSION_RATE, STOP_LOSS_PERCENT, TAKE_PROFIT_PERCENT, PARTIAL_CLOSE_PERCENT, TRAILING_STOP_PERCENT, get_position_size_percent
					
					balance = 100.0
					position = 0.0
					entry_price = None
					trades = 0
					wins = 0
					losses = 0
					partial_closed = False
					max_price = 0.0
					
					for s in signals:
						price = s.get("price", 0)
						sig = s.get("signal", "HOLD")
						signal_strength = abs(s.get("bullish_votes", 0) - s.get("bearish_votes", 0))
						atr = s.get("ATR", 0.0)
						
						# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤
						if position > 0 and entry_price:
							price_change = (price - entry_price) / entry_price
							
							if partial_closed:
								if price > max_price:
									max_price = price
								trailing_drop = (max_price - price) / max_price
								if trailing_drop >= TRAILING_STOP_PERCENT:
									sell_value = position * price
									commission = sell_value * COMMISSION_RATE
									balance += sell_value - commission
									trades += 1
									if (price - entry_price) > 0:
										wins += 1
									else:
										losses += 1
									position = 0.0
									entry_price = None
									partial_closed = False
									max_price = 0.0
									continue
							else:
								if price_change <= -STOP_LOSS_PERCENT:
									sell_value = position * price
									commission = sell_value * COMMISSION_RATE
									balance += sell_value - commission
									trades += 1
									losses += 1
									position = 0.0
									entry_price = None
									continue
								
								if price_change >= TAKE_PROFIT_PERCENT:
									close_amount = position * PARTIAL_CLOSE_PERCENT
									keep_amount = position - close_amount
									sell_value = close_amount * price
									commission = sell_value * COMMISSION_RATE
									balance += sell_value - commission
									position = keep_amount
									partial_closed = True
									max_price = price
									trades += 1
									wins += 1
									continue
						
						# –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π
						if sig == "BUY" and position == 0 and balance > 0:
							position_size_percent = get_position_size_percent(signal_strength, atr, price)
							invest_amount = balance * position_size_percent
							commission = invest_amount * COMMISSION_RATE
							position = (invest_amount - commission) / price
							entry_price = price
							balance -= invest_amount
							trades += 1
						elif sig == "SELL" and position > 0 and not partial_closed:
							sell_value = position * price
							commission = sell_value * COMMISSION_RATE
							balance += sell_value - commission
							if (price - entry_price) > 0:
								wins += 1
							else:
								losses += 1
							position = 0.0
							entry_price = None
					
					# –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è –ø–æ–∑–∏—Ü–∏—é
					if position > 0:
						final_price = signals[-1]["price"]
						sell_value = position * final_price
						commission = sell_value * COMMISSION_RATE
						balance += sell_value - commission
						if (final_price - entry_price) > 0:
							wins += 1
						else:
							losses += 1
						position = 0.0
						partial_closed = False
					
					profit = balance - 100.0
					profit_percent = profit
					win_rate = (wins / (wins + losses) * 100) if (wins + losses) > 0 else 0
					
					results.append({
						"symbol": symbol,
						"profit": profit,
						"profit_percent": profit_percent,
						"trades": trades,
						"win_rate": win_rate
					})
			
			# –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
			if results:
				text = f"<b>üìä –°–∏–º—É–ª—è—Ü–∏—è –∑–∞ {period_hours}—á ({self.default_interval})</b>\n\n"
				
				total_profit = 0
				total_trades = 0
				
				for r in sorted(results, key=lambda x: x['profit'], reverse=True):
					emoji = "üü¢" if r['profit'] > 0 else "üî¥" if r['profit'] < 0 else "‚ö™"
					text += (
						f"{emoji} <b>{r['symbol']}</b>\n"
						f"  –ü—Ä–∏–±—ã–ª—å: {r['profit']:+.2f} USD ({r['profit_percent']:+.2f}%)\n"
						f"  –°–¥–µ–ª–æ–∫: {r['trades']} | –í–∏–Ω—Ä–µ–π—Ç: {r['win_rate']:.0f}%\n\n"
					)
					total_profit += r['profit']
					total_trades += r['trades']
				
				avg_profit = total_profit / len(results)
				text += (
					f"<b>{'üìà' if total_profit >= 0 else 'üìâ'} –ò–¢–û–ì–û:</b>\n"
					f"  –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {total_profit:+.2f} USD\n"
					f"  –°—Ä–µ–¥–Ω—è—è: {avg_profit:+.2f} USD\n"
					f"  –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}\n\n"
					f"<i>–≠—Ç–æ —Å–∏–º—É–ª—è—Ü–∏—è –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.\n"
					f"–†–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è.</i>"
				)
				
				await msg.edit_text(text, parse_mode="HTML")
			else:
				await msg.edit_text("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏")
				
		except Exception as e:
			logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
			await msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")

	async def paper_debug(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		"""–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–∏–≥–Ω–∞–ª—É"""
		if not self._is_authorized(update):
			await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
			return
		
		if not context.args:
			await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /paper_debug SYMBOL")
			return
		
		symbol = context.args[0].upper()
		
		msg = await update.message.reply_text(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {symbol}...")
		
		try:
			async with aiohttp.ClientSession() as session:
				provider = DataProvider(session)
				klines = await provider.fetch_klines(symbol=symbol, interval=self.default_interval, limit=500)
				df = provider.klines_to_dataframe(klines)
				
				if df.empty:
					await msg.edit_text("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
					return
				
				generator = SignalGenerator(df)
				generator.compute_indicators()
				result = generator.generate_signal()
				
				signal = result["signal"]
				price = result["price"]
				bullish = result["bullish_votes"]
				bearish = result["bearish_votes"]
				
				# –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
				last = df.iloc[-1]
				ema_s = float(last["EMA_short"])
				ema_l = float(last["EMA_long"])
				sma_20 = float(last.get("SMA_20", 0))
				sma_50 = float(last.get("SMA_50", 0))
				rsi = float(last["RSI"])
				macd = float(last["MACD"])
				macd_signal = float(last["MACD_signal"])
				macd_hist = float(last["MACD_hist"])
				adx = float(last.get("ADX_14", 0))
				
				# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è BUY
				buy_trend_ok = ema_s > ema_l and sma_20 > sma_50
				buy_rsi_ok = 35 < rsi < 70
				macd_buy_ok = macd > macd_signal and macd_hist > 0
				strong_trend = adx > 25
				vote_diff = bullish - bearish
				
				# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è SELL
				sell_trend_ok = ema_s < ema_l and sma_20 < sma_50
				sell_rsi_ok = 30 < rsi < 65
				macd_sell_ok = macd < macd_signal and macd_hist < 0
				
				signal_emoji = "üü¢" if signal == "BUY" else "üî¥" if signal == "SELL" else "‚ö†Ô∏è"
				
				text = (
					f"<b>üîç Debug: {symbol}</b> [{signal_emoji} {signal}]\n\n"
					f"üí∞ –¶–µ–Ω–∞: {format_price(price)}\n\n"
					f"<b>üìä –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ:</b>\n"
					f"  –ë—ã—á—å–∏: {bullish} | –ú–µ–¥–≤–µ–∂—å–∏: {bearish}\n"
					f"  –†–∞–∑–Ω–∏—Ü–∞: {vote_diff} (–ø–æ—Ä–æ–≥: 5)\n\n"
					f"<b>üìà –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b>\n"
					f"  EMA: {ema_s:.2f} vs {ema_l:.2f} {'‚úÖ' if ema_s > ema_l else '‚ùå'}\n"
					f"  SMA: {sma_20:.2f} vs {sma_50:.2f} {'‚úÖ' if sma_20 > sma_50 else '‚ùå'}\n"
					f"  RSI: {rsi:.1f} (35-70 –¥–ª—è BUY) {'‚úÖ' if buy_rsi_ok else '‚ùå'}\n"
					f"  MACD: {macd:.4f} vs {macd_signal:.4f} {'‚úÖ' if macd > macd_signal else '‚ùå'}\n"
					f"  MACD hist: {macd_hist:.4f} {'‚úÖ' if macd_hist > 0 else '‚ùå'}\n"
					f"  ADX: {adx:.1f} (>25 –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞) {'‚úÖ' if strong_trend else '‚ùå'}\n\n"
					f"<b>üéØ –§–∏–ª—å—Ç—Ä—ã BUY:</b>\n"
					f"  {'‚úÖ' if vote_diff >= 5 else '‚ùå'} –ì–æ–ª–æ—Å–æ–≤ >= 5: {vote_diff}/5\n"
					f"  {'‚úÖ' if strong_trend else '‚ùå'} –°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥: ADX {adx:.1f}/25\n"
					f"  {'‚úÖ' if buy_trend_ok else '‚ùå'} –¢—Ä–µ–Ω–¥ –≤–≤–µ—Ä—Ö: EMA+SMA\n"
					f"  {'‚úÖ' if buy_rsi_ok else '‚ùå'} RSI –≤ –∑–æ–Ω–µ: {rsi:.1f}\n"
					f"  {'‚úÖ' if macd_buy_ok else '‚ùå'} MACD –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç\n\n"
				)
				
				# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—ã
				text += "<b>üìù –ü—Ä–∏—á–∏–Ω—ã:</b>\n"
				for i, reason in enumerate(result["reasons"][-5:], 1):
					text += f"{i}. {reason[:80]}...\n" if len(reason) > 80 else f"{i}. {reason}\n"
				
				await msg.edit_text(text, parse_mode="HTML")
				
		except Exception as e:
			logger.error(f"–û—à–∏–±–∫–∞ debug –¥–ª—è {symbol}: {e}")
			await msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

	async def paper_candidates(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		"""–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞—Ä—ã –±–ª–∏–∑–∫–∏–µ –∫ —Å–∏–≥–Ω–∞–ª—É"""
		if not self._is_authorized(update):
			await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
			return
		
		if not self.tracked_symbols:
			await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
			return
		
		msg = await update.message.reply_text(f"üîç –ò—â—É –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å—Ä–µ–¥–∏ {len(self.tracked_symbols)} –ø–∞—Ä...")
		
		candidates = []
		
		try:
			async with aiohttp.ClientSession() as session:
				provider = DataProvider(session)
				
				for symbol in self.tracked_symbols:
					try:
						klines = await provider.fetch_klines(symbol=symbol, interval=self.default_interval, limit=500)
						df = provider.klines_to_dataframe(klines)
						
						if df.empty:
							continue
						
						generator = SignalGenerator(df)
						generator.compute_indicators()
						result = generator.generate_signal()
						
						signal = result["signal"]
						price = result["price"]
						bullish = result["bullish_votes"]
						bearish = result["bearish_votes"]
						
						last = df.iloc[-1]
						adx = float(last.get("ADX_14", 0))
						rsi = float(last["RSI"])
						
						# –ö–∞–Ω–¥–∏–¥–∞—Ç –µ—Å–ª–∏:
						# 1. –ì–æ–ª–æ—Å–æ–≤ 3-5 (–±–ª–∏–∑–∫–æ –∫ –ø–æ—Ä–æ–≥—É)
						# 2. ADX > 20 (–ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ 25)
						vote_diff_buy = bullish - bearish
						vote_diff_sell = bearish - bullish
						
						if (3 <= vote_diff_buy < 5 or 3 <= vote_diff_sell < 5) and adx > 20:
							direction = "BUY" if vote_diff_buy > vote_diff_sell else "SELL"
							votes = vote_diff_buy if direction == "BUY" else vote_diff_sell
							
							candidates.append({
								"symbol": symbol,
								"direction": direction,
								"votes": votes,
								"adx": adx,
								"rsi": rsi,
								"price": price
							})
							
					except Exception as e:
						logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
			
			if candidates:
				# –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–æ–ª–æ—Å–æ–≤ (–±–æ–ª—å—à–µ = –±–ª–∏–∂–µ –∫ —Å–∏–≥–Ω–∞–ª—É)
				candidates.sort(key=lambda x: x['votes'], reverse=True)
				
				text = f"<b>üéØ –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ —Å–∏–≥–Ω–∞–ª ({len(candidates)}):</b>\n\n"
				
				for c in candidates[:10]:  # –¢–æ–ø 10
					emoji = "üü¢" if c['direction'] == "BUY" else "üî¥"
					text += (
						f"{emoji} <b>{c['symbol']}</b> ‚Üí {c['direction']}\n"
						f"  –ì–æ–ª–æ—Å–æ–≤: {c['votes']}/5 | ADX: {c['adx']:.1f}/25\n"
						f"  RSI: {c['rsi']:.1f} | –¶–µ–Ω–∞: {format_price(c['price'])}\n\n"
					)
				
				text += "<i>–≠—Ç–∏ –ø–∞—Ä—ã –±–ª–∏–∑–∫–∏ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞</i>"
				await msg.edit_text(text, parse_mode="HTML")
			else:
				await msg.edit_text("‚ö†Ô∏è –ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –±–ª–∏–∑–∫–∏—Ö –∫ —Å–∏–≥–Ω–∞–ª—É.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –ø–∞—Ä.")
				
		except Exception as e:
			logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {e}")
			await msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

	async def paper_force_buy(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		"""–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
		if not self._is_authorized(update):
			await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
			return
		
		if not self.paper_trader.is_running:
			await update.message.reply_text("‚ö†Ô∏è Paper Trading –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /paper_start")
			return
		
		if not context.args:
			await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /paper_force_buy SYMBOL")
			return
		
		symbol = context.args[0].upper()
		
		if symbol in self.paper_trader.positions:
			await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è –ø–æ {symbol} —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞")
			return
		
		if not self.paper_trader.can_open_position(symbol):
			await update.message.reply_text(f"‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é (–ª–∏–º–∏—Ç –∏–ª–∏ –Ω–µ—Ç –±–∞–ª–∞–Ω—Å–∞)")
			return
		
		try:
			async with aiohttp.ClientSession() as session:
				provider = DataProvider(session)
				klines = await provider.fetch_klines(symbol=symbol, interval=self.default_interval, limit=500)
				df = provider.klines_to_dataframe(klines)
				
				if df.empty:
					await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã")
					return
				
				# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ATR
				generator = SignalGenerator(df)
				generator.compute_indicators()
				result = generator.generate_signal()
				
				price = float(df['close'].iloc[-1])
				signal_strength = 5  # –°—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
				atr = result.get("ATR", 0.0)
				
				trade_info = self.paper_trader.open_position(symbol, price, signal_strength, atr)
				
				if trade_info:
					self.paper_trader.save_state()
					
					text = (
						f"<b>üü¢ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–û–ö–£–ü–ö–ê</b>\n\n"
						f"–°–∏–º–≤–æ–ª: {symbol}\n"
						f"–¶–µ–Ω–∞: {format_price(price)}\n"
						f"–í–ª–æ–∂–µ–Ω–æ: ${trade_info['invest_amount']:.2f}\n"
						f"–ë–∞–ª–∞–Ω—Å: ${trade_info['balance_after']:.2f}\n\n"
						f"‚ö†Ô∏è –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Å–¥–µ–ª–∫–∞!\n"
						f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ /paper_status"
					)
					await update.message.reply_text(text, parse_mode="HTML")
				else:
					await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é")
					
		except Exception as e:
			logger.error(f"–û—à–∏–±–∫–∞ force_buy –¥–ª—è {symbol}: {e}")
			await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

	async def kelly_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		"""–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Kelly Criterion"""
		if not self._is_authorized(update):
			await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
			return
		
		from config import USE_KELLY_CRITERION, KELLY_FRACTION, MIN_TRADES_FOR_KELLY, KELLY_LOOKBACK_WINDOW
		
		message = "üìä <b>Kelly Criterion</b>\n\n"
		message += f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if USE_KELLY_CRITERION else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}\n"
		message += f"Kelly Fraction: {KELLY_FRACTION:.0%} (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π)\n"
		message += f"Min Trades: {MIN_TRADES_FOR_KELLY}\n"
		message += f"Lookback Window: {KELLY_LOOKBACK_WINDOW} —Å–¥–µ–ª–æ–∫\n\n"
		
		# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π Kelly
		closed_trades = [
			t for t in self.paper_trader.trades_history 
			if t.get("type") in ["SELL", "STOP-LOSS", "TRAILING-STOP", "TIME-EXIT"]
			and t.get("profit") is not None
		]
		
		if len(closed_trades) >= MIN_TRADES_FOR_KELLY:
			recent_trades = closed_trades[-KELLY_LOOKBACK_WINDOW:]
			
			winning_trades = [t for t in recent_trades if t.get("profit", 0) > 0]
			losing_trades = [t for t in recent_trades if t.get("profit", 0) <= 0]
			
			win_rate = len(winning_trades) / len(recent_trades) if recent_trades else 0
			
			if winning_trades:
				avg_win = sum(t.get("profit_percent", 0) for t in winning_trades) / len(winning_trades)
			else:
				avg_win = 0
			
			if losing_trades:
				avg_loss = abs(sum(t.get("profit_percent", 0) for t in losing_trades) / len(losing_trades))
			else:
				avg_loss = 1.0
			
			if avg_win > 0 and avg_loss > 0:
				kelly_full = (win_rate * avg_win - (1 - win_rate) * avg_loss) / avg_win
				kelly_conservative = kelly_full * KELLY_FRACTION
				
				message += f"<b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({len(recent_trades)} —Å–¥–µ–ª–æ–∫):</b>\n"
				message += f"‚Ä¢ Win Rate: {win_rate:.1%}\n"
				message += f"‚Ä¢ Avg Win: {avg_win:.2f}%\n"
				message += f"‚Ä¢ Avg Loss: {avg_loss:.2f}%\n\n"
				message += f"<b>Kelly (–ø–æ–ª–Ω—ã–π):</b> {kelly_full:.2%}\n"
				message += f"<b>Kelly (1/4):</b> {kelly_conservative:.2%}\n\n"
				
				if kelly_conservative > 0:
					message += f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ {kelly_conservative:.1%} –æ—Ç –±–∞–ª–∞–Ω—Å–∞"
				else:
					message += "‚ö†Ô∏è Kelly –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π - —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —É–±—ã—Ç–æ—á–Ω–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–π –≤—ã–±–æ—Ä–∫–µ"
			else:
				message += "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ Kelly"
		else:
			message += f"‚è≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–¥–µ–ª–æ–∫: {len(closed_trades)}/{MIN_TRADES_FOR_KELLY}\n"
			message += "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –±–æ–ª—å—à–µ —Å–¥–µ–ª–æ–∫ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ Kelly Criterion"
		
		await update.message.reply_text(message, parse_mode="HTML")
	
	async def averaging_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
		"""–°—Ç–∞—Ç—É—Å –¥–æ–∫—É–ø–∞–Ω–∏–π –ø–æ –ø–æ–∑–∏—Ü–∏—è–º"""
		if not self._is_authorized(update):
			await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
			return
		
		from config import (
			ENABLE_AVERAGING, MAX_AVERAGING_ATTEMPTS, AVERAGING_PRICE_DROP_PERCENT,
			AVERAGING_TIME_THRESHOLD_HOURS, MAX_TOTAL_RISK_MULTIPLIER,
			ENABLE_PYRAMID_UP, PYRAMID_ADX_THRESHOLD
		)
		
		message = "üîÑ <b>–£–º–Ω–æ–µ –¥–æ–∫—É–ø–∞–Ω–∏–µ (Averaging)</b>\n\n"
		message += f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if ENABLE_AVERAGING else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}\n"
		message += f"Max Attempts: {MAX_AVERAGING_ATTEMPTS}\n"
		message += f"Price Drop: {AVERAGING_PRICE_DROP_PERCENT:.1%}\n"
		message += f"Time Threshold: {AVERAGING_TIME_THRESHOLD_HOURS}—á\n"
		message += f"Max Risk Multiplier: {MAX_TOTAL_RISK_MULTIPLIER}x\n"
		message += f"Pyramid Up: {'‚úÖ' if ENABLE_PYRAMID_UP else '‚ùå'} (ADX > {PYRAMID_ADX_THRESHOLD})\n\n"
		
		# –°—Ç–∞—Ç—É—Å –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
		if self.paper_trader.positions:
			message += "<b>–¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏:</b>\n\n"
			
			for symbol, position in self.paper_trader.positions.items():
				averaging_count = position.averaging_count
				avg_entry = position.average_entry_price
				entry_price = position.entry_price
				mode = "PYRAMID" if position.pyramid_mode else "AVERAGE"
				
				message += f"<b>{symbol}</b>\n"
				message += f"‚Ä¢ –í—Ö–æ–¥: {format_price(entry_price)}\n"
				
				if averaging_count > 0:
					message += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è: {format_price(avg_entry)}\n"
					message += f"‚Ä¢ –î–æ–∫—É–ø–∞–Ω–∏—è: {averaging_count}/{MAX_AVERAGING_ATTEMPTS} ({mode})\n"
					message += f"‚Ä¢ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${position.total_invested:.2f}\n"
					
					# –ò—Å—Ç–æ—Ä–∏—è –¥–æ–∫—É–ø–∞–Ω–∏–π
					if position.averaging_entries:
						message += f"  –ó–∞–ø–∏—Å–∏:\n"
						for i, entry in enumerate(position.averaging_entries[:3], 1):  # –ú–∞–∫—Å–∏–º—É–º 3
							message += f"  {i}. ${entry['price']:.2f} - {entry['mode']}\n"
				else:
					message += f"‚Ä¢ –î–æ–∫—É–ø–∞–Ω–∏—è: 0/{MAX_AVERAGING_ATTEMPTS}\n"
				
				message += "\n"
		else:
			message += "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π\n"
		
		# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–∫—É–ø–∞–Ω–∏—è–º
		avg_trades = [t for t in self.paper_trader.trades_history if "AVERAGE" in t.get("type", "")]
		
		if avg_trades:
			message += f"\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
			message += f"‚Ä¢ –í—Å–µ–≥–æ –¥–æ–∫—É–ø–∞–Ω–∏–π: {len(avg_trades)}\n"
			
			pyramid_trades = [t for t in avg_trades if "PYRAMID" in t.get("type", "")]
			average_trades = [t for t in avg_trades if "AVERAGE-AVERAGE" in t.get("type", "")]
			
			message += f"‚Ä¢ Pyramid Up: {len(pyramid_trades)}\n"
			message += f"‚Ä¢ Average Down: {len(average_trades)}\n"
		
		await update.message.reply_text(message, parse_mode="HTML")

	# -------------------------
	# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
	# -------------------------
	def run(self):
		logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

		async def start_background(application):
			asyncio.create_task(self._background_task())

		self.application.post_init = start_background
		self.application.run_polling(stop_signals=None)
