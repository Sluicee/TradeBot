import pandas as pd
import numpy as np
import ta
from typing import Dict, Any, Optional
from logger import logger
from config import (
	ADX_WINDOW, ADX_TRENDING, ADX_RANGING, ADX_STRONG, ADX_MODERATE,
	TRENDING_TREND_WEIGHT, TRENDING_OSCILLATOR_WEIGHT,
	RANGING_TREND_WEIGHT, RANGING_OSCILLATOR_WEIGHT,
	TRANSITIONING_TREND_WEIGHT, TRANSITIONING_OSCILLATOR_WEIGHT,
	VOTE_THRESHOLD_TRENDING, VOTE_THRESHOLD_RANGING, VOTE_THRESHOLD_TRANSITIONING,
	MIN_FILTERS, RSI_BUY_RANGE, RSI_SELL_RANGE, VOLUME_MODERATE_RATIO
)

class MarketRegimeDetector:
	"""
	üéØ –î–ï–¢–ï–ö–¢–û–† –†–ï–ñ–ò–ú–ê –†–´–ù–ö–ê
	
	–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞ (TRENDING/RANGING/TRANSITIONING) –Ω–∞ –æ—Å–Ω–æ–≤–µ:
	- ADX (—Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞)
	- –õ–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞)
	- –ê–Ω–∞–ª–∏–∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
	"""
	
	def __init__(self, df: pd.DataFrame):
		self.df = df.copy()
		if "close" not in self.df.columns:
			raise ValueError("DataFrame must contain 'close' column")
		self.df.sort_index(inplace=True)
	
	def detect_market_regime(self, indicators_data: Dict[str, Any]) -> Dict[str, Any]:
		"""
		üéØ –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –†–ï–ñ–ò–ú–ê –†–´–ù–ö–ê
		
		–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç ADX, –ª–∏–Ω–µ–π–Ω—É—é —Ä–µ–≥—Ä–µ—Å—Å–∏—é –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞.
		
		–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
		- indicators_data: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
		
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
		- dict: —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞ –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
		"""
		adx = indicators_data.get("ADX", 0)
		price = indicators_data.get("price", 0)
		
		# ====================================================================
		# –î–ï–¢–ï–ö–¶–ò–Ø –†–ï–ñ–ò–ú–ê: ADX + –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
		# ====================================================================
		
		# 1. –ë–∞–∑–æ–≤–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è —á–µ—Ä–µ–∑ ADX
		market_regime = "NEUTRAL"
		if adx > ADX_TRENDING:
			market_regime = "TRENDING"
		elif adx < ADX_RANGING:
			market_regime = "RANGING"
		else:
			market_regime = "TRANSITIONING"
		
		# 2. –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
		trend_strength = 0  # R¬≤ –æ—Ç 0 –¥–æ 1
		trend_direction = 0  # -1 (down), 0 (neutral), +1 (up)
		
		if len(self.df) >= 20:
			# –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Ü–µ–Ω –∑–∞–∫—Ä—ã—Ç–∏—è
			prices = self.df['close'].iloc[-20:].values
			x = np.arange(len(prices))
			
			# –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è: y = slope * x + intercept
			slope, intercept = np.polyfit(x, prices, 1)
			
			# R¬≤ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏) - –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –ª–∏–Ω–∏—è –æ–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ
			y_pred = slope * x + intercept
			ss_res = np.sum((prices - y_pred) ** 2)
			ss_tot = np.sum((prices - np.mean(prices)) ** 2)
			trend_strength = 1 - (ss_res / ss_tot) if ss_tot > 0 else 0
			trend_strength = max(0, min(1, trend_strength))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 0-1
			
			# –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ (–Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ % –∏–∑–º–µ–Ω–µ–Ω–∏—è)
			price_range = prices[-1] - prices[0]
			percent_change = (price_range / prices[0]) * 100 if prices[0] > 0 else 0
			
			if abs(percent_change) > 1.0 and trend_strength > 0.5:  # –°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
				trend_direction = 1 if slope > 0 else -1
			elif abs(percent_change) > 0.5 and trend_strength > 0.3:  # –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ç—Ä–µ–Ω–¥
				trend_direction = 1 if slope > 0 else -1
			else:
				trend_direction = 0
		
		# 3. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
		if trend_strength > 0.6 and abs(trend_direction) == 1:
			# –°–∏–ª—å–Ω—ã–π –ª–∏–Ω–µ–π–Ω—ã–π —Ç—Ä–µ–Ω–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω - –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ TRENDING
			if market_regime != "TRENDING":
				market_regime = "TRENDING"
		elif trend_strength < 0.3:
			# –°–ª–∞–±–∞—è –ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ñ–ª—ç—Ç
			if market_regime == "TRENDING":
				market_regime = "TRANSITIONING"
		
		# –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≤–µ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞
		if market_regime == "TRENDING":
			trend_weight = TRENDING_TREND_WEIGHT
			oscillator_weight = TRENDING_OSCILLATOR_WEIGHT
		elif market_regime == "RANGING":
			trend_weight = RANGING_TREND_WEIGHT
			oscillator_weight = RANGING_OSCILLATOR_WEIGHT
		else:
			trend_weight = TRANSITIONING_TREND_WEIGHT
			oscillator_weight = TRANSITIONING_OSCILLATOR_WEIGHT
		
		# –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞
		if market_regime == "TRENDING":
			vote_threshold = VOTE_THRESHOLD_TRENDING  # –í —Ç—Ä–µ–Ω–¥–µ –ª–µ–≥—á–µ –≤—Ö–æ–¥–∏—Ç—å
		elif market_regime == "RANGING":
			vote_threshold = VOTE_THRESHOLD_RANGING  # –í–æ —Ñ–ª—ç—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ
		else:
			vote_threshold = VOTE_THRESHOLD_TRANSITIONING
		
		return {
			"market_regime": market_regime,
			"trend_strength": trend_strength,
			"trend_direction": trend_direction,
			"trend_weight": trend_weight,
			"oscillator_weight": oscillator_weight,
			"vote_threshold": vote_threshold,
			"adx": adx
		}
	
	def analyze_voting_system(self, indicators_data: Dict[str, Any], regime_data: Dict[str, Any]) -> Dict[str, Any]:
		"""
		üó≥Ô∏è –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–´ –ì–û–õ–û–°–û–í–ê–ù–ò–Ø
		
		–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ–ª–æ—Å–∞ –∑–∞ BUY/SELL.
		"""
		# –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
		ema_s = indicators_data.get("EMA_short", 0)
		ema_l = indicators_data.get("EMA_long", 0)
		sma_20 = indicators_data.get("SMA_20", 0)
		sma_50 = indicators_data.get("SMA_50", 0)
		rsi = indicators_data.get("RSI", 50)
		macd = indicators_data.get("MACD", 0)
		macd_signal = indicators_data.get("MACD_signal", 0)
		macd_hist = indicators_data.get("MACD_hist", 0)
		stoch_k = indicators_data.get("Stoch_K", 50)
		stoch_d = indicators_data.get("Stoch_D", 50)
		volume_ratio = indicators_data.get("volume_ratio", 1.0)
		
		trend_weight = regime_data.get("trend_weight", 1.0)
		oscillator_weight = regime_data.get("oscillator_weight", 1.0)
		trend_direction = regime_data.get("trend_direction", 0)
		trend_strength = regime_data.get("trend_strength", 0)
		
		# –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
		bullish = 0
		bearish = 0
		reasons = []
		
		# EMA: –û—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–µ–Ω–¥. –ö–õ–Æ–ß–ï–í–û–ô –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä.
		if ema_s > ema_l:
			bullish += trend_weight
			reasons.append(f"EMA_short ({ema_s:.2f}) > EMA_long ({ema_l:.2f}) ‚Äî –±—ã—á–∏–π —Ç—Ä–µ–Ω–¥ [+{trend_weight}]")
		else:
			bearish += trend_weight
			reasons.append(f"EMA_short ({ema_s:.2f}) < EMA_long ({ema_l:.2f}) ‚Äî –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥ [+{trend_weight}]")
		
		# SMA: –°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥
		if sma_20 > sma_50:
			bullish += 1
			reasons.append(f"SMA_20 > SMA_50 ‚Äî –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥ –≤–≤–µ—Ä—Ö")
		elif sma_20 < sma_50:
			bearish += 1
			reasons.append(f"SMA_20 < SMA_50 ‚Äî –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥ –≤–Ω–∏–∑")
		
		# RSI: –ö–õ–Æ–ß–ï–í–û–ô –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä
		if rsi < 30:  # RSI_OVERSOLD
			bullish += 2 * oscillator_weight
			reasons.append(f"RSI ({rsi:.2f}) < 30 ‚Äî –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω [+{2*oscillator_weight}]")
		elif rsi < 35:  # RSI_OVERSOLD_NEAR
			bullish += oscillator_weight
			reasons.append(f"RSI ({rsi:.2f}) < 35 ‚Äî –±–ª–∏–∑–∫–æ –∫ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏ [+{oscillator_weight}]")
		elif rsi > 70:  # RSI_OVERBOUGHT
			bearish += 2 * oscillator_weight
			reasons.append(f"RSI ({rsi:.2f}) > 70 ‚Äî –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω [+{2*oscillator_weight}]")
		elif rsi > 65:  # RSI_OVERBOUGHT_NEAR
			bearish += oscillator_weight
			reasons.append(f"RSI ({rsi:.2f}) > 65 ‚Äî –±–ª–∏–∑–∫–æ –∫ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏ [+{oscillator_weight}]")
		else:
			reasons.append(f"RSI = {rsi:.2f} ‚Äî –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ")

		# MACD: –ö–õ–Æ–ß–ï–í–û–ô –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–¥–∞ –∏ –º–æ–º–µ–Ω—Ç—É–º–∞
		if macd > macd_signal:
			bullish += 2
			reasons.append(f"MACD ({macd:.4f}) > MACD_signal ({macd_signal:.4f}) ‚Äî –±—ã—á—å–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ [+2]")
		else:
			bearish += 2
			reasons.append(f"MACD ({macd:.4f}) < MACD_signal ({macd_signal:.4f}) ‚Äî –º–µ–¥–≤–µ–∂—å–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ [+2]")
			
		if macd_hist > 0:
			bullish += 1
			reasons.append(f"MACD_hist ({macd_hist:.4f}) > 0 ‚Äî –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç—É–º [+1]")
		else:
			bearish += 1
			reasons.append(f"MACD_hist ({macd_hist:.4f}) < 0 ‚Äî –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç—É–º [+1]")

		# –ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–µ–π
		if trend_direction == 1 and trend_strength > 0.5:
			# –°–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ –ø–æ –õ–†
			bullish += 1
			reasons.append(f"‚úì –õ–† –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ [+1]")
		elif trend_direction == -1 and trend_strength > 0.5:
			# –°–∏–ª—å–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ –ø–æ –õ–†
			bearish += 1
			reasons.append(f"‚úì –õ–† –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ [+1]")
			
		# Stochastic: –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
		if stoch_k < 20 and stoch_d < 20 and stoch_k > stoch_d:  # STOCH_OVERSOLD
			bullish += oscillator_weight
			reasons.append(f"Stoch K/D ({stoch_k:.2f}/{stoch_d:.2f}) < 20 –∏ K>D ‚Äî –≤—ã—Ö–æ–¥ –∏–∑ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏ [+{oscillator_weight}]")
		elif stoch_k > 80 and stoch_d > 80 and stoch_k < stoch_d:  # STOCH_OVERBOUGHT
			bearish += oscillator_weight
			reasons.append(f"Stoch K/D ({stoch_k:.2f}/{stoch_d:.2f}) > 80 –∏ K<D ‚Äî –≤—ã—Ö–æ–¥ –∏–∑ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏ [+{oscillator_weight}]")
		else:
			reasons.append(f"Stoch K/D ({stoch_k:.2f}/{stoch_d:.2f}): –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ")
		
		# –û–ë–™–Å–ú - –ö–†–ò–¢–ò–ß–ù–û! –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
		if volume_ratio > 1.5:  # VOLUME_HIGH_RATIO
			# –í—ã—Å–æ–∫–∏–π –æ–±—ä—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
			if ema_s > ema_l:
				bullish += 2
				reasons.append(f"–û–±—ä—ë–º {volume_ratio:.1f}x –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ [+2]")
			else:
				bearish += 2
				reasons.append(f"–û–±—ä—ë–º {volume_ratio:.1f}x –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞–¥–µ–Ω–∏—è [+2]")
		elif volume_ratio > 1.2:  # VOLUME_MODERATE_RATIO
			if ema_s > ema_l:
				bullish += 1
				reasons.append(f"–û–±—ä—ë–º {volume_ratio:.1f}x –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ ‚Äî —É–º–µ—Ä–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
			else:
				bearish += 1
				reasons.append(f"–û–±—ä—ë–º {volume_ratio:.1f}x –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ ‚Äî —É–º–µ—Ä–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
		elif volume_ratio < 0.8:  # VOLUME_LOW_RATIO
			reasons.append(f"–û–±—ä—ë–º {volume_ratio:.1f}x –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ ‚Äî —Å–ª–∞–±–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ")
		else:
			reasons.append(f"–û–±—ä—ë–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π ({volume_ratio:.1f}x)")
		
		return {
			"bullish_votes": bullish,
			"bearish_votes": bearish,
			"reasons": reasons
		}
	
	def check_filters(self, indicators_data: Dict[str, Any]) -> Dict[str, Any]:
		"""
		üîç –ü–†–û–í–ï–†–ö–ê –§–ò–õ–¨–¢–†–û–í
		
		–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è BUY/SELL —Å–∏–≥–Ω–∞–ª–æ–≤.
		"""
		# –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
		ema_s = indicators_data.get("EMA_short", 0)
		ema_l = indicators_data.get("EMA_long", 0)
		sma_20 = indicators_data.get("SMA_20", 0)
		sma_50 = indicators_data.get("SMA_50", 0)
		rsi = indicators_data.get("RSI", 50)
		macd = indicators_data.get("MACD", 0)
		macd_signal = indicators_data.get("MACD_signal", 0)
		macd_hist = indicators_data.get("MACD_hist", 0)
		adx = indicators_data.get("ADX", 0)
		volume_ratio = indicators_data.get("volume_ratio", 1.0)
		
		# –§–∏–ª—å—Ç—Ä—ã (—Å—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–π–¥–µ–Ω–æ)
		buy_filters_passed = 0
		sell_filters_passed = 0
		
		# 1. –¢—Ä–µ–Ω–¥
		buy_trend_ok = ema_s > ema_l and sma_20 > sma_50
		sell_trend_ok = ema_s < ema_l and sma_20 < sma_50
		if buy_trend_ok:
			buy_filters_passed += 1
		if sell_trend_ok:
			sell_filters_passed += 1
		
		# 2. ADX (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞)
		moderate_trend = adx > ADX_MODERATE
		strong_trend = adx > ADX_STRONG
		if strong_trend:
			buy_filters_passed += 1
			sell_filters_passed += 1
		elif moderate_trend:
			# –ü–æ–ª–æ–≤–∏–Ω–∫–∞ –±–∞–ª–ª–∞ –∑–∞ —É–º–µ—Ä–µ–Ω–Ω—ã–π —Ç—Ä–µ–Ω–¥
			pass
		
		# 3. RSI
		buy_rsi_ok = RSI_BUY_RANGE[0] < rsi < RSI_BUY_RANGE[1]  # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
		sell_rsi_ok = RSI_SELL_RANGE[0] < rsi < RSI_SELL_RANGE[1]
		if buy_rsi_ok:
			buy_filters_passed += 1
		if sell_rsi_ok:
			sell_filters_passed += 1
		
		# 4. MACD
		macd_buy_ok = macd > macd_signal
		macd_sell_ok = macd < macd_signal
		if macd_buy_ok and macd_hist > 0:
			buy_filters_passed += 1
		if macd_sell_ok and macd_hist < 0:
			sell_filters_passed += 1
		
		# 5. –û–±—ä—ë–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
		high_volume = volume_ratio > VOLUME_MODERATE_RATIO
		if high_volume:
			buy_filters_passed += 1
			sell_filters_passed += 1
		
		return {
			"buy_filters_passed": buy_filters_passed,
			"sell_filters_passed": sell_filters_passed,
			"min_filters": MIN_FILTERS
		}
