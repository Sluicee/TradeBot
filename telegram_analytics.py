"""
–ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è Telegram –±–æ—Ç–∞
–°–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ Kelly Criterion, –¥–æ–∫—É–ø–∞–Ω–∏–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
"""

from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes
from config import (
    USE_KELLY_CRITERION, KELLY_FRACTION, MIN_TRADES_FOR_KELLY, KELLY_LOOKBACK_WINDOW,
    ENABLE_AVERAGING, MAX_AVERAGING_ATTEMPTS, AVERAGING_PRICE_DROP_PERCENT,
    AVERAGING_TIME_THRESHOLD_HOURS, MAX_TOTAL_RISK_MULTIPLIER,
    ENABLE_PYRAMID_UP, PYRAMID_ADX_THRESHOLD
)
from logger import logger
from telegram_formatters import TelegramFormatters


class TelegramAnalytics:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
    
    def __init__(self, bot_instance):
        self.bot = bot_instance
        self.formatters = TelegramFormatters()
    
    def _is_authorized(self, update: Update) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞"""
        if self.bot.owner_chat_id is None:
            return True
        return update.effective_chat.id == self.bot.owner_chat_id

    async def kelly_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Kelly Criterion"""
        if not self._is_authorized(update):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        message = "üìä <b>Kelly Criterion</b>\n\n"
        message += f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if USE_KELLY_CRITERION else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}\n"
        message += f"Kelly Fraction: {KELLY_FRACTION:.0%} (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π)\n"
        message += f"Min Trades: {MIN_TRADES_FOR_KELLY}\n"
        message += f"Lookback Window: {KELLY_LOOKBACK_WINDOW} —Å–¥–µ–ª–æ–∫\n\n"
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π Kelly
        closed_trades = [
            t for t in self.bot.paper_trader.trades_history 
            if t.get("type") in ["SELL", "STOP-LOSS", "TRAILING-STOP", "TIME-EXIT"]
            and t.get("profit") is not None
        ]
        
        if len(closed_trades) >= MIN_TRADES_FOR_KELLY:
            recent_trades = closed_trades[-KELLY_LOOKBACK_WINDOW:]
            
            winning_trades = [t for t in recent_trades if t.get("profit", 0) > 0]
            losing_trades = [t for t in recent_trades if t.get("profit", 0) <= 0]
            
            win_rate = len(winning_trades) / len(recent_trades) if recent_trades else 0
            
            if winning_trades:
                avg_win = sum(t.get("profit_percent", 0) for t in winning_trades) / len(winning_trades)
            else:
                avg_win = 0
            
            if losing_trades:
                avg_loss = abs(sum(t.get("profit_percent", 0) for t in losing_trades) / len(losing_trades))
            else:
                avg_loss = 1.0
            
            if avg_win > 0 and avg_loss > 0:
                kelly_full = (win_rate * avg_win - (1 - win_rate) * avg_loss) / avg_win
                kelly_conservative = kelly_full * KELLY_FRACTION
                
                message += f"<b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({len(recent_trades)} —Å–¥–µ–ª–æ–∫):</b>\n"
                message += f"‚Ä¢ Win Rate: {win_rate:.1%}\n"
                message += f"‚Ä¢ Avg Win: {avg_win:.2f}%\n"
                message += f"‚Ä¢ Avg Loss: {avg_loss:.2f}%\n\n"
                message += f"<b>Kelly (–ø–æ–ª–Ω—ã–π):</b> {kelly_full:.2%}\n"
                message += f"<b>Kelly (1/4):</b> {kelly_conservative:.2%}\n\n"
                
                if kelly_conservative > 0:
                    message += f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ {kelly_conservative:.1%} –æ—Ç –±–∞–ª–∞–Ω—Å–∞"
                else:
                    message += "‚ö†Ô∏è Kelly –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π - —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —É–±—ã—Ç–æ—á–Ω–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–π –≤—ã–±–æ—Ä–∫–µ"
            else:
                message += "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ Kelly"
        else:
            message += f"‚è≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–¥–µ–ª–æ–∫: {len(closed_trades)}/{MIN_TRADES_FOR_KELLY}\n"
            message += "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –±–æ–ª—å—à–µ —Å–¥–µ–ª–æ–∫ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ Kelly Criterion"
        
        await update.message.reply_text(message, parse_mode="HTML")
    
    async def averaging_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç—É—Å –¥–æ–∫—É–ø–∞–Ω–∏–π –ø–æ –ø–æ–∑–∏—Ü–∏—è–º"""
        if not self._is_authorized(update):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        message = "üîÑ <b>–£–º–Ω–æ–µ –¥–æ–∫—É–ø–∞–Ω–∏–µ (Averaging)</b>\n\n"
        message += f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if ENABLE_AVERAGING else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}\n"
        message += f"Max Attempts: {MAX_AVERAGING_ATTEMPTS}\n"
        message += f"Price Drop: {AVERAGING_PRICE_DROP_PERCENT:.1%}\n"
        message += f"Time Threshold: {AVERAGING_TIME_THRESHOLD_HOURS}—á\n"
        message += f"Max Risk Multiplier: {MAX_TOTAL_RISK_MULTIPLIER}x\n"
        message += f"Pyramid Up: {'‚úÖ' if ENABLE_PYRAMID_UP else '‚ùå'} (ADX > {PYRAMID_ADX_THRESHOLD})\n\n"
        
        # –°—Ç–∞—Ç—É—Å –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
        if self.bot.paper_trader.positions:
            message += "<b>–¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏:</b>\n\n"
            
            for symbol, position in self.bot.paper_trader.positions.items():
                averaging_count = position.averaging_count
                avg_entry = position.average_entry_price
                entry_price = position.entry_price
                mode = "PYRAMID" if position.pyramid_mode else "AVERAGE"
                
                message += f"<b>{symbol}</b>\n"
                message += f"‚Ä¢ –í—Ö–æ–¥: {self.formatters.format_price(entry_price)}\n"
                
                if averaging_count > 0:
                    message += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è: {self.formatters.format_price(avg_entry)}\n"
                    message += f"‚Ä¢ –î–æ–∫—É–ø–∞–Ω–∏—è: {averaging_count}/{MAX_AVERAGING_ATTEMPTS} ({mode})\n"
                    message += f"‚Ä¢ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${position.total_invested:.2f}\n"
                    
                    # –ò—Å—Ç–æ—Ä–∏—è –¥–æ–∫—É–ø–∞–Ω–∏–π
                    if position.averaging_entries:
                        message += f"  –ó–∞–ø–∏—Å–∏:\n"
                        for i, entry in enumerate(position.averaging_entries[:3], 1):  # –ú–∞–∫—Å–∏–º—É–º 3
                            message += f"  {i}. ${entry['price']:.2f} - {entry['mode']}\n"
                else:
                    message += f"‚Ä¢ –î–æ–∫—É–ø–∞–Ω–∏—è: 0/{MAX_AVERAGING_ATTEMPTS}\n"
                
                message += "\n"
        else:
            message += "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–∫—É–ø–∞–Ω–∏—è–º
        avg_trades = [t for t in self.bot.paper_trader.trades_history if "AVERAGE" in t.get("type", "")]
        
        if avg_trades:
            message += f"\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ –¥–æ–∫—É–ø–∞–Ω–∏–π: {len(avg_trades)}\n"
            
            pyramid_trades = [t for t in avg_trades if "PYRAMID" in t.get("type", "")]
            average_trades = [t for t in avg_trades if "AVERAGE-AVERAGE" in t.get("type", "")]
            
            message += f"‚Ä¢ Pyramid Up: {len(pyramid_trades)}\n"
            message += f"‚Ä¢ Average Down: {len(average_trades)}\n"
        
        await update.message.reply_text(message, parse_mode="HTML")
    
    async def signal_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        if not self._is_authorized(update):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        try:
            from signal_diagnostics import diagnostics
            
            total = diagnostics.buy_signals_count + diagnostics.hold_signals_count + diagnostics.sell_signals_count
            
            if total == 0:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º. –ë–æ—Ç –µ—â—ë –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ –±—ã–ª–æ –ø—Ä–æ–≤–µ—Ä–æ–∫.")
                return
            
            message = "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–ì–ù–ê–õ–û–í v5.5</b>\n\n"
            message += f"<b>–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤:</b> {total}\n"
            message += f"‚Ä¢ BUY:  {diagnostics.buy_signals_count} ({diagnostics.buy_signals_count/total*100:.1f}%)\n"
            message += f"‚Ä¢ HOLD: {diagnostics.hold_signals_count} ({diagnostics.hold_signals_count/total*100:.1f}%)\n"
            message += f"‚Ä¢ SELL: {diagnostics.sell_signals_count} ({diagnostics.sell_signals_count/total*100:.1f}%)\n\n"
            
            if diagnostics.last_buy_time:
                message += f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π BUY:</b> {diagnostics.last_buy_time}\n\n"
            else:
                message += "‚ö†Ô∏è <b>–ù–∏ –æ–¥–Ω–æ–≥–æ BUY —Å–∏–≥–Ω–∞–ª–∞!</b>\n\n"
            
            if diagnostics.blocked_reasons:
                message += "<b>üö´ –ü—Ä–∏—á–∏–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ BUY:</b>\n"
                for reason, count in sorted(diagnostics.blocked_reasons.items(), key=lambda x: x[1], reverse=True)[:5]:
                    message += f"‚Ä¢ {reason}: {count}x\n"
                message += "\n"
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–∏–≥–Ω–∞–ª–æ–≤
            if len(diagnostics.signal_history) > 0:
                recent = diagnostics.signal_history[-5:]
                message += "<b>üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–∏–≥–Ω–∞–ª–æ–≤:</b>\n"
                for sig in recent:
                    symbol = sig["symbol"]
                    signal = sig["signal"]
                    delta = sig["votes_delta"]
                    mode = sig["mode"]
                    emoji = "‚úÖ" if sig["can_buy"] else "‚ùå"
                    message += f"{emoji} {symbol}: {signal} (Œî{delta:+d}, {mode})\n"
            
            message += "\nüí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /signal_analysis –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞</i>"
            
            await update.message.reply_text(message, parse_mode="HTML")
            
        except ImportError:
            await update.message.reply_text("‚ö†Ô∏è –ú–æ–¥—É–ª—å signal_diagnostics –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def signal_analysis(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        if not self._is_authorized(update):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        try:
            from signal_diagnostics import diagnostics
            
            if not diagnostics.signal_history:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–∏–∫–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
                return
            
            deltas = [s["votes_delta"] for s in diagnostics.signal_history]
            
            message = "üîç <b>–ê–ù–ê–õ–ò–ó –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ì–û–õ–û–°–û–í</b>\n\n"
            message += f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            message += f"‚Ä¢ Min delta: {min(deltas):+d}\n"
            message += f"‚Ä¢ Max delta: {max(deltas):+d}\n"
            message += f"‚Ä¢ Avg delta: {sum(deltas)/len(deltas):+.1f}\n"
            message += f"‚Ä¢ Median: {sorted(deltas)[len(deltas)//2]:+d}\n\n"
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (HYBRID v5.5 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –ª–æ–≥–∏–∫—É, –ø—Ä–∏–º–µ—Ä–Ω—ã–π –ø–æ—Ä–æ–≥ ~5)
            min_buy_threshold = 5
            ranges = [
                (float('-inf'), -5, "–°–∏–ª—å–Ω–æ bearish (&lt;-5)"),
                (-5, -3, "–°—Ä–µ–¥–Ω–µ bearish (-5..-3)"),
                (-3, 0, "–°–ª–∞–±–æ bearish (-3..0)"),
                (0, 3, "–°–ª–∞–±–æ bullish (0..3)"),
                (3, min_buy_threshold, f"–°—Ä–µ–¥–Ω–µ bullish (3..{min_buy_threshold-1})"),
                (min_buy_threshold, float('inf'), f"üéØ BUY (&gt;={min_buy_threshold})")
            ]
            
            message += "<b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</b>\n"
            for low, high, label in ranges:
                count = len([d for d in deltas if low <= d < high])
                pct = count / len(deltas) * 100
                if count > 0:
                    message += f"‚Ä¢ {label}: {count} ({pct:.1f}%)\n"
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            max_delta = max(deltas)
            avg_delta = sum(deltas)/len(deltas)
            buy_ready = len([d for d in deltas if d >= min_buy_threshold])
            
            message += "\n<b>üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:</b>\n"
            
            if max_delta < min_buy_threshold:
                message += f"‚ö†Ô∏è Max delta ({max_delta:+d}) &lt; –ø—Ä–∏–º–µ—Ä–Ω—ã–π –ø–æ—Ä–æ–≥ BUY (~{min_buy_threshold})\n"
                message += f"‚Üí –†—ã–Ω–æ–∫ —Å–ª–∞–±—ã–π, –¥–æ–∂–¥–∞—Ç—å—Å—è –±–æ–ª–µ–µ —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤\n"
            
            if avg_delta < 0:
                message += f"‚ö†Ô∏è Avg delta –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ({avg_delta:+.1f})\n"
                message += "‚Üí –†—ã–Ω–æ–∫ –º–µ–¥–≤–µ–∂–∏–π, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n"
            
            if buy_ready == 0:
                message += "‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω —Å–∏–≥–Ω–∞–ª –Ω–µ –¥–æ—Å—Ç–∏–≥ –ø–æ—Ä–æ–≥–∞ BUY!\n"
                message += "‚Üí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ —Å–º—è–≥—á–∏—Ç—å —É—Å–ª–æ–≤–∏—è\n"
            else:
                message += f"‚úÖ {buy_ready} —Å–∏–≥–Ω–∞–ª–æ–≤ –≥–æ—Ç–æ–≤—ã –∫ BUY ({buy_ready/len(deltas)*100:.1f}%)\n"
            
            await update.message.reply_text(message, parse_mode="HTML")
            
        except ImportError:
            await update.message.reply_text("‚ö†Ô∏è –ú–æ–¥—É–ª—å signal_diagnostics –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∞–Ω–∞–ª–∏–∑–∞.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
