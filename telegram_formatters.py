"""
–ú–æ–¥—É–ª—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram –±–æ—Ç–∞
–°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –¥–∞–Ω–Ω—ã—Ö
"""

import math
import html
from config import MTF_TIMEFRAMES, ADX_WINDOW


class TelegramFormatters:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –±–æ—Ç–∞"""
    
    def format_price(self, price: float) -> str:
        """–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ–ª–∏—á–∏–Ω—ã"""
        if price >= 1000:
            return f"${price:,.2f}"  # 1,234.56
        elif price >= 1:
            return f"${price:.4f}"  # 12.3456
        elif price >= 0.0001:
            # –î–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ü–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–∞—â–∏–µ —Ü–∏—Ñ—Ä—ã
            decimals = max(4, abs(int(math.log10(abs(price)))) + 3)
            return f"${price:.{decimals}f}"
        else:
            return f"${price:.8f}"  # –°–æ–≤—Å–µ–º –º–∞–ª–µ–Ω—å–∫–∏–µ —Ü–µ–Ω—ã

    def format_analysis(self, result, symbol, interval):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        def html_escape(s):
            s = str(s)
            s = s.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace('"', '&quot;')
            return s

        def fmt_price(val):
            """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã (2 –∑–Ω–∞–∫–∞ –¥–ª—è USDT –ø–∞—Ä)"""
            if val is None or (isinstance(val, float) and (math.isnan(val) or math.isinf(val))):
                return '–Ω/–¥'
            if isinstance(val, float):
                # –î–ª—è –±–æ–ª—å—à–∏—Ö —Ü–µ–Ω (>1000) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 2 –∑–Ω–∞–∫–∞, –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö (<1) - 8
                if val > 1000:
                    return f'{val:.2f}'
                elif val > 1:
                    return f'{val:.4f}'
                else:
                    return f'{val:.8f}'
            return str(val)
        
        def fmt_indicator(val):
            """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (RSI, ADX) - 1 –∑–Ω–∞–∫ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π"""
            if val is None or (isinstance(val, float) and (math.isnan(val) or math.isinf(val))):
                return '–Ω/–¥'
            if isinstance(val, (int, float)) and val == 0:
                return '–Ω/–¥'
            return f'{val:.1f}' if isinstance(val, float) else str(val)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        signal = html_escape(result.get('signal', 'HOLD'))
        emoji = result.get('signal_emoji', '‚ö†Ô∏è')
        price = result.get('price', 0)
        rsi = result.get('RSI', 0)
        adx = result.get('ADX', 0)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º
        market_regime = result.get('market_regime', 'NEUTRAL')
        strategy_mode = result.get('strategy', 'UNKNOWN')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º MTF
        is_mtf = result.get('mtf_enabled', False)
        alignment = result.get('alignment_strength', 0)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        lines = [
            f"<b>{html_escape(symbol)}</b> {emoji} <b>{signal}</b>",
            f"üí∞ –¶–µ–Ω–∞: <code>${fmt_price(price)}</code> | üìä RSI: <code>{fmt_indicator(rsi)}</code> | ADX: <code>{fmt_indicator(adx)}</code>"
        ]
        
        # –†–µ–∂–∏–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if market_regime != 'NEUTRAL':
            lines.append(f"üéØ –†–µ–∂–∏–º: <b>{market_regime}</b>")
        
        # MTF –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if is_mtf:
            lines.append(f"üîÄ MTF: —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å {alignment*100:.0f}%")
        
        # –ü–µ—Ä–≤—ã–µ 2 –ø—Ä–∏—á–∏–Ω—ã (—Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ)
        if result.get("reasons"):
            lines.append(f"\nüìù <i>{html_escape(result['reasons'][0])}</i>")
            if len(result["reasons"]) > 1:
                lines.append(f"<i>{html_escape(result['reasons'][1])}</i>")
        
        return "\n".join(lines)

    def format_volatility(self, symbol, interval, change, close_price, window):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        direction = "‚Üë" if change > 0 else "‚Üì"
        return f"<b>{symbol}</b> ‚ö†Ô∏è {change*100:.2f}% {direction} | –¶–µ–Ω–∞: {close_price:.8f}"

    def _format_mtf_analysis(self, result: dict, symbol: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—ã–≤–æ–¥ MTF –∞–Ω–∞–ª–∏–∑–∞"""
        signal = result.get("signal", "HOLD")
        emoji = result.get("signal_emoji", "‚ö†Ô∏è")
        price = result.get("price", 0)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        lines = [
            f"üîÄ <b>Multi-Timeframe –ê–Ω–∞–ª–∏–∑: {symbol}</b>",
            f"üí∞ –¶–µ–Ω–∞: <code>${price:.4f}</code>",
            f"",
            f"{emoji} <b>–ò—Ç–æ–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: {signal}</b>",
            f""
        ]
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
        timeframe_signals = result.get("timeframe_signals", {})
        if timeframe_signals:
            lines.append("üìä <b>–°–∏–≥–Ω–∞–ª—ã –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º:</b>")
            for tf in MTF_TIMEFRAMES:
                tf_data = timeframe_signals.get(tf, {})
                tf_signal = tf_data.get("signal", "HOLD")
                tf_weight = tf_data.get("weight", 0)
                tf_rsi = tf_data.get("RSI", 0)
                tf_adx = tf_data.get("ADX", 0)
                
                # Emoji –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
                if tf_signal == "BUY":
                    tf_emoji = "üü¢"
                elif tf_signal == "SELL":
                    tf_emoji = "üî¥"
                else:
                    tf_emoji = "‚ö†Ô∏è"
                
                lines.append(
                    f"  {tf_emoji} <b>{tf}</b>: {tf_signal} "
                    f"(–≤–µ—Å: {tf_weight:.2f}, RSI: {tf_rsi:.1f}, ADX: {tf_adx:.1f})"
                )
            lines.append("")
        
        # –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
        alignment_strength = result.get("alignment_strength", 0)
        buy_count = result.get("buy_count", 0)
        sell_count = result.get("sell_count", 0)
        hold_count = result.get("hold_count", 0)
        
        lines.append(f"üéØ <b>–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å:</b> {alignment_strength*100:.0f}%")
        lines.append(f"   BUY: {buy_count} | SELL: {sell_count} | HOLD: {hold_count}")
        lines.append("")
        
        # Weighted scores
        buy_score = result.get("buy_score", 0)
        sell_score = result.get("sell_score", 0)
        hold_score = result.get("hold_score", 0)
        
        lines.append(f"‚öñÔ∏è <b>–í–∑–≤–µ—à–µ–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏:</b>")
        lines.append(f"   BUY: {buy_score:.2f} | SELL: {sell_score:.2f} | HOLD: {hold_score:.2f}")
        lines.append("")
        
        # –ü—Ä–∏—á–∏–Ω—ã
        reasons = result.get("reasons", [])
        if reasons:
            lines.append("<b>üìù –ü—Ä–∏—á–∏–Ω—ã:</b>")
            for reason in reasons[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                # –£–±–∏—Ä–∞–µ–º emoji –∏–∑ –ø—Ä–∏—á–∏–Ω –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
                clean_reason = reason.replace("üìä", "").replace("‚úÖ", "").replace("‚ö†Ô∏è", "").strip()
                lines.append(f"  ‚Ä¢ {clean_reason}")
        
        return "\n".join(lines)

    def format_paper_trade_message(self, trade_type: str, symbol: str, price: float, 
                                 profit: float = 0, profit_percent: float = 0, 
                                 invest_amount: float = 0, balance_after: float = 0,
                                 **kwargs) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ Paper Trading"""
        if trade_type == "STOP-LOSS":
            return (
                f"üõë <b>STOP-LOSS</b> {symbol}\n"
                f"  –¶–µ–Ω–∞: {self.format_price(price)}\n"
                f"  –£–±—ã—Ç–æ–∫: ${profit:+.2f} ({profit_percent:+.2f}%)"
            )
        elif trade_type == "PARTIAL-TP":
            return (
                f"üíé <b>PARTIAL TP</b> {symbol}\n"
                f"  –¶–µ–Ω–∞: {self.format_price(price)}\n"
                f"  –ü—Ä–∏–±—ã–ª—å: ${profit:+.2f} ({profit_percent:+.2f}%)\n"
                f"  –ó–∞–∫—Ä—ã—Ç–æ: 50%, –∞–∫—Ç–∏–≤–µ–Ω trailing stop"
            )
        elif trade_type == "TRAILING-STOP":
            return (
                f"üîª <b>TRAILING STOP</b> {symbol}\n"
                f"  –¶–µ–Ω–∞: {self.format_price(price)}\n"
                f"  –ü—Ä–∏–±—ã–ª—å: ${profit:+.2f} ({profit_percent:+.2f}%)"
            )
        elif trade_type == "BUY":
            return (
                f"üü¢ <b>–ö–£–ü–ò–õ</b> {symbol}\n"
                f"  –¶–µ–Ω–∞: {self.format_price(price)}\n"
                f"  –í–ª–æ–∂–µ–Ω–æ: ${invest_amount:.2f}\n"
                f"  –ë–∞–ª–∞–Ω—Å: ${balance_after:.2f}"
            )
        elif trade_type == "SELL":
            profit_emoji = "üìà" if profit > 0 else "üìâ"
            return (
                f"üî¥ <b>–ü–†–û–î–ê–õ</b> {symbol}\n"
                f"  –¶–µ–Ω–∞: {self.format_price(price)}\n"
                f"  {profit_emoji} –ü—Ä–∏–±—ã–ª—å: ${profit:+.2f} ({profit_percent:+.2f}%)\n"
                f"  –ë–∞–ª–∞–Ω—Å: ${balance_after:.2f}"
            )
        else:
            return f"üìä <b>{trade_type}</b> {symbol} @ {self.format_price(price)}"

    def format_debug_analysis(self, symbol: str, result: dict, df) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Å–∏–≥–Ω–∞–ª—É"""
        signal = result["signal"]
        price = result["price"]
        bullish = result.get("bullish_votes", 0)
        bearish = result.get("bearish_votes", 0)
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞—Ö (–∏–∑ result –∏–ª–∏ –∏–∑ DataFrame)
        last = df.iloc[-1]
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ result, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã, –∏–Ω–∞—á–µ –∏–∑ DataFrame
        rsi = float(result.get("RSI", last.get("RSI", 50)))
        adx = float(result.get("ADX", last.get(f"ADX_{ADX_WINDOW}", 0)))
        ema_s = float(result.get("EMA_short", last.get("EMA_short", 0)))
        ema_l = float(result.get("EMA_long", last.get("EMA_long", 0)))
        sma_20 = float(last.get("SMA_20", 0))
        sma_50 = float(last.get("SMA_50", 0))
        macd = float(result.get("MACD", last.get("MACD", 0)))
        macd_signal = float(result.get("MACD_signal", last.get("MACD_signal", 0)))
        macd_hist = float(result.get("MACD_hist", last.get("MACD_hist", 0)))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è BUY
        buy_trend_ok = ema_s > ema_l and sma_20 > sma_50
        buy_rsi_ok = 35 < rsi < 70
        macd_buy_ok = macd > macd_signal and macd_hist > 0
        strong_trend = adx > 25
        vote_diff = bullish - bearish
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è SELL
        sell_trend_ok = ema_s < ema_l and sma_20 < sma_50
        sell_rsi_ok = 30 < rsi < 65
        macd_sell_ok = macd < macd_signal and macd_hist < 0
        
        signal_emoji = "üü¢" if signal == "BUY" else "üî¥" if signal == "SELL" else "‚ö†Ô∏è"
        
        text = (
            f"<b>üîç Debug: {symbol}</b> [{signal_emoji} {signal}]\n\n"
            f"üí∞ –¶–µ–Ω–∞: {self.format_price(price)}\n\n"
            f"<b>üìä –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ:</b>\n"
            f"  –ë—ã—á—å–∏: {bullish} | –ú–µ–¥–≤–µ–∂—å–∏: {bearish}\n"
            f"  –†–∞–∑–Ω–∏—Ü–∞: {vote_diff} (–ø–æ—Ä–æ–≥: 5)\n\n"
            f"<b>üìà –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b>\n"
            f"  EMA: {ema_s:.2f} vs {ema_l:.2f} {'‚úÖ' if ema_s > ema_l else '‚ùå'}\n"
            f"  SMA: {sma_20:.2f} vs {sma_50:.2f} {'‚úÖ' if sma_20 > sma_50 else '‚ùå'}\n"
            f"  RSI: {rsi:.1f} (35-70 –¥–ª—è BUY) {'‚úÖ' if buy_rsi_ok else '‚ùå'}\n"
            f"  MACD: {macd:.4f} vs {macd_signal:.4f} {'‚úÖ' if macd > macd_signal else '‚ùå'}\n"
            f"  MACD hist: {macd_hist:.4f} {'‚úÖ' if macd_hist > 0 else '‚ùå'}\n"
            f"  ADX: {adx:.1f} (&gt;25 –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞) {'‚úÖ' if strong_trend else '‚ùå'}\n\n"
            f"<b>üéØ –§–∏–ª—å—Ç—Ä—ã BUY:</b>\n"
            f"  {'‚úÖ' if vote_diff >= 5 else '‚ùå'} –ì–æ–ª–æ—Å–æ–≤ &gt;= 5: {vote_diff}/5\n"
            f"  {'‚úÖ' if strong_trend else '‚ùå'} –°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥: ADX {adx:.1f}/25\n"
            f"  {'‚úÖ' if buy_trend_ok else '‚ùå'} –¢—Ä–µ–Ω–¥ –≤–≤–µ—Ä—Ö: EMA+SMA\n"
            f"  {'‚úÖ' if buy_rsi_ok else '‚ùå'} RSI –≤ –∑–æ–Ω–µ: {rsi:.1f}\n"
            f"  {'‚úÖ' if macd_buy_ok else '‚ùå'} MACD –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—ã
        text += "<b>üìù –ü—Ä–∏—á–∏–Ω—ã:</b>\n"
        for i, reason in enumerate(result["reasons"][-5:], 1):
            escaped_reason = html.escape(reason)
            text += f"{i}. {escaped_reason[:80]}...\n" if len(escaped_reason) > 80 else f"{i}. {escaped_reason}\n"
        
        return text

    def format_candidates_list(self, candidates: list) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ —Å–∏–≥–Ω–∞–ª"""
        if not candidates:
            return "‚ö†Ô∏è –ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –±–ª–∏–∑–∫–∏—Ö –∫ —Å–∏–≥–Ω–∞–ª—É.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –ø–∞—Ä."
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–æ–ª–æ—Å–æ–≤ (–±–æ–ª—å—à–µ = –±–ª–∏–∂–µ –∫ —Å–∏–≥–Ω–∞–ª—É)
        candidates.sort(key=lambda x: x['votes'], reverse=True)
        
        text = f"<b>üéØ –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ —Å–∏–≥–Ω–∞–ª ({len(candidates)}):</b>\n\n"
        
        for c in candidates[:10]:  # –¢–æ–ø 10
            emoji = "üü¢" if c['direction'] == "BUY" else "üî¥"
            text += (
                f"{emoji} <b>{c['symbol']}</b> ‚Üí {c['direction']}\n"
                f"  –ì–æ–ª–æ—Å–æ–≤: {c['votes']}/5 | ADX: {c['adx']:.1f}/25\n"
                f"  RSI: {c['rsi']:.1f} | –¶–µ–Ω–∞: {self.format_price(c['price'])}\n\n"
            )
        
        text += "<i>–≠—Ç–∏ –ø–∞—Ä—ã –±–ª–∏–∑–∫–∏ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞</i>"
        return text
