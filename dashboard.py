import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import json
import os
import sys
import subprocess
import time
import traceback
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
import numpy as np
from scipy import stats as scipy_stats
from database import db, Signal, PaperTradingState
from logger import logger

# –ò–º–ø–æ—Ä—Ç—ã –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ (–º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º–∞—Ö)
try:
	import psutil
except ImportError:
	psutil = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
	page_title="TradeBot Dashboard",
	page_icon="üìà",
	layout="wide",
	initial_sidebar_state="expanded"
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SETTINGS_FILE = "dashboard_settings.json"
LOG_DIR = "logs"
PROCESS_NAME = "main.py"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Plotly –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
PLOTLY_CONFIG = {
	'displaylogo': False,
	'modeBarButtonsToRemove': ['pan2d', 'lasso2d', 'select2d']
}

def get_latest_log_file() -> Optional[str]:
	"""–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤"""
	if not os.path.exists(LOG_DIR):
		return None
	
	log_files = [f for f in os.listdir(LOG_DIR) if f.startswith("log_") and f.endswith(".txt")]
	if not log_files:
		return None
	
	# –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Å–∞–º—ã–π –Ω–æ–≤—ã–π –ø–µ—Ä–≤—ã–π)
	log_files_with_time = [(f, os.path.getmtime(os.path.join(LOG_DIR, f))) for f in log_files]
	log_files_with_time.sort(key=lambda x: x[1], reverse=True)
	return os.path.join(LOG_DIR, log_files_with_time[0][0])

# ====================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ====================================================================

def get_current_prices() -> Dict[str, float]:
	"""–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –ë–î"""
	try:
		with db.session_scope() as session:
			from sqlalchemy import func
			
			# –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
			subquery = session.query(
				Signal.symbol,
				func.max(Signal.time).label('max_time')
			).group_by(Signal.symbol).subquery()
			
			latest_signals = session.query(Signal).join(
				subquery,
				(Signal.symbol == subquery.c.symbol) & (Signal.time == subquery.c.max_time)
			).all()
			
			prices = {signal.symbol: signal.price for signal in latest_signals}
			return prices
	except Exception as e:
		logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω –∏–∑ –ë–î: {e}")
		return {}

@st.cache_data(ttl=10)
def load_paper_trader_state() -> Optional[Dict[str, Any]]:
	"""–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ paper trader –∏–∑ –ë–î"""
	try:
		# –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		db_state = db.get_paper_state()
		if not db_state:
			return None
		
		# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –∏–∑ –ë–î
		current_prices = get_current_prices()
		
		# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
		positions = {}
		db_positions = db.get_all_positions()
		for pos in db_positions:
			# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏–∑ –ë–î –∏–ª–∏ entry_price –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
			current_price = current_prices.get(pos.symbol, pos.entry_price)
			
			positions[pos.symbol] = {
				"symbol": pos.symbol,
				"entry_price": pos.entry_price,
				"current_price": current_price,  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
				"amount": pos.amount,
				"entry_time": pos.entry_time.isoformat() if pos.entry_time else None,
				"signal_strength": pos.signal_strength,
				"invest_amount": pos.invest_amount,
				"entry_commission": pos.entry_commission,
				"atr": pos.atr,
				"stop_loss_price": pos.stop_loss_price,
				"stop_loss_percent": pos.stop_loss_percent,
				"take_profit_price": pos.take_profit_price,
				"partial_closed": pos.partial_closed,
				"max_price": pos.max_price,
				"partial_close_profit": pos.partial_close_profit,
				"original_amount": pos.original_amount,
				"averaging_count": pos.averaging_count,
				"average_entry_price": pos.average_entry_price,
				"pyramid_mode": pos.pyramid_mode,
				"total_invested": pos.total_invested,
				"averaging_entries": db.get_averaging_entries(pos.id)
			}
		
		# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫
		trades_history = db.get_trades_history(limit=1000)
		
		# –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∫ —Ä–∞–Ω—å—à–µ
		state = {
			"initial_balance": db_state.initial_balance,
			"balance": db_state.balance,
			"positions": positions,
			"current_prices": current_prices,  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
			"trades_history": trades_history,
			"stats": {
				"total_trades": db_state.total_trades,
				"winning_trades": db_state.winning_trades,
				"losing_trades": db_state.losing_trades,
				"total_commission": db_state.total_commission,
				"stop_loss_triggers": db_state.stop_loss_triggers,
				"take_profit_triggers": db_state.take_profit_triggers,
				"trailing_stop_triggers": db_state.trailing_stop_triggers
			},
			"is_running": db_state.is_running,
			"start_time": db_state.start_time.isoformat() if db_state.start_time else None,
			"max_positions": 3  # TODO: –ø–æ–ª—É—á–∏—Ç—å –∏–∑ config
		}
		
		return state
		
	except Exception as e:
		st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –ë–î: {e}")
		return None

def check_bot_status() -> Dict[str, Any]:
	"""–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
	log_file = get_latest_log_file()
	status = {
		"is_running": False,
		"last_update": None,
		"state_file_exists": False,
		"state_file_age": None,
		"log_file_exists": log_file is not None and os.path.exists(log_file),
		"process_found": False,
		"uptime": None
	}
	
	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	try:
		db_state = db.get_paper_state()
		if db_state:
			status["state_file_exists"] = True
			if db_state.updated_at:
				status["last_update"] = db_state.updated_at
				age_seconds = (datetime.now() - db_state.updated_at).total_seconds()
				status["state_file_age"] = age_seconds
				
				# –°—á–∏—Ç–∞–µ–º –±–æ—Ç –∂–∏–≤—ã–º –µ—Å–ª–∏ –ë–î –æ–±–Ω–æ–≤–ª—è–ª–∞—Å—å –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
				if age_seconds < 300:
					status["is_running"] = True
			# –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ is_running
			if db_state.is_running:
				status["is_running"] = True
	except Exception as e:
		pass
	
	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ –Ω–∞ Windows)
	if psutil:
		try:
			for proc in psutil.process_iter(['pid', 'name', 'cmdline', 'create_time']):
				try:
					cmdline = proc.info.get('cmdline', [])
					# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
					if cmdline and any(name in ' '.join(cmdline) for name in ['bot.py', 'main.py', 'telegram_bot.py', 'paper_trader.py']):
						status["process_found"] = True
						status["uptime"] = datetime.now() - datetime.fromtimestamp(proc.info['create_time'])
						status["is_running"] = True
						break
				except (psutil.NoSuchProcess, psutil.AccessDenied):
					continue
		except Exception:
			pass  # psutil –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
	
	return status

def read_recent_logs(num_lines: int = 50) -> List[str]:
	"""–ß–∏—Ç–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫ –∏–∑ –ª–æ–≥-—Ñ–∞–π–ª–∞"""
	log_file = get_latest_log_file()
	if not log_file or not os.path.exists(log_file):
		return ["–õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"]
	
	try:
		with open(log_file, "r", encoding="utf-8", errors="ignore") as f:
			lines = f.readlines()
			return lines[-num_lines:] if len(lines) > num_lines else lines
	except Exception as e:
		return [f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}"]

def parse_log_line(line: str) -> Dict[str, str]:
	"""–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
	line = line.strip()
	if not line:
		return {"level": "INFO", "message": ""}
	
	# –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	for level in ["ERROR", "WARNING", "INFO", "DEBUG", "CRITICAL"]:
		if level in line.upper():
			return {"level": level, "message": line}
	
	return {"level": "INFO", "message": line}

@st.cache_data(ttl=300)
def load_backtest_results() -> Dict[str, Any]:
	"""–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –±—ç–∫—Ç–µ—Å—Ç–æ–≤ –∏–∑ –ë–î"""
	results = {}
	
	try:
		# –ó–∞–≥—Ä—É–∂–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç—ã –∏–∑ –ë–î
		backtests = db.get_backtests(limit=50)
		
		for backtest_data in backtests:
			# –°–æ–∑–¥–∞—ë–º –∫–ª—é—á –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å UI
			key = f"{backtest_data['symbol']}_{backtest_data['interval']}_{backtest_data['created_at'][:10]}.json"
			
			# –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–∞–∫ —Ä–∞–Ω—å—à–µ
			results[key] = {
				"symbol": backtest_data["symbol"],
				"interval": backtest_data["interval"],
				"start_date": backtest_data.get("start_date"),
				"end_date": backtest_data.get("end_date"),
				"initial_balance": backtest_data["initial_balance"],
				"final_balance": backtest_data["final_balance"],
				"total_return": backtest_data["total_return"],
				"roi_percent": backtest_data["total_return_percent"],
				"total_trades": backtest_data["total_trades"],
				"winning_trades": backtest_data["winning_trades"],
				"losing_trades": backtest_data["losing_trades"],
				"win_rate": backtest_data["win_rate"],
				"max_drawdown_percent": backtest_data["max_drawdown"],
				"sharpe_ratio": backtest_data["sharpe_ratio"],
				"profit_factor": backtest_data["profit_factor"],
				"stats": backtest_data.get("stats", {}),
				"trades": []  # –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
			}
			
			# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω—ã trades
			full_backtest = db.get_backtest(backtest_data["id"])
			if full_backtest:
				results[key]["trades"] = full_backtest.get("trades", [])
		
	except Exception as e:
		st.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—ç–∫—Ç–µ—Å—Ç–æ–≤ –∏–∑ –ë–î: {e}")
	
	return results

def load_settings() -> Dict[str, Any]:
	"""–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ dashboard"""
	if os.path.exists(SETTINGS_FILE):
		try:
			with open(SETTINGS_FILE, "r", encoding="utf-8") as f:
				return json.load(f)
		except:
			pass
	return {
		"kelly_enabled": True,
		"averaging_enabled": True,
		"pyramid_enabled": True,
		"kelly_fraction": 0.25,
		"max_averaging": 2,
		"averaging_drop": 5.0
	}

def save_settings(settings: Dict[str, Any]):
	"""–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ dashboard"""
	try:
		with open(SETTINGS_FILE, "w", encoding="utf-8") as f:
			json.dump(settings, f, indent=2)
	except Exception as e:
		st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

def format_price(price: float) -> str:
	"""–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π"""
	if price == 0:
		return "$0.00"
	elif price < 0.01:
		return f"${price:.8f}"
	elif price < 1:
		return f"${price:.6f}"
	elif price < 100:
		return f"${price:.4f}"
	else:
		return f"${price:.2f}"

def calculate_metrics(trades: List[Dict[str, Any]]) -> Dict[str, float]:
	"""–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
	if not trades:
		return {}
	
	# –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏ —Å profit
	closed_trades = [t for t in trades if "profit" in t and t.get("profit") is not None]
	
	if not closed_trades:
		return {}
	
	profits = [t["profit"] for t in closed_trades]
	profit_percents = [t.get("profit_percent", 0) for t in closed_trades]
	
	winning_trades = [t for t in closed_trades if t["profit"] > 0]
	losing_trades = [t for t in closed_trades if t["profit"] <= 0]
	
	total_trades = len(closed_trades)
	win_count = len(winning_trades)
	loss_count = len(losing_trades)
	
	win_rate = (win_count / total_trades) * 100 if total_trades > 0 else 0
	
	avg_win = np.mean([t["profit"] for t in winning_trades]) if winning_trades else 0
	avg_loss = np.mean([abs(t["profit"]) for t in losing_trades]) if losing_trades else 0
	
	total_wins = sum(t["profit"] for t in winning_trades)
	total_losses = abs(sum(t["profit"] for t in losing_trades))
	
	profit_factor = total_wins / total_losses if total_losses > 0 else 0
	
	# Sharpe Ratio (–≥–æ–¥–æ–≤–æ–π)
	if len(profit_percents) > 1:
		# –§–∏–ª—å—Ç—Ä—É–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
		valid_percents = [p for p in profit_percents if p is not None]
		if len(valid_percents) > 1:
			returns_std = np.std(valid_percents)
			avg_return = np.mean(valid_percents)
			sharpe = (avg_return / returns_std) * np.sqrt(252) if returns_std > 0 else 0
		else:
			sharpe = 0
	else:
		sharpe = 0
	
	# Sortino Ratio
	downside_returns = [p for p in profit_percents if p is not None and p < 0]
	if downside_returns and len(downside_returns) > 1:
		downside_std = np.std(downside_returns)
		avg_return = np.mean([p for p in profit_percents if p is not None])
		sortino = (avg_return / downside_std) * np.sqrt(252) if downside_std > 0 else 0
	else:
		sortino = 0
	
	# Max consecutive wins/losses
	max_consecutive_wins = 0
	max_consecutive_losses = 0
	current_wins = 0
	current_losses = 0
	
	for trade in closed_trades:
		if trade["profit"] > 0:
			current_wins += 1
			current_losses = 0
			max_consecutive_wins = max(max_consecutive_wins, current_wins)
		else:
			current_losses += 1
			current_wins = 0
			max_consecutive_losses = max(max_consecutive_losses, current_losses)
	
	return {
		"total_trades": total_trades,
		"win_rate": win_rate,
		"winning_trades": win_count,
		"losing_trades": loss_count,
		"avg_win": avg_win,
		"avg_loss": avg_loss,
		"profit_factor": profit_factor,
		"sharpe_ratio": sharpe,
		"sortino_ratio": sortino,
		"max_consecutive_wins": max_consecutive_wins,
		"max_consecutive_losses": max_consecutive_losses,
		"total_profit": sum(profits),
		"max_profit": max(profits) if profits else 0,
		"max_loss": min(profits) if profits else 0
	}

def calculate_drawdown(trades: List[Dict[str, Any]], initial_balance: float) -> pd.DataFrame:
	"""–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–∞–¥–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
	if not trades:
		return pd.DataFrame()
	
	# –°–æ–∑–¥–∞—ë–º equity curve
	balance = initial_balance
	equity_data = [{"time": None, "balance": initial_balance, "peak": initial_balance, "drawdown": 0}]
	
	for trade in trades:
		if "profit" in trade and trade["profit"] is not None:
			balance += trade["profit"]
		elif "invest_amount" in trade and trade.get("type") == "BUY":
			balance -= trade["invest_amount"]
		
		peak = max(equity_data[-1]["peak"], balance)
		drawdown = ((peak - balance) / peak) * 100 if peak > 0 else 0
		
		equity_data.append({
			"time": trade.get("time"),
			"balance": balance,
			"peak": peak,
			"drawdown": drawdown
		})
	
	return pd.DataFrame(equity_data)

# ====================================================================
# –°–¢–†–ê–ù–ò–¶–ê 1: –û–ë–ó–û–†
# ====================================================================

def overview_page(state: Dict[str, Any]):
	"""–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–∑–æ—Ä–∞ —Å KPI –∏ equity curve"""
	st.header("üìä –û–±–∑–æ—Ä")
	
	if not state:
		st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ó–∞–ø—É—Å—Ç–∏—Ç–µ paper trading.")
		return
	
	# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤
	balance = state.get("balance", 0)
	initial = state.get("initial_balance", 100)
	positions = state.get("positions", {})
	
	# –°—É–º–º–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
	positions_value = 0
	for symbol, pos in positions.items():
		# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏–∑ –ë–î
		current_price = pos.get("current_price", pos.get("entry_price", 0))
		amount = pos.get("amount", 0)
		positions_value += current_price * amount
	
	total_equity = balance + positions_value
	total_profit = total_equity - initial
	profit_percent = (total_profit / initial) * 100 if initial > 0 else 0
	
	positions_count = len(positions)
	
	trades = state.get("trades_history", [])
	metrics = calculate_metrics(trades)
	win_rate = metrics.get("win_rate", 0)
	
	# KPI –∫–∞—Ä—Ç–æ—á–∫–∏ - 5 –∫–æ–ª–æ–Ω–æ–∫ —Ç–µ–ø–µ—Ä—å
	col1, col2, col3, col4, col5 = st.columns(5)
	
	with col1:
		st.metric("–°–≤–æ–±–æ–¥–Ω–æ", f"${balance:.2f}")
	
	with col2:
		st.metric("–í –ø–æ–∑–∏—Ü–∏—è—Ö", f"${positions_value:.2f}")
	
	with col3:
		st.metric("–í—Å–µ–≥–æ –∫–∞–ø–∏—Ç–∞–ª", f"${total_equity:.2f}", f"{total_profit:+.2f} USD")
	
	with col4:
		st.metric("P&L", f"{profit_percent:+.2f}%", f"{total_profit:+.2f} USD")
	
	with col5:
		st.metric("Win Rate", f"{win_rate:.1f}%", f"{metrics.get('winning_trades', 0)}/{metrics.get('total_trades', 0)}")
	
	st.divider()
	
	# Equity Curve
	if trades:
		st.subheader("Equity Curve")
		
		# –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
		sorted_trades = sorted(trades, key=lambda x: x.get("time", ""))
		
		balance_history = initial
		equity_data = []
		
		for trade in sorted_trades:
			time = trade.get("time")
			if "profit" in trade and trade["profit"] is not None:
				balance_history += trade["profit"]
			
			equity_data.append({
				"time": time,
				"balance": balance_history
			})
		
		if equity_data:
			df_equity = pd.DataFrame(equity_data)
			df_equity["time"] = pd.to_datetime(df_equity["time"])
			
			fig = go.Figure()
			fig.add_trace(go.Scatter(
				x=df_equity["time"],
				y=df_equity["balance"],
				mode='lines',
				name='Balance',
				line=dict(color='#00cc96', width=2),
				fill='tozeroy',
				fillcolor='rgba(0, 204, 150, 0.1)'
			))
			
			fig.add_hline(y=initial, line_dash="dash", line_color="gray")
			
			fig.update_layout(
				xaxis_title="–í—Ä–µ–º—è",
				yaxis_title="–ë–∞–ª–∞–Ω—Å (USD)",
				hovermode='x unified',
				height=400
			)
			
			st.plotly_chart(fig, use_container_width=True, config=PLOTLY_CONFIG)
	
	st.divider()
	
	# –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–¥–µ–ª–æ–∫
	st.subheader("–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏")
	
	if trades:
		recent_trades = trades[:5]  # –ü–µ—Ä–≤—ã–µ 5 (—É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ DESC)
		
		for trade in recent_trades:
			trade_type = trade.get("type", "N/A")
			symbol = trade.get("symbol", "N/A")
			price = trade.get("price", 0)
			profit = trade.get("profit", 0)
			profit_pct = trade.get("profit_percent", 0)
			time = trade.get("time", "N/A")
			
			# –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏ –ø—Ä–∏–±—ã–ª–∏
			if profit and profit > 0:
				color = "green"
				emoji = "‚úÖ"
			elif profit and profit < 0:
				color = "red"
				emoji = "‚ùå"
			else:
				color = "gray"
				emoji = "‚ö™"
			
			if "AVERAGE" in trade_type:
				emoji = "üîÑ"
			
			col1, col2, col3, col4, col5 = st.columns([1, 2, 2, 2, 2])
			
			with col1:
				st.write(emoji)
			with col2:
				st.write(f"**{trade_type}**")
			with col3:
				st.write(f"{symbol} @ {format_price(price)}")
			with col4:
				if profit and profit != 0:
					st.markdown(f":{color}[{profit:+.2f} USD ({profit_pct:+.2f}%)]")
			with col5:
				st.write(time[:19] if len(time) > 19 else time)

# ====================================================================
# –°–¢–†–ê–ù–ò–¶–ê 2: –¢–ï–ö–£–©–ò–ï –ü–û–ó–ò–¶–ò–ò
# ====================================================================

def positions_page(state: Dict[str, Any]):
	"""–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π"""
	st.header("üíº –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏")
	
	if not state:
		st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
		return
	
	positions = state.get("positions", {})
	
	if not positions:
		st.info("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.")
		return
	
	# –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π
	positions_data = []
	for symbol, pos in positions.items():
		entry_price = pos.get("entry_price", 0)
		amount = pos.get("amount", 0)
		avg_entry = pos.get("average_entry_price", entry_price)
		sl = pos.get("stop_loss_price", 0)
		tp = pos.get("take_profit_price", 0)
		entry_time = pos.get("entry_time", "")
		averaging_count = pos.get("averaging_count", 0)
		pyramid_mode = pos.get("pyramid_mode", False)
		
		# –°—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π P&L —Å —Ä–µ–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π –∏–∑ –ë–î
		current_price = pos.get("current_price", entry_price)
		pnl_pct = ((current_price - avg_entry) / avg_entry) * 100 if avg_entry > 0 else 0
		pnl_usd = (current_price - avg_entry) * amount if avg_entry > 0 else 0
		
		mode = "PYRAMID" if pyramid_mode else "AVERAGE"
		
		positions_data.append({
			"–°–∏–º–≤–æ–ª": symbol,
			"–í—Ö–æ–¥": format_price(entry_price),
			"–°–µ–π—á–∞—Å": format_price(current_price),
			"–°—Ä–µ–¥–Ω—è—è": format_price(avg_entry) if averaging_count > 0 else "-",
			"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": f"{amount:.4f}",
			"P&L": f"${pnl_usd:+.2f}",
			"P&L%": f"{pnl_pct:+.2f}%",
			"SL": format_price(sl),
			"TP": format_price(tp),
			"–î–æ–∫—É–ø–∞–Ω–∏—è": f"{averaging_count} ({mode})" if averaging_count > 0 else "0",
			"–í—Ä–µ–º—è": entry_time[:19] if len(entry_time) > 19 else entry_time
		})
	
	df_positions = pd.DataFrame(positions_data)
	st.dataframe(df_positions, width='stretch', hide_index=True)
	
	# –î–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ (expandable)
	st.divider()
	st.subheader("–î–µ—Ç–∞–ª–∏ –ø–æ–∑–∏—Ü–∏–π")
	
	for symbol, pos in positions.items():
		current_price = pos.get("current_price", pos.get("entry_price", 0))
		avg_entry = pos.get("average_entry_price", pos.get("entry_price", 0))
		amount = pos.get("amount", 0)
		pnl_pct = ((current_price - avg_entry) / avg_entry) * 100 if avg_entry > 0 else 0
		pnl_usd = (current_price - avg_entry) * amount if avg_entry > 0 else 0
		
		with st.expander(f"üìä {symbol} ‚Ä¢ {format_price(current_price)} ‚Ä¢ {pnl_pct:+.2f}%"):
			col1, col2, col3 = st.columns(3)
			
			with col1:
				st.metric("–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞", format_price(pos.get('entry_price', 0)))
				st.metric("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", format_price(current_price), f"{pnl_pct:+.2f}%")
				st.metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", format_price(avg_entry))
			
			with col2:
				st.metric("Stop Loss", format_price(pos.get('stop_loss_price', 0)))
				st.metric("Take Profit", format_price(pos.get('take_profit_price', 0)))
				st.metric("P&L", f"${pnl_usd:+.2f}", f"{pnl_pct:+.2f}%")
			
			with col3:
				st.metric("–î–æ–∫—É–ø–∞–Ω–∏—è", pos.get("averaging_count", 0))
				st.metric("–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ", f"${pos.get('total_invested', pos.get('invest_amount', 0)):.2f}")
				st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", f"{amount:.4f}")
			
			# –ò—Å—Ç–æ—Ä–∏—è –¥–æ–∫—É–ø–∞–Ω–∏–π
			averaging_entries = pos.get("averaging_entries", [])
			if averaging_entries:
				st.write("**–ò—Å—Ç–æ—Ä–∏—è –¥–æ–∫—É–ø–∞–Ω–∏–π:**")
				for i, entry in enumerate(averaging_entries, 1):
					st.write(f"{i}. {entry.get('mode', 'N/A')} @ {format_price(entry.get('price', 0))} - {entry.get('reason', 'N/A')}")

# ====================================================================
# –°–¢–†–ê–ù–ò–¶–ê 3: –ò–°–¢–û–†–ò–Ø –°–î–ï–õ–û–ö
# ====================================================================

def history_page(state: Dict[str, Any]):
	"""–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫"""
	st.header("üìú –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫")
	
	if not state:
		st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
		return
	
	trades = state.get("trades_history", [])
	
	if not trades:
		st.info("–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –ø—É—Å—Ç–∞.")
		return
	
	# –§–∏–ª—å—Ç—Ä—ã
	col1, col2, col3 = st.columns(3)
	
	symbols = list(set(t.get("symbol", "N/A") for t in trades))
	types = list(set(t.get("type", "N/A") for t in trades))
	
	with col1:
		filter_symbol = st.multiselect("–°–∏–º–≤–æ–ª", ["–í—Å–µ"] + symbols, default=["–í—Å–µ"])
	
	with col2:
		filter_type = st.multiselect("–¢–∏–ø", ["–í—Å–µ"] + types, default=["–í—Å–µ"])
	
	with col3:
		filter_profit = st.selectbox("P&L", ["–í—Å–µ", "–ü—Ä–∏–±—ã–ª—å–Ω—ã–µ", "–£–±—ã—Ç–æ—á–Ω—ã–µ"], index=0)
	
	# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
	filtered_trades = trades
	
	if "–í—Å–µ" not in filter_symbol:
		filtered_trades = [t for t in filtered_trades if t.get("symbol") in filter_symbol]
	
	if "–í—Å–µ" not in filter_type:
		filtered_trades = [t for t in filtered_trades if t.get("type") in filter_type]
	
	if filter_profit == "–ü—Ä–∏–±—ã–ª—å–Ω—ã–µ":
		filtered_trades = [t for t in filtered_trades if t.get("profit", 0) > 0]
	elif filter_profit == "–£–±—ã—Ç–æ—á–Ω—ã–µ":
		filtered_trades = [t for t in filtered_trades if t.get("profit", 0) < 0]
	
	# –¢–∞–±–ª–∏—Ü–∞
	if filtered_trades:
		trades_data = []
		for trade in filtered_trades:
			profit = trade.get('profit')
			profit_pct = trade.get('profit_percent')
			trades_data.append({
				"–í—Ä–µ–º—è": trade.get("time", "N/A")[:19],
				"–¢–∏–ø": trade.get("type", "N/A"),
				"–°–∏–º–≤–æ–ª": trade.get("symbol", "N/A"),
				"–¶–µ–Ω–∞": format_price(trade.get('price', 0)),
				"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": f"{trade.get('amount', 0):.4f}",
				"P&L": f"${profit:.2f}" if profit is not None else "-",
				"P&L%": f"{profit_pct:.2f}%" if profit_pct is not None else "-",
				"–ë–∞–ª–∞–Ω—Å": f"${trade.get('balance_after', 0):.2f}"
			})
		
		df_trades = pd.DataFrame(trades_data)
		st.dataframe(df_trades, width='stretch', hide_index=True, height=400)
		
		# –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ P&L
		st.divider()
		st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ P&L")
		
		closed_trades = [t for t in filtered_trades if "profit" in t]
		if closed_trades:
			profits = [t["profit"] for t in closed_trades]
			
			fig = go.Figure()
			fig.add_trace(go.Histogram(
				x=profits,
				nbinsx=30,
				marker_color='#00cc96',
				name='P&L'
			))
			
			fig.add_vline(x=0, line_dash="dash", line_color="red")
			
			fig.update_layout(
				xaxis_title="–ü—Ä–∏–±—ã–ª—å/–£–±—ã—Ç–æ–∫ (USD)",
				yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫",
				showlegend=False,
				height=300
			)
			
			st.plotly_chart(fig, use_container_width=True, config=PLOTLY_CONFIG)
	else:
		st.info("–ù–µ—Ç —Å–¥–µ–ª–æ–∫, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞–º.")
	
	# –≠–∫—Å–ø–æ—Ä—Ç CSV
	if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV"):
		df_export = pd.DataFrame(filtered_trades)
		csv = df_export.to_csv(index=False)
		st.download_button(
			label="–°–∫–∞—á–∞—Ç—å CSV",
			data=csv,
			file_name=f"trades_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
			mime="text/csv"
		)

# ====================================================================
# –°–¢–†–ê–ù–ò–¶–ê 4: –ú–ï–¢–†–ò–ö–ò
# ====================================================================

def metrics_page(state: Dict[str, Any]):
	"""–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫"""
	st.header("üìà –ú–µ—Ç—Ä–∏–∫–∏")
	
	if not state:
		st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
		return
	
	trades = state.get("trades_history", [])
	
	if not trades:
		st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –º–µ—Ç—Ä–∏–∫.")
		return
	
	metrics = calculate_metrics(trades)
	
	if not metrics:
		st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–µ—Ç—Ä–∏–∫.")
		return
	
	# –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
	st.subheader("–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
	
	col1, col2, col3 = st.columns(3)
	
	with col1:
		st.metric("Total Trades", metrics.get("total_trades", 0))
		st.metric("Win Rate", f"{metrics.get('win_rate', 0):.2f}%")
		st.metric("Profit Factor", f"{metrics.get('profit_factor', 0):.2f}")
	
	with col2:
		st.metric("Winning Trades", metrics.get("winning_trades", 0))
		st.metric("Losing Trades", metrics.get("losing_trades", 0))
		st.metric("Avg Win", f"${metrics.get('avg_win', 0):.2f}")
	
	with col3:
		st.metric("Max Consecutive Wins", metrics.get("max_consecutive_wins", 0))
		st.metric("Max Consecutive Losses", metrics.get("max_consecutive_losses", 0))
		st.metric("Avg Loss", f"${metrics.get('avg_loss', 0):.2f}")
	
	st.divider()
	
	# –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏
	st.subheader("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
	
	col1, col2, col3 = st.columns(3)
	
	with col1:
		sharpe = metrics.get("sharpe_ratio", 0)
		st.metric("Sharpe Ratio", f"{sharpe:.2f}")
	
	with col2:
		sortino = metrics.get("sortino_ratio", 0)
		st.metric("Sortino Ratio", f"{sortino:.2f}")
	
	with col3:
		# Maximum Drawdown
		dd_df = calculate_drawdown(trades, state.get("initial_balance", 100))
		if not dd_df.empty:
			max_dd = dd_df["drawdown"].max()
			st.metric("Max Drawdown", f"{max_dd:.2f}%")
		else:
			st.metric("Max Drawdown", "N/A")
	
	# Kelly Criterion —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
	st.divider()
	st.subheader("Kelly Criterion")
	
	win_rate = metrics.get("win_rate", 0) / 100
	avg_win = abs(metrics.get("avg_win", 0))
	avg_loss = abs(metrics.get("avg_loss", 1))
	
	if avg_win > 0 and avg_loss > 0:
		kelly_full = (win_rate * avg_win - (1 - win_rate) * avg_loss) / avg_win
		kelly_quarter = kelly_full * 0.25
		
		col1, col2 = st.columns(2)
		with col1:
			st.metric("Kelly (–ø–æ–ª–Ω—ã–π)", f"{kelly_full:.2%}")
		with col2:
			st.metric("Kelly (1/4)", f"{kelly_quarter:.2%}")
		
		if kelly_full > 0:
			st.success(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {kelly_quarter:.1%} –æ—Ç –±–∞–ª–∞–Ω—Å–∞")
		else:
			st.warning("‚ö†Ô∏è Kelly –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π - —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —É–±—ã—Ç–æ—á–Ω–∞")
	
	st.divider()
	
	# Equity Drawdown Chart
	st.subheader("Equity Drawdown")
	
	# –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
	dd_df = calculate_drawdown(sorted(trades, key=lambda x: x.get("time", "")), state.get("initial_balance", 100))
	
	if not dd_df.empty:
		fig = make_subplots(
			rows=2, cols=1,
			row_heights=[0.7, 0.3],
			shared_xaxes=True,
			vertical_spacing=0.05,
			subplot_titles=("Balance", "Drawdown %")
		)
		
		# Balance
		fig.add_trace(
			go.Scatter(x=dd_df.index, y=dd_df["balance"], name="Balance", line=dict(color='#00cc96')),
			row=1, col=1
		)
		
		fig.add_trace(
			go.Scatter(x=dd_df.index, y=dd_df["peak"], name="Peak", line=dict(color='gray', dash='dash')),
			row=1, col=1
		)
		
		# Drawdown
		fig.add_trace(
			go.Scatter(
				x=dd_df.index, y=dd_df["drawdown"], name="Drawdown", 
				fill='tozeroy', line=dict(color='red'), fillcolor='rgba(255, 0, 0, 0.2)'
			),
			row=2, col=1
		)
		
		fig.update_xaxes(title_text="Trades", row=2, col=1)
		fig.update_yaxes(title_text="USD", row=1, col=1)
		fig.update_yaxes(title_text="%", row=2, col=1)
		
		fig.update_layout(height=600, showlegend=True)
		
		st.plotly_chart(fig, use_container_width=True, config=PLOTLY_CONFIG)
	
	# Box plot P&L
	st.divider()
	st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ P&L")
	
	closed_trades = [t for t in trades if "profit" in t]
	if closed_trades:
		profits = [t["profit"] for t in closed_trades]
		
		fig = go.Figure()
		fig.add_trace(go.Box(y=profits, name="P&L", marker_color='#00cc96'))
		
		fig.update_layout(
			yaxis_title="–ü—Ä–∏–±—ã–ª—å/–£–±—ã—Ç–æ–∫ (USD)",
			showlegend=False,
			height=400
		)
		
		st.plotly_chart(fig, use_container_width=True, config=PLOTLY_CONFIG)

# ====================================================================
# –°–¢–†–ê–ù–ò–¶–ê 5: –ë–≠–ö–¢–ï–°–¢–´
# ====================================================================

def backtests_page():
	"""–°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—ç–∫—Ç–µ—Å—Ç–æ–≤"""
	st.header("üß™ –ë—ç–∫—Ç–µ—Å—Ç—ã")
	
	# –§–æ—Ä–º–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞
	with st.expander("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π –±—ç–∫—Ç–µ—Å—Ç", expanded=False):
		st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±—ç–∫—Ç–µ—Å—Ç–∞")
		
		col1, col2 = st.columns(2)
		
		with col1:
			# –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
			popular_symbols = ["BTCUSDT", "ETHUSDT", "BNBUSDT", "SOLUSDT", "ADAUSDT", "XRPUSDT", "DOGEUSDT", "AVAXUSDT", "DOTUSDT", "MATICUSDT"]
			symbol_choice = st.selectbox("–í—ã–±—Ä–∞—Ç—å —Å–∏–º–≤–æ–ª", popular_symbols + ["–î—Ä—É–≥–æ–π..."], index=0)
			
			if symbol_choice == "–î—Ä—É–≥–æ–π...":
				symbol = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª", value="BTCUSDT", help="–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞")
			else:
				symbol = symbol_choice
			
			interval = st.selectbox("–¢–∞–π–º—Ñ—Ä–µ–π–º", ["1m", "3m", "5m", "15m", "30m", "1h", "2h", "4h", "6h", "12h", "1d"], index=3)
			initial_balance = st.number_input("–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å", value=100.0, min_value=1.0, step=10.0)
		
		with col2:
			# –ü–µ—Ä–∏–æ–¥
			days_back = st.number_input("–î–Ω–µ–π –Ω–∞–∑–∞–¥ (–æ—Ç —Å–µ–≥–æ–¥–Ω—è)", value=90, min_value=1, max_value=365, help="–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å")
			period_hours = days_back * 24  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∞—Å—ã
			
			# –¢–∏–ø –±—ç–∫—Ç–µ—Å—Ç–∞
			backtest_type = st.selectbox("–¢–∏–ø –±—ç–∫—Ç–µ—Å—Ç–∞", 
				["–û–±—ã—á–Ω—ã–π", "Multi-Timeframe", "Walk-Forward"],
				help="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±—ç–∫—Ç–µ—Å—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
		
		# –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
		if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç", type="primary"):
			# –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞
			if not symbol or len(symbol) < 4:
				st.error("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT)")
				return
			
			status_container = st.empty()
			progress_bar = st.progress(0)
			
			try:
				status_container.info(f"üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞ {symbol} {interval}...")
				progress_bar.progress(10)
				
				# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
				if backtest_type == "Multi-Timeframe":
					# backtest_multitf.py: symbol interval lookback_days
					cmd = [
						sys.executable,
						"backtest_multitf.py",
						symbol,
						interval,
						str(days_back)
					]
				elif backtest_type == "Walk-Forward":
					# backtest_walkforward.py: symbol interval is_hours oos_hours balance
					is_hours = int(period_hours * 0.7)  # 70% –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
					oos_hours = int(period_hours * 0.3)  # 30% –¥–ª—è —Ç–µ—Å—Ç–∞
					cmd = [
						sys.executable,
						"backtest_walkforward.py",
						symbol,
						interval,
						str(is_hours),
						str(oos_hours),
						str(initial_balance)
					]
				else:
					# backtest.py: symbol interval period_hours start_balance
					cmd = [
						sys.executable,
						"backtest.py",
						symbol,
						interval,
						str(period_hours),
						str(initial_balance)
					]
				
				status_container.info(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±—ç–∫—Ç–µ—Å—Ç–∞...")
				progress_bar.progress(30)
				
				# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
				result = subprocess.run(
					cmd,
					capture_output=True,
					text=True,
					timeout=300  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
				)
				
				progress_bar.progress(90)
				
				if result.returncode == 0:
					progress_bar.progress(100)
					status_container.success(f"‚úÖ –ë—ç–∫—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!")
					
					# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤)
					if result.stdout:
						with st.expander("üìã –í—ã–≤–æ–¥ –±—ç–∫—Ç–µ—Å—Ç–∞"):
							st.code(result.stdout[-1000:] if len(result.stdout) > 1000 else result.stdout, language="text")
					
					st.balloons()
					
					# –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
					st.rerun()
				else:
					progress_bar.empty()
					status_container.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±—ç–∫—Ç–µ—Å—Ç–∞")
					st.code(result.stderr if result.stderr else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞", language="text")
					
			except subprocess.TimeoutExpired:
				progress_bar.empty()
				status_container.error("‚ùå –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (>5 –º–∏–Ω—É—Ç)")
				st.warning("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –±–æ–ª—å—à–∏–π —Ç–∞–π–º—Ñ—Ä–µ–π–º")
			except Exception as e:
				progress_bar.empty()
				status_container.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
				st.code(traceback.format_exc(), language="text")
		
		st.info("üí° –ë—ç–∫—Ç–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ë–î –∏ –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ")
	
	st.divider()
	
	# –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±—ç–∫—Ç–µ—Å—Ç–æ–≤
	col1, col2 = st.columns([3, 1])
	with col1:
		st.subheader("üìÇ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–æ–≤")
	with col2:
		if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", help="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –±—ç–∫—Ç–µ—Å—Ç—ã –∏–∑ –ë–î"):
			try:
				# –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –±—ç–∫—Ç–µ—Å—Ç–æ–≤
				count = db.clear_backtests()
				st.success(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {count} –±—ç–∫—Ç–µ—Å—Ç–æ–≤")
				st.rerun()
			except Exception as e:
				st.error(f"–û—à–∏–±–∫–∞: {e}")
	
	backtests = load_backtest_results()
	
	if not backtests:
		st.info("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–æ–≤.")
		return
	
	# –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞
	selected_files = st.multiselect(
		"–í—ã–±–µ—Ä–∏—Ç–µ –±—ç–∫—Ç–µ—Å—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è",
		list(backtests.keys()),
		default=[list(backtests.keys())[0]] if backtests else []
	)
	
	if not selected_files:
		st.info("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –±—ç–∫—Ç–µ—Å—Ç.")
		return
	
	# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
	for filename in selected_files:
		with st.expander(f"üìä {filename}", expanded=True):
			data = backtests[filename]
			
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∏—Å–æ–∫ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å)
			if isinstance(data, list):
				# –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫
				trades = data
				initial = 100.0
				# –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
				sorted_trades = sorted(trades, key=lambda x: x.get("time", ""))
				# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ —Å–¥–µ–ª–æ–∫
				metrics = calculate_metrics(sorted_trades)
				
				# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º equity
				balance = initial
				for trade in sorted_trades:
					if "profit" in trade and trade["profit"] is not None:
						balance += trade["profit"]
				final_balance = balance
				roi = ((final_balance - initial) / initial) * 100 if initial > 0 else 0
				
				col1, col2, col3, col4 = st.columns(4)
				
				with col1:
					st.metric("ROI", f"{roi:.2f}%")
				
				with col2:
					st.metric("Win Rate", f"{metrics.get('win_rate', 0):.2f}%")
				
				with col3:
					st.metric("Trades", metrics.get('total_trades', 0))
				
				with col4:
					st.metric("Sharpe", f"{metrics.get('sharpe_ratio', 0):.2f}")
				
				# –ò—Å–ø–æ–ª—å–∑—É–µ–º sorted_trades –¥–∞–ª—å—à–µ
				trades = sorted_trades
				
			else:
				# –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç - —Å–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
				# –ú–µ—Ç—Ä–∏–∫–∏
				col1, col2, col3, col4 = st.columns(4)
				
				with col1:
					roi = data.get("roi_percent", 0)
					st.metric("ROI", f"{roi:.2f}%")
				
				with col2:
					win_rate = data.get("win_rate", 0)
					st.metric("Win Rate", f"{win_rate:.2f}%")
				
				with col3:
					total_trades = data.get("total_trades", 0)
					st.metric("Trades", total_trades)
				
				with col4:
					sharpe = data.get("sharpe_ratio", 0)
					st.metric("Sharpe", f"{sharpe:.2f}")
				
				trades = data.get("trades", [])
				initial = data.get("initial_balance", 100)
			
			# Equity curve
			if trades:
				# –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
				sorted_trades = sorted(trades, key=lambda x: x.get("time", ""))
				
				balance_history = [initial]
				balance = initial
				
				for trade in sorted_trades:
					if "balance_after" in trade:
						balance_history.append(trade["balance_after"])
					elif "profit" in trade and trade["profit"] is not None:
						balance += trade["profit"]
						balance_history.append(balance)
				
				if len(balance_history) > 1:
					fig = go.Figure()
					fig.add_trace(go.Scatter(
						y=balance_history,
						mode='lines',
						name=filename,
						line=dict(width=2)
					))
					
					fig.add_hline(y=initial, line_dash="dash", line_color="gray")
					
					fig.update_layout(
						xaxis_title="–°–¥–µ–ª–∫–∏",
						yaxis_title="–ë–∞–ª–∞–Ω—Å (USD)",
						height=300
					)
					
					st.plotly_chart(fig, use_container_width=True, config=PLOTLY_CONFIG)
			else:
				st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö –≤ —ç—Ç–æ–º –±—ç–∫—Ç–µ—Å—Ç–µ")
	
	# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
	if len(selected_files) > 1:
		st.divider()
		st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ")
		
		comparison_data = []
		for filename in selected_files:
			data = backtests[filename]
			
			# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
			if isinstance(data, list):
				trades = data
				initial = 100.0
				# –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞
				sorted_trades = sorted(trades, key=lambda x: x.get("time", ""))
				metrics = calculate_metrics(sorted_trades)
				
				balance = initial
				for trade in sorted_trades:
					if "profit" in trade:
						balance += trade["profit"]
				roi = ((balance - initial) / initial) * 100 if initial > 0 else 0
				
				comparison_data.append({
					"–§–∞–π–ª": filename,
					"ROI%": roi,
					"Win Rate%": metrics.get("win_rate", 0),
					"Trades": metrics.get("total_trades", 0),
					"Sharpe": metrics.get("sharpe_ratio", 0),
					"Max DD%": 0
				})
			else:
				comparison_data.append({
					"–§–∞–π–ª": filename,
					"ROI%": data.get("roi_percent", 0),
					"Win Rate%": data.get("win_rate", 0),
					"Trades": data.get("total_trades", 0),
					"Sharpe": data.get("sharpe_ratio", 0),
					"Max DD%": data.get("max_drawdown_percent", 0)
				})
		
		df_comparison = pd.DataFrame(comparison_data)
		st.dataframe(df_comparison, width='stretch', hide_index=True)
		
		# Overlay equity curves
		st.subheader("Overlay Equity Curves")
		
		fig = go.Figure()
		
		for filename in selected_files:
			data = backtests[filename]
			
			# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
			if isinstance(data, list):
				trades = data
				initial = 100.0
			else:
				trades = data.get("trades", [])
				initial = data.get("initial_balance", 100)
			
			if trades:
				# –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
				sorted_trades = sorted(trades, key=lambda x: x.get("time", ""))
				
				balance_history = [initial]
				balance = initial
				
				for trade in sorted_trades:
					if "balance_after" in trade:
						balance_history.append(trade["balance_after"])
					elif "profit" in trade and trade["profit"] is not None:
						balance += trade["profit"]
						balance_history.append(balance)
				
				if len(balance_history) > 1:
					fig.add_trace(go.Scatter(
						y=balance_history,
						mode='lines',
						name=filename,
						line=dict(width=2)
					))
		
		fig.update_layout(
			xaxis_title="–°–¥–µ–ª–∫–∏",
			yaxis_title="–ë–∞–ª–∞–Ω—Å (USD)",
			height=400
		)
		
		st.plotly_chart(fig, use_container_width=True, config=PLOTLY_CONFIG)

# ====================================================================
# –°–¢–†–ê–ù–ò–¶–ê 6: –ù–ê–°–¢–†–û–ô–ö–ò
# ====================================================================

def settings_page():
	"""–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
	st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
	
	settings = load_settings()
	
	st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π")
	
	# Toggles
	col1, col2, col3 = st.columns(3)
	
	with col1:
		kelly_enabled = st.toggle("Kelly Criterion", value=settings.get("kelly_enabled", True))
	
	with col2:
		averaging_enabled = st.toggle("Averaging", value=settings.get("averaging_enabled", True))
	
	with col3:
		pyramid_enabled = st.toggle("Pyramid Mode", value=settings.get("pyramid_enabled", True))
	
	st.divider()
	
	# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
	st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
	
	col1, col2, col3 = st.columns(3)
	
	with col1:
		kelly_fraction = st.slider(
			"Kelly Fraction",
			min_value=0.1,
			max_value=0.5,
			value=settings.get("kelly_fraction", 0.25),
			step=0.05,
			help="–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –ø–æ–ª–Ω–æ–≥–æ Kelly (0.25 = 25%)"
		)
	
	with col2:
		max_averaging = st.slider(
			"Max Averaging Attempts",
			min_value=0,
			max_value=5,
			value=settings.get("max_averaging", 2),
			step=1,
			help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–ø–∞–Ω–∏–π –Ω–∞ –ø–æ–∑–∏—Ü–∏—é"
		)
	
	with col3:
		averaging_drop = st.slider(
			"Averaging Drop %",
			min_value=1.0,
			max_value=10.0,
			value=settings.get("averaging_drop", 5.0),
			step=0.5,
			help="–ü—Ä–æ—Ü–µ–Ω—Ç –ø–∞–¥–µ–Ω–∏—è –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è"
		)
	
	# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
	if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
		new_settings = {
			"kelly_enabled": kelly_enabled,
			"averaging_enabled": averaging_enabled,
			"pyramid_enabled": pyramid_enabled,
			"kelly_fraction": kelly_fraction,
			"max_averaging": max_averaging,
			"averaging_drop": averaging_drop
		}
		save_settings(new_settings)
		st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
		st.info("‚ö†Ô∏è –û–±–Ω–æ–≤–∏—Ç–µ config.py –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫ –±–æ—Ç—É")
	
	st.divider()
	
	# –î–µ–π—Å—Ç–≤–∏—è
	st.subheader("–î–µ–π—Å—Ç–≤–∏—è")
	
	col1, col2 = st.columns(2)
	
	with col1:
		st.write("**–°–±—Ä–æ—Å Paper Trading**")
		confirm = st.checkbox("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–±—Ä–æ—Å (–≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã)")
		if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å", type="primary") and confirm:
				try:
					# –°–±—Ä–æ—Å –ë–î
					with db.session_scope() as session:
						# –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
						session.query(PaperTradingState).delete()
						session.commit()
					
					st.success("‚úÖ Paper trading —Å–±—Ä–æ—à–µ–Ω!")
					st.rerun()
				except Exception as e:
					st.error(f"–û—à–∏–±–∫–∞: {e}")
	
	with col2:
		st.write("**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**")
		try:
			# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
			state = db.get_paper_state()
			if state:
				st.info(f"–ó–∞–ø–∏—Å–µ–π –≤ –ë–î: {state.total_trades} —Å–¥–µ–ª–æ–∫")
			else:
				st.info("–ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
		except Exception as e:
			st.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

# ====================================================================
# –°–¢–†–ê–ù–ò–¶–ê: –õ–û–ì–ò
# ====================================================================

def logs_page():
	"""–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤"""
	st.title("üìã –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã")
	
	# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –ª–æ–≥–æ–≤
	log_file = get_latest_log_file()
	if log_file:
		st.caption(f"üìÑ –¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª: `{log_file}`")
	else:
		st.warning("–§–∞–π–ª—ã –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
	
	# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
	col1, col2, col3 = st.columns([2, 2, 1])
	
	with col1:
		num_lines = st.select_slider(
			"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫",
			options=[20, 50, 100, 200, 500],
			value=100
		)
	
	with col2:
		log_level_filter = st.multiselect(
			"–§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é",
			options=["ERROR", "WARNING", "INFO", "DEBUG", "CRITICAL"],
			default=["ERROR", "WARNING", "INFO"]
		)
	
	with col3:
		if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"):
			st.rerun()
	
	st.divider()
	
	# –ß—Ç–µ–Ω–∏–µ –ª–æ–≥–æ–≤
	log_lines = read_recent_logs(num_lines)
	
	if not log_lines or log_lines == ["–õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"]:
		st.warning("–õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç")
		st.info(f"–û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: `{LOG_DIR}/log_*.txt`")
		log_file = get_latest_log_file()
		if log_file:
			st.info(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥: `{log_file}`")
		return
	
	# –ü–∞—Ä—Å–∏–Ω–≥ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
	parsed_logs = [parse_log_line(line) for line in log_lines]
	filtered_logs = [log for log in parsed_logs if log["level"] in log_level_filter or not log_level_filter]
	
	# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	col1, col2, col3, col4 = st.columns(4)
	
	error_count = sum(1 for log in parsed_logs if "ERROR" in log["level"])
	warning_count = sum(1 for log in parsed_logs if "WARNING" in log["level"])
	info_count = sum(1 for log in parsed_logs if "INFO" in log["level"])
	
	with col1:
		st.metric("–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫", len(log_lines))
	with col2:
		st.metric("–û—à–∏–±–∫–∏", error_count, delta=None if error_count == 0 else f"-{error_count}", delta_color="inverse")
	with col3:
		st.metric("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", warning_count, delta=None if warning_count == 0 else f"-{warning_count}", delta_color="inverse")
	with col4:
		st.metric("–ò–Ω—Ñ–æ", info_count)
	
	st.divider()
	
	# –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π
	tab1, tab2 = st.tabs(["üìú –ö–æ–Ω—Å–æ–ª—å", "üìä –¢–∞–±–ª–∏—Ü–∞"])
	
	with tab1:
		# –ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
		st.subheader("–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")
		
		log_container = st.container()
		with log_container:
			for log in reversed(filtered_logs):  # –ù–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É
				message = log["message"]
				level = log["level"]
				
				if "ERROR" in level or "CRITICAL" in level:
					st.error(message)
				elif "WARNING" in level:
					st.warning(message)
				elif "DEBUG" in level:
					st.code(message, language=None)
				else:
					st.text(message)
	
	with tab2:
		# –¢–∞–±–ª–∏—á–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
		if filtered_logs:
			# –°–æ–∑–¥–∞—ë–º DataFrame
			df_logs = pd.DataFrame(filtered_logs)
			
			# –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
			def color_level(val):
				if "ERROR" in val or "CRITICAL" in val:
					return 'background-color: #ff4444; color: white'
				elif "WARNING" in val:
					return 'background-color: #ffaa00; color: black'
				elif "DEBUG" in val:
					return 'background-color: #aaaaaa; color: white'
				return ''
			
			# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É (–±–µ–∑ —Å—Ç–∏–ª–µ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
			st.dataframe(df_logs, width='stretch', height=600)
		else:
			st.info("–ù–µ—Ç –ª–æ–≥–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä—É")
	
	# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
	st.divider()
	
	with st.expander("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏"):
		st.markdown("""
		**–£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:**
		- üî¥ **ERROR/CRITICAL**: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è
		- üü° **WARNING**: –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
		- üîµ **INFO**: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã
		- ‚ö™ **DEBUG**: –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
		
		**–ü–æ–ª–µ–∑–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:**
		- –û—à–∏–±–∫–∏ API: `ERROR.*API`
		- –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π: `BUY.*@`
		- –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π: `SELL.*@`
		- Averaging: `AVERAGING`
		- Kelly: `Kelly`
		""")
	
	# –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤ (–æ–ø–∞—Å–Ω–æ!)
	st.divider()
	with st.expander("‚ö†Ô∏è –û–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞"):
		st.warning("–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ª–æ–≥-—Ñ–∞–π–ª–æ–≤ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!")
		if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏", type="secondary"):
			try:
				if os.path.exists(LOG_DIR):
					log_files = [f for f in os.listdir(LOG_DIR) if f.startswith("log_") and f.endswith(".txt")]
					for log_file in log_files:
						os.remove(os.path.join(LOG_DIR, log_file))
					st.success(f"–£–¥–∞–ª–µ–Ω–æ {len(log_files)} –ª–æ–≥-—Ñ–∞–π–ª–æ–≤")
				else:
					st.warning("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
				st.rerun()
			except Exception as e:
				st.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

# ====================================================================
# –ì–õ–ê–í–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï
# ====================================================================

def render_bot_status_widget():
	"""–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤–∏–¥–∂–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ –≤ sidebar"""
	status = check_bot_status()
	
	st.subheader("ü§ñ –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞")
	
	# –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã
	if status["is_running"]:
		st.success("‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç")
	else:
		st.error("‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
	
	# –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
	# –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –≤—Ä–µ–º—è UI –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è > –≤—Ä–µ–º—è –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	ui_refresh_time = st.session_state.get('last_ui_refresh')
	
	if ui_refresh_time:
		# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
		age = (datetime.now() - ui_refresh_time).total_seconds()
		if age < 60:
			age_str = f"{int(age)} —Å–µ–∫ –Ω–∞–∑–∞–¥"
		elif age < 3600:
			age_str = f"{int(age/60)} –º–∏–Ω –Ω–∞–∑–∞–¥"
		else:
			age_str = f"{int(age/3600)} —á –Ω–∞–∑–∞–¥"
		st.caption(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–æ: {age_str}")
	elif status["last_update"]:
		# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î
		age = status["state_file_age"]
		if age < 60:
			age_str = f"{int(age)} —Å–µ–∫ –Ω–∞–∑–∞–¥"
		elif age < 3600:
			age_str = f"{int(age/60)} –º–∏–Ω –Ω–∞–∑–∞–¥"
		else:
			age_str = f"{int(age/3600)} —á –Ω–∞–∑–∞–¥"
		st.caption(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–æ: {age_str}")
	else:
		st.caption("üìù –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
	
	# Uptime (–µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–π–¥–µ–Ω)
	if status["uptime"]:
		hours = int(status["uptime"].total_seconds() / 3600)
		minutes = int((status["uptime"].total_seconds() % 3600) / 60)
		st.caption(f"‚è±Ô∏è Uptime: {hours}—á {minutes}–º")
	
	# –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ñ–∞–π–ª–æ–≤
	col1, col2 = st.columns(2)
	with col1:
		if status["state_file_exists"]:
			st.caption("üíæ –ë–î ‚úì")
		else:
			st.caption("üíæ –ë–î ‚úó")
	with col2:
		if status["log_file_exists"]:
			st.caption("üìã Logs ‚úì")
		else:
			st.caption("üìã Logs ‚úó")
	
	# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ
	st.caption(f"üîÑ –ö—ç—à: 60—Å TTL")

def main():
	"""–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è dashboard"""
	
	# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
	with st.sidebar:
		st.title("üìà TradeBot")
		st.divider()
		
		# –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
		render_bot_status_widget()
		st.divider()
		
		# –ù–∞–≤–∏–≥–∞—Ü–∏—è
		page = st.radio(
			"–ù–∞–≤–∏–≥–∞—Ü–∏—è",
			["üìä –û–±–∑–æ—Ä", "üíº –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏", "üìú –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫", 
			 "üìà –ú–µ—Ç—Ä–∏–∫–∏", "üß™ –ë—ç–∫—Ç–µ—Å—Ç—ã", "üìã –õ–æ–≥–∏", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
		)
		
		st.divider()
		
		# –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
		auto_refresh = st.checkbox("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (60—Å)", value=False)
		
		# –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
		if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å"):
			# –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
			st.session_state.last_ui_refresh = datetime.now()
			st.rerun()
		
		# –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ session state
		if auto_refresh:
			# –ò—Å–ø–æ–ª—å–∑—É–µ–º session state –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
			if 'last_refresh' not in st.session_state:
				st.session_state.last_refresh = time.time()
			
			current_time = time.time()
			time_since_refresh = current_time - st.session_state.last_refresh
			
			# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
			progress = min(time_since_refresh / 60, 1.0)
			st.progress(progress, text=f"–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {int(60 - time_since_refresh)}—Å")
			
			# –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
			if time_since_refresh >= 60:
				st.session_state.last_refresh = current_time
				st.session_state.last_ui_refresh = datetime.now()
				st.rerun()
	
	# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
	state = load_paper_trader_state()
	
	# –†–æ—É—Ç–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü
	if page == "üìä –û–±–∑–æ—Ä":
		overview_page(state)
	elif page == "üíº –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏":
		positions_page(state)
	elif page == "üìú –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫":
		history_page(state)
	elif page == "üìà –ú–µ—Ç—Ä–∏–∫–∏":
		metrics_page(state)
	elif page == "üß™ –ë—ç–∫—Ç–µ—Å—Ç—ã":
		backtests_page()
	elif page == "üìã –õ–æ–≥–∏":
		logs_page()
	elif page == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
		settings_page()

if __name__ == "__main__":
	main()

