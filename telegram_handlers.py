"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞
–°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∏—Ö –ª–æ–≥–∏–∫—É
"""

import aiohttp
import asyncio
import math
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes
from config import (
    DEFAULT_SYMBOL, DEFAULT_INTERVAL, POLL_INTERVAL, POLL_INTERVAL_MIN, POLL_INTERVAL_MAX,
    VOLATILITY_WINDOW, VOLATILITY_THRESHOLD, POLL_VOLATILITY_HIGH_THRESHOLD, 
    POLL_VOLATILITY_LOW_THRESHOLD, VOLATILITY_ALERT_COOLDOWN, ADX_WINDOW,
    STRATEGY_MODE, USE_MULTI_TIMEFRAME, MTF_TIMEFRAMES
)
from data_provider import DataProvider
from signal_generator import SignalGenerator
from logger import logger
from database import db
from telegram_formatters import TelegramFormatters
from telegram_paper_trading import TelegramPaperTrading
from telegram_analytics import TelegramAnalytics


class TelegramHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞"""
    
    def __init__(self, bot_instance):
        self.bot = bot_instance
        self.formatters = TelegramFormatters()
        self.paper_trading = TelegramPaperTrading(bot_instance)
        self.analytics = TelegramAnalytics(bot_instance)
    
    def _is_authorized(self, update: Update) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞"""
        if self.bot.owner_chat_id is None:
            return True
        return update.effective_chat.id == self.bot.owner_chat_id
    
    
    # -------------------------
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    # -------------------------
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self._is_authorized(update):
            await update.message.reply_text(
                "üö´ <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
                "–≠—Ç–æ—Ç –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.\n"
                f"–í–∞—à ID: <code>{update.effective_chat.id}</code>\n\n"
                "–ï—Å–ª–∏ —ç—Ç–æ –≤–∞—à –±–æ—Ç, –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π ID –≤ —Ñ–∞–π–ª .env:\n"
                "<code>OWNER_CHAT_ID={}</code>".format(update.effective_chat.id),
                parse_mode="HTML"
            )
            return
        
        text = (
            "<b>üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.</b>\n\n"
            "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "‚Ä¢ /start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "‚Ä¢ /help ‚Äî –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
            "‚Ä¢ /status ‚Äî —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã\n"
            "‚Ä¢ /analyze [SYMBOL] [INTERVAL] ‚Äî –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä—ã\n"
            "‚Ä¢ /mtf_signal SYMBOL ‚Äî multi-timeframe –∞–Ω–∞–ª–∏–∑\n"
            "‚Ä¢ /add SYMBOL ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ\n"
            "‚Ä¢ /remove SYMBOL ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö\n"
            "‚Ä¢ /list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã\n\n"
            "<b>üìä Paper Trading:</b>\n"
            "‚Ä¢ /paper_start [–±–∞–ª–∞–Ω—Å] ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é\n"
            "‚Ä¢ /paper_stop ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏\n"
            "‚Ä¢ /paper_status ‚Äî —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –ø–æ–∑–∏—Ü–∏–∏\n"
            "‚Ä¢ /paper_balance ‚Äî –¥–µ—Ç–∞–ª–∏ –±–∞–ª–∞–Ω—Å–∞\n"
            "‚Ä¢ /paper_trades [N] ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–¥–µ–ª–æ–∫\n"
            "‚Ä¢ /paper_backtest [—á–∞—Å—ã] ‚Äî –±—ã—Å—Ç—Ä–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏\n"
            "‚Ä¢ /paper_debug [SYMBOL] ‚Äî –æ—Ç–ª–∞–¥–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤\n"
            "‚Ä¢ /paper_candidates ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ —Å–¥–µ–ª–∫—É\n"
            "‚Ä¢ /paper_reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏ –∏—Å—Ç–æ—Ä–∏—é\n\n"
            "<b>üî¨ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            "‚Ä¢ /kelly_info ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Kelly Criterion\n"
            "‚Ä¢ /averaging_status ‚Äî —Å—Ç–∞—Ç—É—Å –¥–æ–∫—É–ø–∞–Ω–∏–π\n"
            "‚Ä¢ /settings ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"
        )
        await update.message.reply_text(text, parse_mode="HTML")
        
        if self.bot.chat_id is None:
            self.bot.chat_id = update.effective_chat.id
            self.bot._save_tracked_symbols()

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self._is_authorized(update):
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        text = (
            "<b>üÜò –ü–æ–º–æ—â—å:</b>\n\n"
            "<b>–ê–Ω–∞–ª–∏–∑:</b>\n"
            "‚Ä¢ /analyze SYMBOL INTERVAL ‚Äî –∞–Ω–∞–ª–∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞—Ä—ã\n"
            "‚Ä¢ /mtf_signal SYMBOL ‚Äî multi-timeframe –∞–Ω–∞–ª–∏–∑ (15m+1h+4h)\n"
            "‚Ä¢ /add SYMBOL ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ\n"
            "‚Ä¢ /remove SYMBOL ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö\n"
            "‚Ä¢ /list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã\n\n"
            "<b>Paper Trading:</b>\n"
            "‚Ä¢ /paper_start [–±–∞–ª–∞–Ω—Å] ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é\n"
            "‚Ä¢ /paper_stop ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏\n"
            "‚Ä¢ /paper_status ‚Äî —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –ø–æ–∑–∏—Ü–∏–∏\n"
            "‚Ä¢ /paper_balance ‚Äî –¥–µ—Ç–∞–ª–∏ –±–∞–ª–∞–Ω—Å–∞\n"
            "‚Ä¢ /paper_trades [N] ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–¥–µ–ª–æ–∫\n"
            "‚Ä¢ /paper_backtest [—á–∞—Å—ã] ‚Äî –±—ã—Å—Ç—Ä–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏\n"
            "‚Ä¢ /paper_debug [SYMBOL] ‚Äî –æ—Ç–ª–∞–¥–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤\n"
            "‚Ä¢ /paper_candidates ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ —Å–¥–µ–ª–∫—É\n"
            "‚Ä¢ /paper_force_buy [SYMBOL] ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞\n"
            "‚Ä¢ /paper_force_sell [SYMBOL] ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞\n"
            "‚Ä¢ /paper_reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏ –∏—Å—Ç–æ—Ä–∏—é\n\n"
            "<b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:</b>\n"
            "‚Ä¢ /kelly_info ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Kelly Criterion\n"
            "‚Ä¢ /averaging_status ‚Äî —Å—Ç–∞—Ç—É—Å –¥–æ–∫—É–ø–∞–Ω–∏–π\n"
            "‚Ä¢ /signal_stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ v5.5 üÜï\n"
            "‚Ä¢ /signal_analysis ‚Äî –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≥–æ–ª–æ—Å–æ–≤ üÜï\n\n"
            "<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            "‚Ä¢ /settings ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–ø—Ä–æ—Å–∞ –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏\n\n"
            "<i>–ï—Å–ª–∏ SYMBOL –∏ INTERVAL –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.</i>"
        )
        await update.message.reply_text(text, parse_mode="HTML")

    async def status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self._is_authorized(update):
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        from telegram import __version__ as tg_version
        symbols = ", ".join(self.bot.tracked_symbols) if self.bot.tracked_symbols else "–Ω–µ—Ç"
        text = (
            f"<b>‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>\n"
            f"‚Ä¢ –í–µ—Ä—Å–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: python-telegram-bot {tg_version}\n"
            f"‚Ä¢ –°–∏–º–≤–æ–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {self.bot.default_symbol}\n"
            f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {self.bot.default_interval}\n"
            f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã: {symbols}\n"
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ OK"
        )
        await update.message.reply_text(text, parse_mode="HTML")
        
        if self.bot.chat_id is None:
            self.bot.chat_id = update.effective_chat.id
            self.bot._save_tracked_symbols()

    # -------------------------
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–∏
    # -------------------------
    async def add_symbol(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self._is_authorized(update):
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        if not context.args:
            await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add SYMBOL")
            return
        symbol = context.args[0].upper()
        if symbol in self.bot.tracked_symbols:
            await update.message.reply_text(f"‚ÑπÔ∏è {symbol} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.")
        else:
            self.bot.tracked_symbols.add(symbol)
            self.bot._save_tracked_symbols()
            await update.message.reply_text(f"‚úÖ {symbol} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.")

    async def remove_symbol(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self._is_authorized(update):
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        if not context.args:
            await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove SYMBOL")
            return
        symbol = context.args[0].upper()
        if symbol in self.bot.tracked_symbols:
            self.bot.tracked_symbols.remove(symbol)
            self.bot._save_tracked_symbols()
            await update.message.reply_text(f"‚úÖ {symbol} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.")
        else:
            await update.message.reply_text(f"‚ÑπÔ∏è {symbol} –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.")

    async def list_symbols(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self._is_authorized(update):
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        if self.bot.tracked_symbols:
            text = "<b>üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã:</b>\n" + "\n".join([f"‚Ä¢ {s}" for s in self.bot.tracked_symbols])
        else:
            text = "üìã –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä –ø—É—Å—Ç."
        await update.message.reply_text(text, parse_mode="HTML")

    # -------------------------
    # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä—ã
    # -------------------------
    async def analyze(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self._is_authorized(update):
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        args = context.args or []
        symbol = args[0].upper() if len(args) >= 1 else self.bot.default_symbol
        interval = args[1] if len(args) >= 2 else self.bot.default_interval

        msg = await update.message.reply_text(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} {interval}...")

        try:
            async with aiohttp.ClientSession() as session:
                provider = DataProvider(session)
                klines = await provider.fetch_klines(symbol=symbol, interval=interval, limit=500)
                df = provider.klines_to_dataframe(klines)

                if df.empty:
                    await msg.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç ByBIT.")
                    return

                generator = SignalGenerator(df)
                generator.compute_indicators()
                
                # –ï—Å–ª–∏ MTF –≤–∫–ª—é—á–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º MTF –∞–Ω–∞–ª–∏–∑ –Ω–∞–ø—Ä—è–º—É—é
                if USE_MULTI_TIMEFRAME:
                    result = await generator.generate_signal_multi_timeframe(
                        data_provider=provider,
                        symbol=symbol,
                        strategy=STRATEGY_MODE
                    )
                else:
                    result = self.bot._generate_signal_with_strategy(generator, symbol=symbol)

            text = self.formatters.format_analysis(result, symbol, interval)
            await msg.edit_text(text, parse_mode="HTML")
        except Exception as e:
            await msg.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
    
    async def mtf_signal(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """üîÄ Multi-timeframe –∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞"""
        if not self._is_authorized(update):
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        if not context.args:
            await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mtf_signal SYMBOL")
            return
        
        symbol = context.args[0].upper()
        msg = await update.message.reply_text(f"üîç Multi-timeframe –∞–Ω–∞–ª–∏–∑ {symbol}...")
        
        try:
            async with aiohttp.ClientSession() as session:
                provider = DataProvider(session)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
                klines = await provider.fetch_klines(symbol=symbol, interval=self.bot.default_interval, limit=200)
                df = provider.klines_to_dataframe(klines)
                
                if df.empty:
                    await msg.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                    return
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º MTF —Å–∏–≥–Ω–∞–ª –Ω–∞–ø—Ä—è–º—É—é (async) - –í–ù–£–¢–†–ò async with!
                generator = SignalGenerator(df)
                generator.compute_indicators()
                result = await generator.generate_signal_multi_timeframe(
                    data_provider=provider,
                    symbol=symbol,
                    strategy=STRATEGY_MODE
                )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ (–ø–æ—Å–ª–µ async with, –Ω–æ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –ø–æ–ª—É—á–µ–Ω—ã)
            text = self.formatters._format_mtf_analysis(result, symbol)
            await msg.edit_text(text, parse_mode="HTML")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ MTF –∞–Ω–∞–ª–∏–∑–∞: {e}")
            await msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    # -------------------------
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    # -------------------------
    async def settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self._is_authorized(update):
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        args = context.args
        if not args:
            text = (
                f"<b>‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
                f"<b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞:</b>\n"
                f"  ‚Ä¢ –¢–µ–∫—É—â–∏–π: {self.bot.current_poll_interval} —Å–µ–∫\n"
                f"  ‚Ä¢ –ë–∞–∑–æ–≤—ã–π: {self.bot.poll_interval} —Å–µ–∫\n"
                f"  ‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: {POLL_INTERVAL_MIN}-{POLL_INTERVAL_MAX} —Å–µ–∫\n\n"
                f"<b>–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å:</b>\n"
                f"  ‚Ä¢ –û–∫–Ω–æ: {self.bot.volatility_window} —Å–≤–µ—á–µ–π\n"
                f"  ‚Ä¢ –ü–æ—Ä–æ–≥ –∞–ª–µ—Ä—Ç–∞: {self.bot.volatility_threshold*100:.2f}%\n"
                f"  ‚Ä¢ –ü–æ—Ä–æ–≥ –≤—ã—Å–æ–∫–æ–π: {POLL_VOLATILITY_HIGH_THRESHOLD*100:.2f}%\n"
                f"  ‚Ä¢ –ü–æ—Ä–æ–≥ –Ω–∏–∑–∫–æ–π: {POLL_VOLATILITY_LOW_THRESHOLD*100:.2f}%\n"
                f"  ‚Ä¢ Cooldown: {VOLATILITY_ALERT_COOLDOWN/60:.0f} –º–∏–Ω\n\n"
                f"<i>–ü—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
                f"—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –¥–æ {POLL_INTERVAL_MAX}—Å –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Å–ø–∞–º–∞</i>"
            )
            await update.message.reply_text(text, parse_mode="HTML")
            return

        try:
            if len(args) >= 1:
                self.bot.poll_interval = int(args[0])
            if len(args) >= 2:
                self.bot.volatility_window = int(args[1])
            if len(args) >= 3:
                self.bot.volatility_threshold = float(args[2])
            self.bot._save_tracked_symbols()
            await update.message.reply_text(
                f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n"
                f"poll_interval = {self.bot.poll_interval} —Å–µ–∫\n"
                f"volatility_window = {self.bot.volatility_window} —Å–≤–µ—á–µ–π\n"
                f"volatility_threshold = {self.bot.volatility_threshold*100:.2f}%"
            )
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    # -------------------------
    # Paper Trading –∫–æ–º–∞–Ω–¥—ã (–¥–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å)
    # -------------------------
    async def paper_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        return await self.paper_trading.paper_start(update, context)
    
    async def paper_stop(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        return await self.paper_trading.paper_stop(update, context)
    
    async def paper_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        return await self.paper_trading.paper_status(update, context)
    
    async def paper_balance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        return await self.paper_trading.paper_balance(update, context)
    
    async def paper_trades(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        return await self.paper_trading.paper_trades(update, context)
    
    async def paper_reset(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        return await self.paper_trading.paper_reset(update, context)
    
    async def paper_backtest(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        return await self.paper_trading.paper_backtest(update, context)
    
    async def paper_debug(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        return await self.paper_trading.paper_debug(update, context)
    
    async def paper_candidates(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        return await self.paper_trading.paper_candidates(update, context)
    
    async def paper_force_buy(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        return await self.paper_trading.paper_force_buy(update, context)
    
    async def paper_force_sell(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        return await self.paper_trading.paper_force_sell(update, context)
    
    async def paper_force_short(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        return await self.paper_trading.paper_force_short(update, context)

    # -------------------------
    # –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã (–¥–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å)
    # -------------------------
    async def kelly_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        return await self.analytics.kelly_info(update, context)
    
    async def averaging_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        return await self.analytics.averaging_status(update, context)
    
    async def signal_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        return await self.analytics.signal_stats(update, context)
    
    async def signal_analysis(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        return await self.analytics.signal_analysis(update, context)
