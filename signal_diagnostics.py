"""
üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–ì–ù–ê–õ–û–í v5.5

–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤.
–ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å –ø–æ—á–µ–º—É –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–ª–∏ –ø–æ—á–µ–º—É –∏—Ö —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ.
"""

from datetime import datetime
from typing import Dict, Any, List
from logger import logger
import config


class SignalDiagnostics:
	"""–ö–ª–∞—Å—Å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
	
	def __init__(self):
		self.signal_history = []
		self.last_buy_time = None
		self.buy_signals_count = 0
		self.hold_signals_count = 0
		self.sell_signals_count = 0
		self.blocked_reasons = {}
		
	def log_signal_generation(
		self,
		symbol: str,
		signal_result: Dict[str, Any],
		price: float,
		can_buy: bool = True,
		block_reason: str = None,
		compact: bool = True
	):
		"""
		–õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞.
		
		Args:
			symbol: –°–∏–º–≤–æ–ª –ø–∞—Ä—ã
			signal_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç generate_signal_hybrid()
			price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
			can_buy: –ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é
			block_reason: –ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–µ—Å–ª–∏ can_buy=False)
			compact: –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
		"""
		timestamp = datetime.now().isoformat()
		signal = signal_result.get("signal", "UNKNOWN")
		active_mode = signal_result.get("active_mode", "UNKNOWN")
		bullish_votes = signal_result.get("bullish_votes", 0)
		bearish_votes = signal_result.get("bearish_votes", 0)
		votes_delta = bullish_votes - bearish_votes
		reasons = signal_result.get("reasons", [])
		position_size = signal_result.get("position_size_percent", 0)
		
		# –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
		if signal == "BUY":
			self.buy_signals_count += 1
		elif signal == "SELL":
			self.sell_signals_count += 1
		else:
			self.hold_signals_count += 1
		
		# –ü–æ–¥—Å—á—ë—Ç –ø—Ä–∏—á–∏–Ω –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
		if signal == "BUY" and not can_buy and block_reason:
			self.blocked_reasons[block_reason] = self.blocked_reasons.get(block_reason, 0) + 1
		
		# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
		signal_record = {
			"timestamp": timestamp,
			"symbol": symbol,
			"signal": signal,
			"mode": active_mode,
			"price": price,
			"bullish_votes": bullish_votes,
			"bearish_votes": bearish_votes,
			"votes_delta": votes_delta,
			"position_size": position_size,
			"can_buy": can_buy,
			"block_reason": block_reason,
			"reasons": reasons[:3]  # –¢–æ–ø-3 –ø—Ä–∏—á–∏–Ω—ã
		}
		self.signal_history.append(signal_record)
		
		# –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –∏–ª–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
		if compact:
			# –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º - —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
			if signal == "BUY":
				status = "BLOCKED" if not can_buy else "READY"
				block_info = f" ({block_reason})" if not can_buy else ""
				logger.info(f"üìä {symbol}: {signal} @ ${price:.4f} | {active_mode} | V:{votes_delta:+d} | {status}{block_info}")
				if not can_buy:
					logger.warning(f"‚ùå {symbol} BLOCKED: {block_reason}")
				else:
					self.last_buy_time = timestamp
			elif signal == "HOLD":
				logger.debug(f"‚è∏Ô∏è {symbol}: HOLD (V:{votes_delta:+d})")
			elif signal == "SELL":
				logger.debug(f"üî¥ {symbol}: SELL (V:{votes_delta:+d})")
		else:
			# –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
			logger.info(f"\n{'='*80}")
			logger.info(f"[SIGNAL_DIAG] üìä {symbol} @ ${price:.4f} | {timestamp}")
			logger.info(f"[SIGNAL_DIAG] –°–∏–≥–Ω–∞–ª: {signal} | –†–µ–∂–∏–º: {active_mode}")
			logger.info(f"[SIGNAL_DIAG] –ì–æ–ª–æ—Å–∞: Bullish={bullish_votes}, Bearish={bearish_votes}, Delta={votes_delta:+d}")
			
			if signal == "BUY":
				logger.info(f"[SIGNAL_DIAG] üéØ BUY –°–ò–ì–ù–ê–õ –û–ë–ù–ê–†–£–ñ–ï–ù!")
				logger.info(f"[SIGNAL_DIAG] Position Size: {position_size*100:.1f}%")
				logger.info(f"[SIGNAL_DIAG] –¢–æ–ø-3 –ø—Ä–∏—á–∏–Ω—ã:")
				for i, reason in enumerate(reasons[:3], 1):
					logger.info(f"[SIGNAL_DIAG]   {i}. {reason}")
				
				if not can_buy:
					logger.warning(f"[SIGNAL_DIAG] ‚ùå –°–ò–ì–ù–ê–õ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù: {block_reason}")
				else:
					logger.info(f"[SIGNAL_DIAG] ‚úÖ –°–∏–≥–Ω–∞–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω")
					self.last_buy_time = timestamp
			
			elif signal == "HOLD":
				logger.debug(f"[SIGNAL_DIAG] ‚è∏Ô∏è HOLD - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª (delta={votes_delta})")
				if reasons:
					logger.debug(f"[SIGNAL_DIAG] –ü—Ä–∏—á–∏–Ω—ã: {', '.join(reasons[:2])}")
			
			elif signal == "SELL":
				logger.debug(f"[SIGNAL_DIAG] üî¥ SELL - –º–µ–¥–≤–µ–∂–∏–π –Ω–∞—Å—Ç—Ä–æ–π (delta={votes_delta})")
			
			# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
			conflicts = [r for r in reasons if "–ö–†–ò–¢–ò–ß–ù–û" in r or "‚ö†Ô∏è" in r]
			if conflicts:
				logger.warning(f"[SIGNAL_DIAG] ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
				for conflict in conflicts:
					logger.warning(f"[SIGNAL_DIAG]   - {conflict}")
			
			logger.info(f"{'='*80}\n")
	
	def log_position_check(
		self,
		symbol: str,
		current_price: float,
		position_data: Dict[str, Any],
		action: str = None
	):
		"""
		–õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏.
		
		Args:
			symbol: –°–∏–º–≤–æ–ª –ø–∞—Ä—ã
			current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
			position_data: –î–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (entry_price, pnl, etc)
			action: –î–µ–π—Å—Ç–≤–∏–µ (SL, TP, TRAILING, etc) –∏–ª–∏ None
		"""
		entry_price = position_data.get("entry_price", 0)
		pnl_percent = position_data.get("pnl_percent", 0)
		stop_loss = position_data.get("stop_loss", 0)
		take_profit = position_data.get("take_profit", 0)
		
		price_change = ((current_price - entry_price) / entry_price) * 100 if entry_price > 0 else 0
		
		logger.info(f"\n{'='*60}")
		logger.info(f"[POS_CHECK] üìà {symbol} @ ${current_price:.4f}")
		logger.info(f"[POS_CHECK] Entry: ${entry_price:.4f} ‚Üí Change: {price_change:+.2f}%")
		logger.info(f"[POS_CHECK] P&L: {pnl_percent:+.2f}%")
		logger.info(f"[POS_CHECK] SL: ${stop_loss:.4f} | TP: ${take_profit:.4f}")
		
		if action:
			logger.info(f"[POS_CHECK] üé¨ –î–µ–π—Å—Ç–≤–∏–µ: {action}")
		
		# –†–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ —É—Ä–æ–≤–Ω–µ–π
		if stop_loss > 0:
			dist_to_sl = ((current_price - stop_loss) / stop_loss) * 100
			logger.debug(f"[POS_CHECK] –î–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ SL: {dist_to_sl:+.2f}%")
		
		if take_profit > 0:
			dist_to_tp = ((take_profit - current_price) / current_price) * 100
			logger.debug(f"[POS_CHECK] –î–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ TP: {dist_to_tp:+.2f}%")
		
		logger.info(f"{'='*60}\n")
	
	def print_summary(self):
		"""–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º —Å–∏–≥–Ω–∞–ª–∞–º"""
		total = self.buy_signals_count + self.hold_signals_count + self.sell_signals_count
		
		if total == 0:
			logger.warning("[SIGNAL_SUMMARY] ‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
			return
		
		logger.info(f"\n{'='*80}")
		logger.info("[SIGNAL_SUMMARY] üìä –°–í–û–î–ö–ê –ü–û –°–ò–ì–ù–ê–õ–ê–ú")
		logger.info(f"{'='*80}")
		logger.info(f"–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total}")
		logger.info(f"  BUY:  {self.buy_signals_count} ({self.buy_signals_count/total*100:.1f}%)")
		logger.info(f"  HOLD: {self.hold_signals_count} ({self.hold_signals_count/total*100:.1f}%)")
		logger.info(f"  SELL: {self.sell_signals_count} ({self.sell_signals_count/total*100:.1f}%)")
		
		if self.last_buy_time:
			logger.info(f"\n–ü–æ—Å–ª–µ–¥–Ω–∏–π BUY —Å–∏–≥–Ω–∞–ª: {self.last_buy_time}")
		else:
			logger.warning("\n‚ö†Ô∏è –ù–∏ –æ–¥–Ω–æ–≥–æ BUY —Å–∏–≥–Ω–∞–ª–∞ –Ω–µ –±—ã–ª–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!")
		
		if self.blocked_reasons:
			logger.info(f"\nüö´ –ü—Ä–∏—á–∏–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ BUY —Å–∏–≥–Ω–∞–ª–æ–≤:")
			for reason, count in sorted(self.blocked_reasons.items(), key=lambda x: x[1], reverse=True):
				logger.info(f"  {reason}: {count} —Ä–∞–∑")
		
		# –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
		if len(self.signal_history) > 0:
			recent = self.signal_history[-10:]
			logger.info(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–∏–≥–Ω–∞–ª–æ–≤:")
			for i, sig in enumerate(recent, 1):
				symbol = sig["symbol"]
				signal = sig["signal"]
				delta = sig["votes_delta"]
				mode = sig["mode"]
				can_buy = "‚úÖ" if sig["can_buy"] else "‚ùå"
				logger.info(
					f"  {i}. {symbol}: {signal} (delta={delta:+d}, mode={mode}) {can_buy}"
				)
		
		logger.info(f"{'='*80}\n")
	
	def analyze_vote_distribution(self):
		"""–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤"""
		if not self.signal_history:
			return
		
		deltas = [s["votes_delta"] for s in self.signal_history]
		
		logger.info(f"\n{'='*80}")
		logger.info("[VOTE_ANALYSIS] üìä –ê–ù–ê–õ–ò–ó –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ì–û–õ–û–°–û–í")
		logger.info(f"{'='*80}")
		logger.info(f"Min delta: {min(deltas):+d}")
		logger.info(f"Max delta: {max(deltas):+d}")
		logger.info(f"Avg delta: {sum(deltas)/len(deltas):+.1f}")
		logger.info(f"Median delta: {sorted(deltas)[len(deltas)//2]:+d}")
		
		# –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º
		# HYBRID v5.5 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –ª–æ–≥–∏–∫—É, –Ω–æ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –ø–æ—Ä–æ–≥ BUY ~5 –≥–æ–ª–æ—Å–æ–≤
		min_buy_threshold = 5
		ranges = [
			(float('-inf'), -5, "–°–∏–ª—å–Ω–æ bearish (<-5)"),
			(-5, -3, "–°—Ä–µ–¥–Ω–µ bearish (-5 to -3)"),
			(-3, 0, "–°–ª–∞–±–æ bearish (-3 to 0)"),
			(0, 3, "–°–ª–∞–±–æ bullish (0 to 3)"),
			(3, min_buy_threshold, f"–°—Ä–µ–¥–Ω–µ bullish (3 to {min_buy_threshold-1})"),
			(min_buy_threshold, float('inf'), f"–°–∏–ª—å–Ω–æ bullish (>={min_buy_threshold}) üéØ BUY!")
		]
		
		logger.info(f"\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:")
		for low, high, label in ranges:
			count = len([d for d in deltas if low <= d < high])
			pct = count / len(deltas) * 100
			logger.info(f"  {label}: {count} ({pct:.1f}%)")
		
		# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
		max_delta = max(deltas)
		avg_delta = sum(deltas)/len(deltas)
		
		logger.info(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
		if max_delta < min_buy_threshold:
			logger.warning(
				f"  ‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π delta ({max_delta:+d}) –º–µ–Ω—å—à–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ BUY (~{min_buy_threshold})"
			)
			logger.warning(f"  ‚Üí –†—ã–Ω–æ–∫ —Å–ª–∞–±—ã–π, —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Å–º—è–≥—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤")
		
		if avg_delta < 0:
			logger.warning(f"  ‚ö†Ô∏è –°—Ä–µ–¥–Ω–∏–π delta –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ({avg_delta:+.1f})")
			logger.warning(f"  ‚Üí –†—ã–Ω–æ–∫ –≤ –º–µ–¥–≤–µ–∂—å–µ–π —Ñ–∞–∑–µ, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç BUY")
		
		buy_ready = len([d for d in deltas if d >= min_buy_threshold])
		if buy_ready == 0:
			logger.warning(f"  ‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω —Å–∏–≥–Ω–∞–ª –Ω–µ –¥–æ—Å—Ç–∏–≥ –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ BUY (~{min_buy_threshold})!")
			logger.warning(f"  ‚Üí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –¥–æ–∂–¥–∞—Ç—å—Å—è –±–æ–ª–µ–µ —Å–∏–ª—å–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞")
		else:
			logger.info(f"  ‚úÖ {buy_ready} —Å–∏–≥–Ω–∞–ª–æ–≤ –≥–æ—Ç–æ–≤—ã –∫ BUY ({buy_ready/len(deltas)*100:.1f}%)")
		
		logger.info(f"{'='*80}\n")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–æ—Ç–µ
diagnostics = SignalDiagnostics()


