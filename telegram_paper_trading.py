"""
–ú–æ–¥—É–ª—å Paper Trading –∫–æ–º–∞–Ω–¥ –¥–ª—è Telegram –±–æ—Ç–∞
–°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ–π
"""

import aiohttp
import asyncio
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes
from config import (
    INITIAL_BALANCE, STRATEGY_MODE, USE_MULTI_TIMEFRAME, ADX_WINDOW,
    COMMISSION_RATE, STOP_LOSS_PERCENT, TAKE_PROFIT_PERCENT, 
    PARTIAL_CLOSE_PERCENT, TRAILING_STOP_PERCENT
)
from data_provider import DataProvider
from signal_generator import SignalGenerator
from logger import logger
from telegram_formatters import TelegramFormatters


class TelegramPaperTrading:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Paper Trading –∫–æ–º–∞–Ω–¥"""
    
    def __init__(self, bot_instance):
        self.bot = bot_instance
        self.formatters = TelegramFormatters()
    
    def _is_authorized(self, update: Update) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞"""
        if self.bot.owner_chat_id is None:
            return True
        return update.effective_chat.id == self.bot.owner_chat_id

    async def paper_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç paper trading"""
        if not self._is_authorized(update):
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        if self.bot.paper_trader.is_running:
            await update.message.reply_text("‚ö†Ô∏è Paper Trading —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
            return
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        if context.args and len(context.args) > 0:
            try:
                initial_balance = float(context.args[0])
                self.bot.paper_trader = self.bot.paper_trader.__class__(initial_balance=initial_balance)
            except ValueError:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±–∞–ª–∞–Ω—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é $100")
        
        self.bot.paper_trader.start()
        self.bot.paper_trader.save_state()
        
        text = (
            f"<b>üöÄ Paper Trading –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
            f"üí∞ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${self.bot.paper_trader.initial_balance:.2f}\n"
            f"üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –∫–∞–∫ –≤ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–µ\n"
            f"‚Ä¢ –°—Ç–æ–ø-–ª–æ—Å—Å: 5%\n"
            f"‚Ä¢ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: 10% (—á–∞—Å—Ç–∏—á–Ω–æ–µ 50%)\n"
            f"‚Ä¢ Trailing stop: 2%\n"
            f"‚Ä¢ –ú–∞–∫—Å. –ø–æ–∑–∏—Ü–∏–π: 3\n\n"
            f"–ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º.\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /paper_status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è."
        )
        await update.message.reply_text(text, parse_mode="HTML")
        
        if self.bot.chat_id is None:
            self.bot.chat_id = update.effective_chat.id
            self.bot._save_tracked_symbols()

    async def paper_stop(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç paper trading –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏"""
        if not self._is_authorized(update):
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        if not self.bot.paper_trader.is_running:
            await update.message.reply_text("‚ö†Ô∏è Paper Trading –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
            return
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Ç–µ–∫—É—â–∏–º —Ü–µ–Ω–∞–º
        if self.bot.paper_trader.positions:
            msg = await update.message.reply_text("‚è≥ –ó–∞–∫—Ä—ã–≤–∞—é –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏...")
            
            closed_positions = []
            async with aiohttp.ClientSession() as session:
                provider = DataProvider(session)
                for symbol in list(self.bot.paper_trader.positions.keys()):
                    try:
                        klines = await provider.fetch_klines(symbol=symbol, interval=self.bot.default_interval, limit=1)
                        df = provider.klines_to_dataframe(klines)
                        if not df.empty:
                            current_price = float(df['close'].iloc[-1])
                            trade_info = self.bot.paper_trader.close_position(symbol, current_price, "MANUAL-CLOSE")
                            if trade_info:
                                closed_positions.append(f"‚Ä¢ {symbol}: {trade_info['profit']:+.2f} USD ({trade_info['profit_percent']:+.2f}%)")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
            
            positions_text = "\n".join(closed_positions) if closed_positions else "–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è"
        else:
            positions_text = "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"
        
        self.bot.paper_trader.stop()
        self.bot.paper_trader.save_state()
        
        status = self.bot.paper_trader.get_status()
        text = (
            f"<b>‚è∏ Paper Trading –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            f"–ó–∞–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π:\n{positions_text}\n\n"
            f"üí∞ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${status['total_balance']:.2f}\n"
            f"üìà –ü—Ä–∏–±—ã–ª—å: {status['total_profit']:+.2f} USD ({status['total_profit_percent']:+.2f}%)"
        )
        
        if self.bot.paper_trader.positions:
            await msg.edit_text(text, parse_mode="HTML")
        else:
            await update.message.reply_text(text, parse_mode="HTML")

    async def paper_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å paper trading"""
        if not self._is_authorized(update):
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        status = self.bot.paper_trader.get_status()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ PnL
        current_prices = {}
        if status['positions']:
            async with aiohttp.ClientSession() as session:
                provider = DataProvider(session)
                for pos in status['positions']:
                    symbol = pos['symbol']
                    try:
                        klines = await provider.fetch_klines(symbol=symbol, interval=self.bot.default_interval, limit=1)
                        df = provider.klines_to_dataframe(klines)
                        if not df.empty:
                            current_prices[symbol] = float(df['close'].iloc[-1])
                    except:
                        current_prices[symbol] = pos['entry_price']
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º PnL —Å —Ç–µ–∫—É—â–∏–º–∏ —Ü–µ–Ω–∞–º–∏
        total_pnl = 0.0
        positions_text = ""
        for pos in status['positions']:
            symbol = pos['symbol']
            current_price = current_prices.get(symbol, pos['entry_price'])
            position_obj = self.bot.paper_trader.positions[symbol]
            pnl_info = position_obj.get_pnl(current_price)
            total_pnl += pnl_info['pnl']
            
            emoji = "üü¢" if pnl_info['pnl'] > 0 else "üî¥" if pnl_info['pnl'] < 0 else "‚ö™"
            partial_mark = " [—á–∞—Å—Ç–∏—á–Ω–æ]" if pos['partial_closed'] else ""
            
            positions_text += (
                f"  {emoji} <b>{symbol}</b>{partial_mark}\n"
                f"    –í—Ö–æ–¥: {self.formatters.format_price(pos['entry_price'])} ‚Üí –°–µ–π—á–∞—Å: {self.formatters.format_price(current_price)}\n"
                f"    PnL: ${pnl_info['pnl']:+.2f} ({pnl_info['pnl_percent']:+.2f}%)\n"
                f"    SL: {self.formatters.format_price(pos['stop_loss'])} | TP: {self.formatters.format_price(pos['take_profit'])}\n\n"
            )
        
        total_balance = status['current_balance'] + sum(
            self.bot.paper_trader.positions[pos['symbol']].get_pnl(current_prices.get(pos['symbol'], pos['entry_price']))['current_value']
            for pos in status['positions']
        )
        
        total_profit = total_balance - status['initial_balance']
        total_profit_percent = (total_profit / status['initial_balance']) * 100
        
        status_emoji = "üü¢" if status['is_running'] else "‚è∏"
        
        text = (
            f"<b>{status_emoji} Paper Trading Status</b>\n\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b>\n"
            f"  ‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ: ${status['current_balance']:.2f}\n"
            f"  ‚Ä¢ –í—Å–µ–≥–æ: ${total_balance:.2f}\n"
            f"  ‚Ä¢ –ü—Ä–∏–±—ã–ª—å: {total_profit:+.2f} USD ({total_profit_percent:+.2f}%)\n\n"
            f"üìä <b>–ü–æ–∑–∏—Ü–∏–∏ ({len(status['positions'])}/{status.get('max_positions', 3)}):</b>\n"
        )
        
        if positions_text:
            text += positions_text
        else:
            text += "  –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π\n\n"
        
        text += (
            f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"  ‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {status['stats']['total_trades']}\n"
            f"  ‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {status['stats']['win_rate']:.1f}%\n"
            f"  ‚Ä¢ –ö–æ–º–∏—Å—Å–∏–∏: ${status['stats']['total_commission']:.4f}\n"
            f"  ‚Ä¢ Stop-loss: {status['stats']['stop_loss_triggers']}\n"
            f"  ‚Ä¢ Take-profit: {status['stats']['take_profit_triggers']}\n"
            f"  ‚Ä¢ Trailing-stop: {status['stats']['trailing_stop_triggers']}"
        )
        
        await update.message.reply_text(text, parse_mode="HTML")

    async def paper_balance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ"""
        if not self._is_authorized(update):
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        status = self.bot.paper_trader.get_status()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
        current_prices = {}
        if status['positions']:
            async with aiohttp.ClientSession() as session:
                provider = DataProvider(session)
                for pos in status['positions']:
                    symbol = pos['symbol']
                    try:
                        klines = await provider.fetch_klines(symbol=symbol, interval=self.bot.default_interval, limit=1)
                        df = provider.klines_to_dataframe(klines)
                        if not df.empty:
                            current_prices[symbol] = float(df['close'].iloc[-1])
                    except:
                        current_prices[symbol] = pos['entry_price']
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
        total_invested = sum(
            self.bot.paper_trader.positions[pos['symbol']].invest_amount
            for pos in status['positions']
        )
        
        total_current_value = sum(
            self.bot.paper_trader.positions[pos['symbol']].get_pnl(current_prices.get(pos['symbol'], pos['entry_price']))['current_value']
            for pos in status['positions']
        )
        
        total_balance = status['current_balance'] + total_current_value
        total_profit = total_balance - status['initial_balance']
        total_profit_percent = (total_profit / status['initial_balance']) * 100
        
        text = (
            f"<b>üí∞ Paper Trading Balance</b>\n\n"
            f"<b>–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:</b> ${status['initial_balance']:.2f}\n"
            f"<b>–°–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞:</b> ${status['current_balance']:.2f}\n"
            f"<b>–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:</b> ${total_invested:.2f}\n"
            f"<b>–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π:</b> ${total_current_value:.2f}\n"
            f"<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${total_balance:.2f}\n\n"
            f"<b>{'üìà' if total_profit >= 0 else 'üìâ'} –ü—Ä–∏–±—ã–ª—å/–£–±—ã—Ç–æ–∫:</b> {total_profit:+.2f} USD ({total_profit_percent:+.2f}%)\n"
            f"<b>üí∏ –ö–æ–º–∏—Å—Å–∏–∏:</b> ${status['stats']['total_commission']:.4f}\n\n"
            f"<b>–ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞:</b> {(total_invested / status['initial_balance'] * 100):.1f}%"
        )
        
        await update.message.reply_text(text, parse_mode="HTML")

    async def paper_trades(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""
        if not self._is_authorized(update):
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
            
        limit = 10
        if context.args and len(context.args) > 0:
            try:
                limit = int(context.args[0])
                limit = min(max(limit, 1), 50)  # –û—Ç 1 –¥–æ 50
            except ValueError:
                pass
        
        trades = self.bot.paper_trader.trades_history[-limit:]
        
        if not trades:
            await update.message.reply_text("üìù –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –ø—É—Å—Ç–∞.")
            return
        
        text = f"<b>üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(trades)} —Å–¥–µ–ª–æ–∫:</b>\n\n"
        
        for trade in reversed(trades):
            trade_type = trade['type']
            symbol = trade.get('symbol', 'N/A')
            price = trade.get('price', 0)
            
            if trade_type == "BUY":
                emoji = "üü¢"
                details = f"  –ö—É–ø–∏–ª {trade['amount']:.6f} @ {self.formatters.format_price(price)}\n  –í–ª–æ–∂–µ–Ω–æ: ${trade['invest_amount']:.2f}"
            elif trade_type in ["SELL", "MANUAL-CLOSE"]:
                emoji = "üî¥"
                profit_emoji = "üìà" if trade['profit'] >= 0 else "üìâ"
                details = f"  –ü—Ä–æ–¥–∞–ª {trade['amount']:.6f} @ {self.formatters.format_price(price)}\n  {profit_emoji} –ü—Ä–∏–±—ã–ª—å: ${trade['profit']:+.2f} ({trade['profit_percent']:+.2f}%)"
            elif trade_type == "STOP-LOSS":
                emoji = "üõë"
                details = f"  –°—Ç–æ–ø-–ª–æ—Å—Å {trade['amount']:.6f} @ {self.formatters.format_price(price)}\n  üìâ –£–±—ã—Ç–æ–∫: ${trade['profit']:+.2f} ({trade['profit_percent']:+.2f}%)"
            elif trade_type == "PARTIAL-TP":
                emoji = "üíé"
                details = f"  –ß–∞—Å—Ç–∏—á–Ω—ã–π —Ç–µ–π–∫ {trade['amount']:.6f} @ {self.formatters.format_price(price)}\n  üìà –ü—Ä–∏–±—ã–ª—å: ${trade['profit']:+.2f} ({trade['profit_percent']:+.2f}%)"
            elif trade_type == "TRAILING-STOP":
                emoji = "üîª"
                details = f"  Trailing stop {trade['amount']:.6f} @ {self.formatters.format_price(price)}\n  üìä –ü—Ä–∏–±—ã–ª—å: ${trade['profit']:+.2f} ({trade['profit_percent']:+.2f}%)"
            else:
                emoji = "‚ö™"
                details = f"  {trade.get('amount', 0):.6f} @ {self.formatters.format_price(price)}"
            
            time_str = trade.get('time', 'N/A')
            if isinstance(time_str, datetime):
                time_str = time_str.strftime('%H:%M:%S')
            elif isinstance(time_str, str) and 'T' in time_str:
                time_str = time_str.split('T')[1].split('.')[0]
            
            text += f"{emoji} <b>{trade_type}</b> {symbol} [{time_str}]\n{details}\n\n"
        
        await update.message.reply_text(text, parse_mode="HTML")

    async def paper_reset(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç paper trading"""
        if not self._is_authorized(update):
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        if self.bot.paper_trader.is_running:
            await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Paper Trading –∫–æ–º–∞–Ω–¥–æ–π /paper_stop")
            return
        
        old_balance = self.bot.paper_trader.balance
        old_trades = len(self.bot.paper_trader.trades_history)
        
        self.bot.paper_trader.reset()
        self.bot.paper_trader.save_state()
        
        text = (
            f"<b>üîÑ Paper Trading —Å–±—Ä–æ—à–µ–Ω</b>\n\n"
            f"–ë–∞–ª–∞–Ω—Å —Å–±—Ä–æ—à–µ–Ω —Å ${old_balance:.2f} ‚Üí ${self.bot.paper_trader.initial_balance:.2f}\n"
            f"–£–¥–∞–ª–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {old_trades}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /paper_start –¥–ª—è –∑–∞–ø—É—Å–∫–∞."
        )
        await update.message.reply_text(text, parse_mode="HTML")

    async def paper_backtest(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ë—ã—Å—Ç—Ä–∞—è —Å–∏–º—É–ª—è—Ü–∏—è paper trading –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not self._is_authorized(update):
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        period_hours = 24  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 24 —á–∞—Å–∞
        if context.args and len(context.args) > 0:
            try:
                period_hours = int(context.args[0])
                period_hours = min(max(period_hours, 1), 168)  # –û—Ç 1 –¥–æ 168 —á–∞—Å–æ–≤ (–Ω–µ–¥–µ–ª—è)
            except ValueError:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É—é 24 —á–∞—Å–∞.")
        
        if not self.bot.tracked_symbols:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add SYMBOL")
            return
        
        msg = await update.message.reply_text(f"‚è≥ –ó–∞–ø—É—Å–∫–∞—é —Å–∏–º—É–ª—è—Ü–∏—é –∑–∞ {period_hours}—á –Ω–∞ {len(self.bot.tracked_symbols)} –ø–∞—Ä–∞—Ö...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç
            symbols = list(self.bot.tracked_symbols)
            results = []
            
            async with aiohttp.ClientSession() as session:
                provider = DataProvider(session)
                
                for i, symbol in enumerate(symbols):
                    await msg.edit_text(f"‚è≥ –°–∏–º—É–ª—è—Ü–∏—è {i+1}/{len(symbols)}: {symbol}...")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    candles_per_hour = int(60 / int(self.bot.default_interval.replace('m',''))) if 'm' in self.bot.default_interval else 1
                    limit = period_hours * candles_per_hour
                    
                    df = await provider.fetch_klines(symbol=symbol, interval=self.bot.default_interval, limit=limit)
                    
                    if df is None or df.empty:
                        continue
                    
                    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–∞–∫ –≤ backtest.py
                    generator = SignalGenerator(df)
                    generator.compute_indicators()
                    
                    signals = []
                    min_window = 14
                    
                    for j in range(len(df)):
                        sub_df = df.iloc[:j+1]
                        if len(sub_df) < min_window:
                            signals.append({"signal": "HOLD", "price": sub_df["close"].iloc[-1]})
                            continue
                        gen = SignalGenerator(sub_df)
                        gen.compute_indicators()
                        res = self.bot._generate_signal_with_strategy(gen)
                        signals.append(res)
                    
                    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
                    from position_sizing import get_position_size_percent
                    
                    balance = 100.0
                    position = 0.0
                    entry_price = None
                    trades = 0
                    wins = 0
                    losses = 0
                    partial_closed = False
                    max_price = 0.0
                    
                    for s in signals:
                        price = s.get("price", 0)
                        sig = s.get("signal", "HOLD")
                        signal_strength = abs(s.get("bullish_votes", 0) - s.get("bearish_votes", 0))
                        atr = s.get("ATR", 0.0)
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤
                        if position > 0 and entry_price:
                            price_change = (price - entry_price) / entry_price
                            
                            if partial_closed:
                                if price > max_price:
                                    max_price = price
                                trailing_drop = (max_price - price) / max_price
                                if trailing_drop >= TRAILING_STOP_PERCENT:
                                    sell_value = position * price
                                    commission = sell_value * COMMISSION_RATE
                                    balance += sell_value - commission
                                    trades += 1
                                    if (price - entry_price) > 0:
                                        wins += 1
                                    else:
                                        losses += 1
                                    position = 0.0
                                    entry_price = None
                                    partial_closed = False
                                    max_price = 0.0
                                    continue
                            else:
                                if price_change <= -STOP_LOSS_PERCENT:
                                    sell_value = position * price
                                    commission = sell_value * COMMISSION_RATE
                                    balance += sell_value - commission
                                    trades += 1
                                    losses += 1
                                    position = 0.0
                                    entry_price = None
                                    continue
                                
                                if price_change >= TAKE_PROFIT_PERCENT:
                                    close_amount = position * PARTIAL_CLOSE_PERCENT
                                    keep_amount = position - close_amount
                                    sell_value = close_amount * price
                                    commission = sell_value * COMMISSION_RATE
                                    balance += sell_value - commission
                                    position = keep_amount
                                    partial_closed = True
                                    max_price = price
                                    trades += 1
                                    wins += 1
                                    continue
                        
                        # –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π
                        if sig == "BUY" and position == 0 and balance > 0:
                            position_size_percent = get_position_size_percent(signal_strength, atr, price)
                            invest_amount = balance * position_size_percent
                            commission = invest_amount * COMMISSION_RATE
                            position = (invest_amount - commission) / price
                            entry_price = price
                            balance -= invest_amount
                            trades += 1
                        elif sig == "SELL" and position > 0 and not partial_closed:
                            sell_value = position * price
                            commission = sell_value * COMMISSION_RATE
                            balance += sell_value - commission
                            if (price - entry_price) > 0:
                                wins += 1
                            else:
                                losses += 1
                                position = 0.0
                                entry_price = None
                        
                        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è –ø–æ–∑–∏—Ü–∏—é
                        if position > 0:
                            final_price = signals[-1]["price"]
                            sell_value = position * final_price
                            commission = sell_value * COMMISSION_RATE
                            balance += sell_value - commission
                            if (final_price - entry_price) > 0:
                                wins += 1
                            else:
                                losses += 1
                            position = 0.0
                            partial_closed = False
                        
                        profit = balance - 100.0
                        profit_percent = profit
                        win_rate = (wins / (wins + losses) * 100) if (wins + losses) > 0 else 0
                        
                        results.append({
                            "symbol": symbol,
                            "profit": profit,
                            "profit_percent": profit_percent,
                            "trades": trades,
                            "win_rate": win_rate
                        })
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            if results:
                text = f"<b>üìä –°–∏–º—É–ª—è—Ü–∏—è –∑–∞ {period_hours}—á ({self.bot.default_interval})</b>\n\n"
                
                total_profit = 0
                total_trades = 0
                
                for r in sorted(results, key=lambda x: x['profit'], reverse=True):
                    emoji = "üü¢" if r['profit'] > 0 else "üî¥" if r['profit'] < 0 else "‚ö™"
                    text += (
                        f"{emoji} <b>{r['symbol']}</b>\n"
                        f"  –ü—Ä–∏–±—ã–ª—å: {r['profit']:+.2f} USD ({r['profit_percent']:+.2f}%)\n"
                        f"  –°–¥–µ–ª–æ–∫: {r['trades']} | –í–∏–Ω—Ä–µ–π—Ç: {r['win_rate']:.0f}%\n\n"
                    )
                    total_profit += r['profit']
                    total_trades += r['trades']
                
                avg_profit = total_profit / len(results)
                text += (
                    f"<b>{'üìà' if total_profit >= 0 else 'üìâ'} –ò–¢–û–ì–û:</b>\n"
                    f"  –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {total_profit:+.2f} USD\n"
                    f"  –°—Ä–µ–¥–Ω—è—è: {avg_profit:+.2f} USD\n"
                    f"  –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}\n\n"
                    f"<i>–≠—Ç–æ —Å–∏–º—É–ª—è—Ü–∏—è –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.\n"
                    f"–†–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è.</i>"
                )
                
                await msg.edit_text(text, parse_mode="HTML")
            else:
                await msg.edit_text("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
            await msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")

    async def paper_debug(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–∏–≥–Ω–∞–ª—É"""
        if not self._is_authorized(update):
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        if not context.args:
            await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /paper_debug SYMBOL")
            return
        
        symbol = context.args[0].upper()
        
        msg = await update.message.reply_text(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {symbol}...")
        
        try:
            async with aiohttp.ClientSession() as session:
                provider = DataProvider(session)
                klines = await provider.fetch_klines(symbol=symbol, interval=self.bot.default_interval, limit=500)
                df = provider.klines_to_dataframe(klines)
                
                if df.empty:
                    await msg.edit_text("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                    return
                
                generator = SignalGenerator(df)
                generator.compute_indicators()
                result = self.bot._generate_signal_with_strategy(generator, symbol=symbol)
                
            text = self.formatters.format_debug_analysis(symbol, result, df)
            await msg.edit_text(text, parse_mode="HTML")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ debug –¥–ª—è {symbol}: {e}")
            await msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    async def paper_candidates(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞—Ä—ã –±–ª–∏–∑–∫–∏–µ –∫ —Å–∏–≥–Ω–∞–ª—É"""
        if not self._is_authorized(update):
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        if not self.bot.tracked_symbols:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
            return
        
        msg = await update.message.reply_text(f"üîç –ò—â—É –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å—Ä–µ–¥–∏ {len(self.bot.tracked_symbols)} –ø–∞—Ä...")
        
        candidates = []
        
        try:
            async with aiohttp.ClientSession() as session:
                provider = DataProvider(session)
                
                for symbol in self.bot.tracked_symbols:
                    try:
                        klines = await provider.fetch_klines(symbol=symbol, interval=self.bot.default_interval, limit=500)
                        df = provider.klines_to_dataframe(klines)
                        
                        if df.empty:
                            continue
                        
                        generator = SignalGenerator(df)
                        generator.compute_indicators()
                        result = self.bot._generate_signal_with_strategy(generator, symbol=symbol)
                        
                        signal = result["signal"]
                        price = result["price"]
                        bullish = result.get("bullish_votes", 0)
                        bearish = result.get("bearish_votes", 0)
                        
                        # –ë–µ—Ä–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏–∑ result –∏–ª–∏ DataFrame
                        last = df.iloc[-1]
                        adx = float(result.get("ADX", last.get(f"ADX_{ADX_WINDOW}", 0)))
                        rsi = float(result.get("RSI", last.get("RSI", 50)))
                        
                        # –ö–∞–Ω–¥–∏–¥–∞—Ç –µ—Å–ª–∏:
                        # 1. –ì–æ–ª–æ—Å–æ–≤ 3-5 (–±–ª–∏–∑–∫–æ –∫ –ø–æ—Ä–æ–≥—É)
                        # 2. ADX > 20 (–ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ 25)
                        vote_diff_buy = bullish - bearish
                        vote_diff_sell = bearish - bullish
                        
                        if (3 <= vote_diff_buy < 5 or 3 <= vote_diff_sell < 5) and adx > 20:
                            direction = "BUY" if vote_diff_buy > vote_diff_sell else "SELL"
                            votes = vote_diff_buy if direction == "BUY" else vote_diff_sell
                            
                            candidates.append({
                                "symbol": symbol,
                                "direction": direction,
                                "votes": votes,
                                "adx": adx,
                                "rsi": rsi,
                                "price": price
                            })
                    
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
                
                text = self.formatters.format_candidates_list(candidates)
                await msg.edit_text(text, parse_mode="HTML")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {e}")
            await msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    async def paper_force_buy(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self._is_authorized(update):
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        if not self.bot.paper_trader.is_running:
            await update.message.reply_text("‚ö†Ô∏è Paper Trading –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /paper_start")
            return
        
        if not context.args:
            await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /paper_force_buy SYMBOL")
            return
        
        symbol = context.args[0].upper()
        
        if symbol in self.bot.paper_trader.positions:
            await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è –ø–æ {symbol} —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞")
            return
        
        if not self.bot.paper_trader.can_open_position(symbol):
            await update.message.reply_text(f"‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é (–ª–∏–º–∏—Ç –∏–ª–∏ –Ω–µ—Ç –±–∞–ª–∞–Ω—Å–∞)")
            return
        
        try:
            async with aiohttp.ClientSession() as session:
                provider = DataProvider(session)
                klines = await provider.fetch_klines(symbol=symbol, interval=self.bot.default_interval, limit=500)
                df = provider.klines_to_dataframe(klines)
                
                if df.empty:
                    await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã")
                    return
                
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ATR
            generator = SignalGenerator(df)
            generator.compute_indicators()
            result = self.bot._generate_signal_with_strategy(generator, symbol=symbol)
            
            price = float(df['close'].iloc[-1])
            signal_strength = 5  # –°—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
            atr = result.get("ATR", 0.0)
            
            trade_info = self.bot.paper_trader.open_position(symbol, price, signal_strength, atr)
            
            if trade_info:
                self.bot.paper_trader.save_state()
                
                text = (
                    f"<b>üü¢ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–û–ö–£–ü–ö–ê</b>\n\n"
                    f"–°–∏–º–≤–æ–ª: {symbol}\n"
                    f"–¶–µ–Ω–∞: {self.formatters.format_price(price)}\n"
                    f"–í–ª–æ–∂–µ–Ω–æ: ${trade_info['invest_amount']:.2f}\n"
                    f"–ë–∞–ª–∞–Ω—Å: ${trade_info['balance_after']:.2f}\n\n"
                    f"‚ö†Ô∏è –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Å–¥–µ–ª–∫–∞!\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ /paper_status"
                )
                await update.message.reply_text(text, parse_mode="HTML")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ force_buy –¥–ª—è {symbol}: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
