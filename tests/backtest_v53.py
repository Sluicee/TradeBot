"""
–ë—ç–∫—Ç–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ V5.3 —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ V5.2 vs V5.3 –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ø–∞—Ä–∞—Ö –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö
"""

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import asyncio
import aiohttp
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
from typing import Dict, List, Tuple
import json

from data_provider import DataProvider
from signal_generator import SignalGenerator
from paper_trader import PaperTrader
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
sns.set_style("whitegrid")
plt.rcParams['figure.figsize'] = (15, 10)
plt.rcParams['font.size'] = 10

class BacktestV53:
	"""–ö–ª–∞—Å—Å –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è V5.3 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
	
	def __init__(self, session):
		self.data_provider = DataProvider(session)
		self.results = {}
		self.session = session
		
	async def run_backtest(
		self,
		symbol: str,
		interval: str,
		days: int,
		config_override: Dict = None
	) -> Dict:
		"""
		–ó–∞–ø—É—Å–∫–∞–µ—Ç –±—ç–∫—Ç–µ—Å—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
		
		Args:
			symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
			interval: –¢–∞–π–º—Ñ—Ä–µ–π–º
			days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ç–µ—Å—Ç–∞
			config_override: –°–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ config
			
		Returns:
			–°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
		"""
		print(f"\n{'='*70}")
		print(f"üîÑ –ë—ç–∫—Ç–µ—Å—Ç: {symbol} @ {interval} ({days} –¥–Ω–µ–π)")
		print(f"{'='*70}")
		
		# –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –∫–æ–Ω—Ñ–∏–≥–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ)
		original_config = {}
		if config_override:
			for key, value in config_override.items():
				if hasattr(config, key):
					original_config[key] = getattr(config, key)
					setattr(config, key, value)
					print(f"‚öôÔ∏è  {key} = {value}")
		
		# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
		df = await self.data_provider.fetch_historical_klines(
			symbol=symbol,
			interval=interval,
			days=days
		)
		
		if df is None or len(df) < 100:
			print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
			return None
		
		print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π")
		
		# –°–æ–∑–¥–∞—ë–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
		signal_gen = SignalGenerator()
		
		# –°–æ–∑–¥–∞—ë–º paper trader
		paper_trader = PaperTrader(
			initial_balance=100.0,
			commission_rate=config.COMMISSION_RATE
		)
		
		# –ü—Ä–æ–≥–æ–Ω—è–µ–º –±—ç–∫—Ç–µ—Å—Ç
		signals_count = 0
		trades = []
		equity_curve = []
		
		for i in range(100, len(df)):
			# –ë–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
			historical_data = df.iloc[:i+1]
			
			# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
			signal = await signal_gen.generate_signal(
				symbol=symbol,
				interval=interval,
				historical_data=historical_data
			)
			
			# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º equity
			total_balance = paper_trader.balance
			for pos in paper_trader.positions:
				total_balance += pos['amount'] * historical_data['close'].iloc[-1]
			
			equity_curve.append({
				'timestamp': historical_data['timestamp'].iloc[-1],
				'equity': total_balance,
				'price': historical_data['close'].iloc[-1]
			})
			
			# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª
			if signal and signal['action'] in ['BUY', 'SELL']:
				signals_count += 1
				current_price = historical_data['close'].iloc[-1]
				
				# –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é
				result = paper_trader.open_position(
					symbol=symbol,
					side=signal['action'],
					entry_price=current_price,
					stop_loss_percent=config.MR_STOP_LOSS_PERCENT,
					take_profit_percent=config.MR_TAKE_PROFIT_PERCENT,
					timestamp=historical_data['timestamp'].iloc[-1],
					signal_data=signal
				)
				
				if result:
					print(f"üìà {signal['action']} —Å–∏–≥–Ω–∞–ª #{signals_count} @ ${current_price:.4f}")
			
			# –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
			if paper_trader.positions:
				current_price = historical_data['close'].iloc[-1]
				closed = paper_trader.update_positions(
					current_price=current_price,
					timestamp=historical_data['timestamp'].iloc[-1]
				)
				
				if closed:
					for pos in closed:
						trades.append({
							'entry_price': pos['entry_price'],
							'exit_price': pos['exit_price'],
							'pnl': pos['pnl'],
							'pnl_percent': pos['pnl_percent'],
							'entry_time': pos['entry_time'],
							'exit_time': pos['exit_time'],
							'side': pos['side']
						})
						print(f"  ‚úÖ –ó–∞–∫—Ä—ã—Ç–∞: PnL {pos['pnl_percent']:+.2f}%")
		
		# –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–∑–∏—Ü–∏–∏
		if paper_trader.positions:
			current_price = df['close'].iloc[-1]
			for pos in paper_trader.positions:
				pnl_percent = ((current_price - pos['entry_price']) / pos['entry_price']) * 100
				if pos['side'] == 'SELL':
					pnl_percent = -pnl_percent
				
				trades.append({
					'entry_price': pos['entry_price'],
					'exit_price': current_price,
					'pnl': pos['amount'] * (current_price - pos['entry_price']),
					'pnl_percent': pnl_percent,
					'entry_time': pos['entry_time'],
					'exit_time': df['timestamp'].iloc[-1],
					'side': pos['side']
				})
		
		# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π config
		for key, value in original_config.items():
			setattr(config, key, value)
		
		# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
		final_balance = paper_trader.balance
		for pos in paper_trader.positions:
			final_balance += pos['amount'] * df['close'].iloc[-1]
		
		roi = ((final_balance - 100.0) / 100.0) * 100
		
		# Winrate –∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç—Ä–∏–∫–∏
		if trades:
			wins = [t for t in trades if t['pnl_percent'] > 0]
			losses = [t for t in trades if t['pnl_percent'] <= 0]
			winrate = (len(wins) / len(trades)) * 100
			avg_win = sum(t['pnl_percent'] for t in wins) / len(wins) if wins else 0
			avg_loss = sum(t['pnl_percent'] for t in losses) / len(losses) if losses else 0
			
			# Sharpe Ratio
			returns = [t['pnl_percent'] for t in trades]
			sharpe = (sum(returns) / len(returns)) / (pd.Series(returns).std() + 0.0001)
			
			# Max Drawdown
			equity_series = pd.Series([e['equity'] for e in equity_curve])
			running_max = equity_series.expanding().max()
			drawdown = ((equity_series - running_max) / running_max) * 100
			max_dd = drawdown.min()
		else:
			winrate = 0
			avg_win = 0
			avg_loss = 0
			sharpe = 0
			max_dd = 0
		
		results = {
			'symbol': symbol,
			'interval': interval,
			'days': days,
			'signals': signals_count,
			'trades': len(trades),
			'roi': roi,
			'winrate': winrate,
			'avg_win': avg_win,
			'avg_loss': avg_loss,
			'sharpe': sharpe,
			'max_dd': max_dd,
			'final_balance': final_balance,
			'equity_curve': equity_curve,
			'trades_list': trades
		}
		
		print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
		print(f"  –°–∏–≥–Ω–∞–ª–æ–≤: {signals_count}")
		print(f"  –°–¥–µ–ª–æ–∫: {len(trades)}")
		print(f"  ROI: {roi:+.2f}%")
		print(f"  Winrate: {winrate:.1f}%")
		print(f"  Sharpe: {sharpe:.2f}")
		print(f"  Max DD: {max_dd:.2f}%")
		
		return results
	
	def visualize_results(self, results_list: List[Dict], title: str = "Backtest Results"):
		"""
		–°–æ–∑–¥–∞—ë—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
		
		Args:
			results_list: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–æ–≤
			title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞
		"""
		if not results_list:
			print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
			return
		
		# –§–∏–ª—å—Ç—Ä—É–µ–º None
		results_list = [r for r in results_list if r is not None]
		
		if not results_list:
			print("‚ùå –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—É—Å—Ç—ã–µ")
			return
		
		fig, axes = plt.subplots(2, 3, figsize=(18, 12))
		fig.suptitle(title, fontsize=16, fontweight='bold')
		
		# 1. ROI Comparison
		ax1 = axes[0, 0]
		symbols = [r['symbol'] + f"\n{r['interval']}" for r in results_list]
		rois = [r['roi'] for r in results_list]
		colors = ['green' if roi > 0 else 'red' for roi in rois]
		ax1.barh(symbols, rois, color=colors, alpha=0.7)
		ax1.set_xlabel('ROI (%)')
		ax1.set_title('Return on Investment')
		ax1.axvline(x=0, color='black', linestyle='--', linewidth=0.5)
		ax1.grid(axis='x', alpha=0.3)
		
		# 2. Win Rate
		ax2 = axes[0, 1]
		winrates = [r['winrate'] for r in results_list]
		ax2.barh(symbols, winrates, color='skyblue', alpha=0.7)
		ax2.set_xlabel('Win Rate (%)')
		ax2.set_title('Win Rate')
		ax2.axvline(x=50, color='orange', linestyle='--', linewidth=1, label='50%')
		ax2.axvline(x=60, color='green', linestyle='--', linewidth=1, label='60%')
		ax2.legend()
		ax2.grid(axis='x', alpha=0.3)
		
		# 3. Sharpe Ratio
		ax3 = axes[0, 2]
		sharpes = [r['sharpe'] for r in results_list]
		colors_sharpe = ['green' if s > 1.0 else 'orange' if s > 0.5 else 'red' for s in sharpes]
		ax3.barh(symbols, sharpes, color=colors_sharpe, alpha=0.7)
		ax3.set_xlabel('Sharpe Ratio')
		ax3.set_title('Risk-Adjusted Returns')
		ax3.axvline(x=1.0, color='green', linestyle='--', linewidth=1, label='1.0 (Good)')
		ax3.legend()
		ax3.grid(axis='x', alpha=0.3)
		
		# 4. Max Drawdown
		ax4 = axes[1, 0]
		max_dds = [r['max_dd'] for r in results_list]
		colors_dd = ['green' if dd > -5 else 'orange' if dd > -10 else 'red' for dd in max_dds]
		ax4.barh(symbols, max_dds, color=colors_dd, alpha=0.7)
		ax4.set_xlabel('Max Drawdown (%)')
		ax4.set_title('Maximum Drawdown')
		ax4.axvline(x=-10, color='orange', linestyle='--', linewidth=1, label='-10%')
		ax4.axvline(x=-20, color='red', linestyle='--', linewidth=1, label='-20%')
		ax4.legend()
		ax4.grid(axis='x', alpha=0.3)
		
		# 5. Trades Count
		ax5 = axes[1, 1]
		trades = [r['trades'] for r in results_list]
		ax5.barh(symbols, trades, color='purple', alpha=0.7)
		ax5.set_xlabel('Number of Trades')
		ax5.set_title('Trading Activity')
		ax5.grid(axis='x', alpha=0.3)
		
		# 6. Metrics Table
		ax6 = axes[1, 2]
		ax6.axis('tight')
		ax6.axis('off')
		
		table_data = []
		for r in results_list:
			table_data.append([
				f"{r['symbol']}\n{r['interval']}",
				f"{r['roi']:+.2f}%",
				f"{r['winrate']:.1f}%",
				f"{r['sharpe']:.2f}",
				f"{r['trades']}"
			])
		
		table = ax6.table(
			cellText=table_data,
			colLabels=['Pair/TF', 'ROI', 'WR', 'Sharpe', 'Trades'],
			cellLoc='center',
			loc='center',
			colWidths=[0.25, 0.15, 0.15, 0.15, 0.15]
		)
		table.auto_set_font_size(False)
		table.set_fontsize(9)
		table.scale(1, 2)
		
		# –°—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞
		for i in range(5):
			table[(0, i)].set_facecolor('#4CAF50')
			table[(0, i)].set_text_props(weight='bold', color='white')
		
		plt.tight_layout()
		
		# –°–æ—Ö—Ä–∞–Ω—è–µ–º
		timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
		filename = f"tests/backtest_v53_comparison_{timestamp}.png"
		plt.savefig(filename, dpi=150, bbox_inches='tight')
		print(f"\nüíæ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filename}")
		
		plt.show()
	
	def plot_equity_curves(self, results_list: List[Dict], title: str = "Equity Curves"):
		"""
		–†–∏—Å—É–µ—Ç –∫—Ä–∏–≤—ã–µ –∫–∞–ø–∏—Ç–∞–ª–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
		"""
		if not results_list:
			return
		
		results_list = [r for r in results_list if r is not None and r.get('equity_curve')]
		
		if not results_list:
			print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö equity curve –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
			return
		
		fig, ax = plt.subplots(figsize=(15, 8))
		
		for r in results_list:
			equity_curve = r['equity_curve']
			if equity_curve:
				df_equity = pd.DataFrame(equity_curve)
				label = f"{r['symbol']} {r['interval']} (ROI: {r['roi']:+.2f}%)"
				ax.plot(df_equity['timestamp'], df_equity['equity'], label=label, linewidth=2, alpha=0.8)
		
		ax.axhline(y=100, color='gray', linestyle='--', linewidth=1, label='Initial Balance')
		ax.set_xlabel('Time')
		ax.set_ylabel('Portfolio Value ($)')
		ax.set_title(title, fontsize=14, fontweight='bold')
		ax.legend(loc='best')
		ax.grid(alpha=0.3)
		
		plt.tight_layout()
		
		timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
		filename = f"tests/equity_curves_v53_{timestamp}.png"
		plt.savefig(filename, dpi=150, bbox_inches='tight')
		print(f"üíæ Equity curves —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}")
		
		plt.show()


async def main():
	"""–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–æ–≤"""
	
	print("="*70)
	print("üöÄ –ë–≠–ö–¢–ï–°–¢ V5.3 –ü–ê–†–ê–ú–ï–¢–†–û–í")
	print("="*70)
	
	async with aiohttp.ClientSession() as session:
		backtest = BacktestV53(session)
		
		# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
		configs = {
			'V5.2 (Current)': {},  # –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ config.py
			'V5.3 (Recommended)': {
				'NO_BUY_IF_PRICE_BELOW_N_DAY_LOW_PERCENT': 0.07,
				'VOLUME_SPIKE_THRESHOLD': 2.2,
				'KELLY_FRACTION': 0.20,
				'MIN_TRADES_FOR_KELLY': 15,
				'MR_TRAILING_ACTIVATION': 0.018,
				'MR_TRAILING_DISTANCE': 0.012,
			}
		}
		
		# –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –ø–∞—Ä—ã –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
		test_cases = [
			('BNBUSDT', '1h', 45),   # –õ—É—á—à–∞—è –ø–∞—Ä–∞
			('BTCUSDT', '1h', 45),   # –°—Ç–∞–±–∏–ª—å–Ω–∞—è
			('ETHUSDT', '1h', 45),   # –°—Ä–µ–¥–Ω—è—è
		]
		
		all_results = []
		
		# –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç—ã
		for config_name, config_override in configs.items():
			print(f"\n{'='*70}")
			print(f"üìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò: {config_name}")
			print(f"{'='*70}")
			
			for symbol, interval, days in test_cases:
				result = await backtest.run_backtest(
					symbol=symbol,
					interval=interval,
					days=days,
					config_override=config_override
				)
				
				if result:
					result['config'] = config_name
					all_results.append(result)
				
				await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
		
		# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
		if all_results:
			print(f"\n{'='*70}")
			print(f"üìä –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
			print(f"{'='*70}")
			
			# –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º
			v52_results = [r for r in all_results if r['config'] == 'V5.2 (Current)']
			v53_results = [r for r in all_results if r['config'] == 'V5.3 (Recommended)']
			
			# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è V5.2
			if v52_results:
				backtest.visualize_results(v52_results, "Backtest V5.2 (Current Configuration)")
				backtest.plot_equity_curves(v52_results, "Equity Curves V5.2")
			
			# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è V5.3
			if v53_results:
				backtest.visualize_results(v53_results, "Backtest V5.3 (Recommended Configuration)")
				backtest.plot_equity_curves(v53_results, "Equity Curves V5.3")
			
			# –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
			backtest.visualize_results(all_results, "Comparison: V5.2 vs V5.3")
			
			# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV
			df_results = pd.DataFrame([{
				'config': r['config'],
				'symbol': r['symbol'],
				'interval': r['interval'],
				'roi': r['roi'],
				'winrate': r['winrate'],
				'sharpe': r['sharpe'],
				'max_dd': r['max_dd'],
				'trades': r['trades'],
				'signals': r['signals']
			} for r in all_results])
			
			timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
			csv_filename = f"tests/backtest_v53_results_{timestamp}.csv"
			df_results.to_csv(csv_filename, index=False)
			print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {csv_filename}")
			
			# –ü–µ—á–∞—Ç–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
			print(f"\n{'='*70}")
			print(f"üìä –ò–¢–û–ì–û–í–ê–Ø –¢–ê–ë–õ–ò–¶–ê")
			print(f"{'='*70}")
			print(df_results.to_string(index=False))
			
			# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫
			print(f"\n{'='*70}")
			print(f"üìà –°–†–ê–í–ù–ï–ù–ò–ï –°–†–ï–î–ù–ò–• –ú–ï–¢–†–ò–ö")
			print(f"{'='*70}")
			
			for config_name in ['V5.2 (Current)', 'V5.3 (Recommended)']:
				config_results = [r for r in all_results if r['config'] == config_name]
				if config_results:
					avg_roi = sum(r['roi'] for r in config_results) / len(config_results)
					avg_winrate = sum(r['winrate'] for r in config_results) / len(config_results)
					avg_sharpe = sum(r['sharpe'] for r in config_results) / len(config_results)
					avg_dd = sum(r['max_dd'] for r in config_results) / len(config_results)
					total_trades = sum(r['trades'] for r in config_results)
					
					print(f"\n{config_name}:")
					print(f"  –°—Ä–µ–¥–Ω–∏–π ROI:      {avg_roi:+.2f}%")
					print(f"  –°—Ä–µ–¥–Ω–∏–π Winrate:  {avg_winrate:.1f}%")
					print(f"  –°—Ä–µ–¥–Ω–∏–π Sharpe:   {avg_sharpe:.2f}")
					print(f"  –°—Ä–µ–¥–Ω–∏–π Max DD:   {avg_dd:.2f}%")
					print(f"  –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:     {total_trades}")
		else:
			print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
		
		print(f"\n{'='*70}")
		print(f"‚úÖ –ë–≠–ö–¢–ï–°–¢ –ó–ê–í–ï–†–®–Å–ù")
		print(f"{'='*70}")


if __name__ == "__main__":
	asyncio.run(main())

