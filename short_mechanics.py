import requests
import json
import ta
from typing import Dict, Any, Optional, Tuple
from logger import logger
from config import (
	# SHORT v2.1 - Adaptive Fear SHORT
	USE_ADVANCED_SHORT, SHORT_VERSION, SHORT_POSITION_SIZE_EXTREME_FEAR, SHORT_POSITION_SIZE_HIGH_FEAR,
	SHORT_POSITION_SIZE_MODERATE_FEAR, SHORT_POSITION_SIZE_NEUTRAL,
	SHORT_FEAR_EXTREME_THRESHOLD, SHORT_FEAR_HIGH_THRESHOLD, SHORT_FEAR_MODERATE_THRESHOLD, SHORT_GREED_THRESHOLD, SHORT_EMA_SLOPE_THRESHOLD, SHORT_MAX_VOTES, SHORT_V1_VOTES, SHORT_V1_MIN_CONDITIONS,
	SHORT_FEAR_INERTIA_THRESHOLD, SHORT_FEAR_INERTIA_CANDLES, SHORT_FEAR_INERTIA_BONUS,
	SHORT_FEAR_WEIGHT, SHORT_FUNDING_WEIGHT, SHORT_LIQUIDATION_WEIGHT, SHORT_RSI_WEIGHT, SHORT_EMA_WEIGHT, SHORT_VOLATILITY_WEIGHT,
	SHORT_MIN_SCORE, SHORT_API_TIMEOUT, SHORT_FUNDING_RATE_THRESHOLD, SHORT_LIQUIDATION_RATIO_THRESHOLD,
	SHORT_VOLATILITY_MULTIPLIER, SHORT_VOLATILITY_BONUS, SHORT_BTC_DOMINANCE_THRESHOLD,
	SHORT_BTC_DOMINANCE_FEAR_THRESHOLD, SHORT_BTC_DOMINANCE_BONUS,
	SHORT_FALLBACK_FUNDING_RATE, SHORT_FALLBACK_LONG_LIQUIDATIONS, SHORT_FALLBACK_SHORT_LIQUIDATIONS, SHORT_FALLBACK_BTC_DOMINANCE,
	RSI_OVERBOUGHT, ADX_RANGING
)

class ShortMechanics:
	"""
	üî¥ SHORT-–ú–ï–•–ê–ù–ò–ö–ê v2.1 - ADAPTIVE FEAR SHORT
	
	–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
	- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞/–∂–∞–¥–Ω–æ—Å—Ç–∏
	- –ê–Ω–∞–ª–∏–∑ funding rate –∏ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π
	- –†–∞—Å—á—ë—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Å–∫–æ—Ä–∞ SHORT
	- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
	"""
	
	def __init__(self):
		pass
	
	def get_market_regime(self, df, fear_greed_index: int = 50) -> str:
		"""
		üéØ –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –†–´–ù–û–ß–ù–û–ì–û –†–ï–ñ–ò–ú–ê
		
		–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç EMA200, ADX –∏ –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞.
		
		–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
		- df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
		- fear_greed_index: –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞/–∂–∞–¥–Ω–æ—Å—Ç–∏ (0-100)
		
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
		- "BEAR": –º–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫ (EMA200 –ø–∞–¥–∞–µ—Ç, ADX>20, —Å—Ç—Ä–∞—Ö<{SHORT_FEAR_MODERATE_THRESHOLD})
		- "BULL": –±—ã—á–∏–π —Ä—ã–Ω–æ–∫ (EMA200 —Ä–∞—Å—Ç—ë—Ç, —Å—Ç—Ä–∞—Ö>60)
		- "NEUTRAL": –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
		"""
		if len(df) < 200:
			return "NEUTRAL"
		
		try:
			# EMA200 –∏ –µ—ë –Ω–∞–∫–ª–æ–Ω
			import ta
			ema200 = ta.trend.ema_indicator(df['close'], window=200)
			if len(ema200) < 10 or ema200.isna().all():
				return "NEUTRAL"
			
			# –ù–∞–∫–ª–æ–Ω EMA200 –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–µ—Ä–∏–æ–¥–æ–≤
			slope = (ema200.iloc[-1] - ema200.iloc[-10]) / ema200.iloc[-10]
			
			# ADX –¥–ª—è —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞
			adx = ta.trend.adx(df['high'], df['low'], df['close'], window=14)
			if len(adx) == 0 or adx.isna().all():
				adx_value = 0
			else:
				adx_value = adx.iloc[-1]
			
			# –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è)
			if slope < -SHORT_EMA_SLOPE_THRESHOLD and fear_greed_index < SHORT_FEAR_MODERATE_THRESHOLD:  # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–µ —É—Å–ª–æ–≤–∏—è
				return "BEAR"
			elif slope > SHORT_EMA_SLOPE_THRESHOLD and fear_greed_index > SHORT_GREED_THRESHOLD:
				return "BULL"
			else:
				return "NEUTRAL"
		except Exception:
			return "NEUTRAL"

	def should_short(self, df, fear_greed_index: int = 50) -> bool:
		"""
		üî¥ –ê–ö–¢–ò–í–ê–¶–ò–Ø SHORT-–ú–ï–•–ê–ù–ò–ö–ò
		
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Ä—ã–Ω–æ–∫ –º–µ–¥–≤–µ–∂–∏–π –∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä–∞—Ö.
		–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–∏–ª—å–Ω–æ–º –ø–∞–¥–∞—é—â–µ–º —Ç—Ä–µ–Ω–¥–µ.
		
		–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
		- df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
		- fear_greed_index: –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞/–∂–∞–¥–Ω–æ—Å—Ç–∏ (0-100)
		
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
		- True: –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å SHORT –ø–æ–∑–∏—Ü–∏–∏
		- False: SHORT –æ—Ç–∫–ª—é—á—ë–Ω
		"""
		regime = self.get_market_regime(df, fear_greed_index)
		# SHORT –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –≤ –º–µ–¥–≤–µ–∂—å–µ–º —Ä–µ–∂–∏–º–µ (BEAR) –∏–ª–∏ –ø—Ä–∏ —Å—Ç—Ä–∞—Ö–µ –≤ –ª—é–±–æ–º —Ä–µ–∂–∏–º–µ
		return (regime == "BEAR" or fear_greed_index < SHORT_FEAR_MODERATE_THRESHOLD)

	def get_fear_greed_index(self, df) -> int:
		"""
		üìä –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–î–ï–ö–°–ê –°–¢–†–ê–•–ê/–ñ–ê–î–ù–û–°–¢–ò
		
		–ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –æ—Ç CNN Fear & Greed Index API.
		–ï—Å–ª–∏ –Ω–µ —É–¥–∞—ë—Ç—Å—è, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏.
		
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
		- int: –∏–Ω–¥–µ–∫—Å –æ—Ç 0 (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∞—Ö) –¥–æ 100 (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∂–∞–¥–Ω–æ—Å—Ç—å)
		"""
		try:
			# –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç CNN Fear & Greed Index
			response = requests.get("https://api.alternative.me/fng/", timeout=5)
			if response.status_code == 200:
				data = response.json()
				if 'data' in data and len(data['data']) > 0:
					fear_greed = int(data['data'][0]['value'])
					logger.info(f"–ü–æ–ª—É—á–µ–Ω –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –æ—Ç API: {fear_greed}")
					return fear_greed
		except Exception as e:
			logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –æ—Ç API: {e}")
		
		# Fallback: —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
		return self._calculate_custom_fear_greed_index(df)
	
	def _calculate_custom_fear_greed_index(self, df) -> int:
		"""
		üßÆ –°–û–ë–°–¢–í–ï–ù–ù–´–ô –†–ê–°–ß–Å–¢ –ò–ù–î–ï–ö–°–ê –°–¢–†–ê–•–ê/–ñ–ê–î–ù–û–°–¢–ò
		
		–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å, –æ–±—ä—ë–º—ã –∏ —Ç—Ä–µ–Ω–¥—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π —Ä—ã–Ω–∫–∞.
		
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
		- int: –∏–Ω–¥–µ–∫—Å –æ—Ç 0 (—Å—Ç—Ä–∞—Ö) –¥–æ 100 (–∂–∞–¥–Ω–æ—Å—Ç—å)
		"""
		if len(df) < 50:
			return 50  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö
		
		try:
			import ta
			# 1. –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (–≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å = —Å—Ç—Ä–∞—Ö)
			atr = ta.volatility.average_true_range(
				df['high'], df['low'], df['close'], window=14
			)
			current_atr = atr.iloc[-1]
			avg_atr = atr.tail(20).mean()
			volatility_ratio = current_atr / avg_atr if avg_atr > 0 else 1.0
			
			# 2. –ê–Ω–∞–ª–∏–∑ –æ–±—ä—ë–º–æ–≤ (–≤—ã—Å–æ–∫–∏–µ –æ–±—ä—ë–º—ã –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ = —Å—Ç—Ä–∞—Ö)
			volume = df['volume']
			current_volume = volume.iloc[-1]
			avg_volume = volume.tail(20).mean()
			volume_ratio = current_volume / avg_volume if avg_volume > 0 else 1.0
			
			# 3. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ (–ø–∞–¥–µ–Ω–∏–µ = —Å—Ç—Ä–∞—Ö)
			price_change_1d = (df['close'].iloc[-1] - df['close'].iloc[-24]) / df['close'].iloc[-24] if len(df) >= 24 else 0
			price_change_7d = (df['close'].iloc[-1] - df['close'].iloc[-168]) / df['close'].iloc[-168] if len(df) >= 168 else 0
			
			# 4. RSI –∞–Ω–∞–ª–∏–∑ (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å = —Å—Ç—Ä–∞—Ö)
			rsi = ta.momentum.rsi(df['close'], window=14)
			current_rsi = rsi.iloc[-1]
			
			# –†–∞—Å—á—ë—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–Ω–¥–µ–∫—Å–∞
			volatility_score = max(0, min(100, 100 - (volatility_ratio - 1) * 50))  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å = –Ω–∏–∑–∫–∏–π –∏–Ω–¥–µ–∫—Å
			volume_score = max(0, min(100, 100 - (volume_ratio - 1) * 30))  # –í—ã—Å–æ–∫–∏–µ –æ–±—ä—ë–º—ã = –Ω–∏–∑–∫–∏–π –∏–Ω–¥–µ–∫—Å
			trend_score = max(0, min(100, 50 + price_change_1d * 1000))  # –ü–∞–¥–µ–Ω–∏–µ = –Ω–∏–∑–∫–∏–π –∏–Ω–¥–µ–∫—Å
			rsi_score = current_rsi  # RSI –Ω–∞–ø—Ä—è–º—É—é –≤–ª–∏—è–µ—Ç –Ω–∞ –∏–Ω–¥–µ–∫—Å
			
			# –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ
			fear_greed_index = int(
				volatility_score * 0.3 +
				volume_score * 0.2 +
				trend_score * 0.3 +
				rsi_score * 0.2
			)
			
			# –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
			fear_greed_index = max(0, min(100, fear_greed_index))
			
			logger.info(f"–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞: {fear_greed_index} (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility_ratio:.2f}, –æ–±—ä—ë–º: {volume_ratio:.2f}, —Ç—Ä–µ–Ω–¥: {price_change_1d:.3f}, RSI: {current_rsi:.1f})")
			return fear_greed_index
			
		except Exception as e:
			logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞: {e}")
			return 50  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ

	def get_funding_rate(self, symbol: str = "BTCUSDT") -> float:
		"""
		üí∞ –ü–û–õ–£–ß–ï–ù–ò–ï FUNDING RATE
		
		–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π funding rate –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤.
		–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π funding rate —É—Å–∏–ª–∏–≤–∞–µ—Ç SHORT —Å–∏–≥–Ω–∞–ª—ã.
		
		–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
		- symbol: —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é BTCUSDT)
		
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
		- float: funding rate –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
		"""
		try:
			# Binance Futures API –¥–ª—è funding rate
			url = f"https://fapi.binance.com/fapi/v1/premiumIndex?symbol={symbol}"
			response = requests.get(url, timeout=SHORT_API_TIMEOUT)
			
			if response.status_code == 200:
				data = response.json()
				funding_rate = float(data.get('lastFundingRate', 0)) * 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
				logger.info(f"–ü–æ–ª—É—á–µ–Ω funding rate –¥–ª—è {symbol}: {funding_rate:.4f}%")
				return funding_rate
			else:
				logger.warning(f"–û—à–∏–±–∫–∞ API funding rate: {response.status_code}")
				return SHORT_FALLBACK_FUNDING_RATE
				
		except Exception as e:
			logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å funding rate: {e}")
			return SHORT_FALLBACK_FUNDING_RATE

	def get_liquidation_data(self, symbol: str = "BTCUSDT") -> tuple:
		"""
		üí• –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –û –õ–ò–ö–í–ò–î–ê–¶–ò–Ø–•
		
		–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è—Ö long/short –ø–æ–∑–∏—Ü–∏–π.
		–ü—Ä–µ–æ–±–ª–∞–¥–∞–Ω–∏–µ long –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π —É—Å–∏–ª–∏–≤–∞–µ—Ç SHORT —Å–∏–≥–Ω–∞–ª—ã.
		
		–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
		- symbol: —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é BTCUSDT)
		
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
		- tuple: (long_liquidations, short_liquidations) –≤ USD
		"""
		try:
			# Coinglass API –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è—Ö
			url = "https://open-api.coinglass.com/public/v2/liquidation/exchange"
			headers = {
				"coinglassSecret": "your_api_key_here",  # –ù—É–∂–µ–Ω API –∫–ª—é—á
				"Content-Type": "application/json"
			}
			
			# –ü—Ä–æ–±—É–µ–º –±–µ–∑ API –∫–ª—é—á–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø)
			response = requests.get(url, timeout=SHORT_API_TIMEOUT)
			
			if response.status_code == 200:
				data = response.json()
				# –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è—Ö
				long_liquidations = 0.0
				short_liquidations = 0.0
				
				if 'data' in data and 'list' in data['data']:
					for exchange in data['data']['list']:
						if exchange.get('exchangeName') == 'Binance':
							long_liquidations += float(exchange.get('longLiquidation', 0))
							short_liquidations += float(exchange.get('shortLiquidation', 0))
				
				logger.info(f"–õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏ Long: ${long_liquidations:.1f}M, Short: ${short_liquidations:.1f}M")
				return long_liquidations, short_liquidations
			else:
				logger.warning(f"–û—à–∏–±–∫–∞ API –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π: {response.status_code}")
				return SHORT_FALLBACK_LONG_LIQUIDATIONS, SHORT_FALLBACK_SHORT_LIQUIDATIONS
				
		except Exception as e:
			logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è—Ö: {e}")
			return SHORT_FALLBACK_LONG_LIQUIDATIONS, SHORT_FALLBACK_SHORT_LIQUIDATIONS

	def get_btc_dominance(self) -> float:
		"""
		üìä –ü–û–õ–£–ß–ï–ù–ò–ï BTC DOMINANCE
		
		–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ Bitcoin.
		–†–æ—Å—Ç –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–∏–ª–∏–≤–∞–µ—Ç SHORT —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –∞–ª—å—Ç–∞—Ö.
		
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
		- float: –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è BTC –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
		"""
		try:
			# CoinGecko API –¥–ª—è BTC dominance
			url = "https://api.coingecko.com/api/v3/global"
			response = requests.get(url, timeout=SHORT_API_TIMEOUT)
			
			if response.status_code == 200:
				data = response.json()
				btc_dominance = float(data['data']['market_cap_percentage']['btc'])
				
				# –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
				historical_url = "https://api.coingecko.com/api/v3/global"
				historical_response = requests.get(historical_url, timeout=SHORT_API_TIMEOUT)
				
				if historical_response.status_code == 200:
					historical_data = historical_response.json()
					# –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è)
					dominance_change = 0.0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
				else:
					dominance_change = 0.0
				
				logger.info(f"BTC Dominance: {btc_dominance:.1f}% (–∏–∑–º–µ–Ω–µ–Ω–∏–µ: {dominance_change:+.1f}%)")
				return dominance_change
			else:
				logger.warning(f"–û—à–∏–±–∫–∞ API BTC dominance: {response.status_code}")
				return SHORT_FALLBACK_BTC_DOMINANCE
				
		except Exception as e:
			logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å BTC dominance: {e}")
			return SHORT_FALLBACK_BTC_DOMINANCE

	def check_fear_inertia(self, fear_history: list) -> bool:
		"""
		üîÑ –ü–†–û–í–ï–†–ö–ê –ò–ù–ï–†–¶–ò–ò –°–¢–†–ê–•–ê
		
		–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ —Å—Ç—Ä–∞—Ö < 30 –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N —Å–≤–µ—á–µ–π.
		
		–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
		- fear_history: —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ç—Ä–∞—Ö–∞
		
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
		- bool: True –µ—Å–ª–∏ –∏–Ω–µ—Ä—Ü–∏—è —Å—Ç—Ä–∞—Ö–∞ –∞–∫—Ç–∏–≤–Ω–∞
		"""
		if len(fear_history) < SHORT_FEAR_INERTIA_CANDLES:
			return False
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–≤–µ—á–µ–π
		recent_fears = fear_history[-SHORT_FEAR_INERTIA_CANDLES:]
		return all(fear < SHORT_FEAR_INERTIA_THRESHOLD for fear in recent_fears)

	def calculate_volatility_score(self, atr: float, atr_mean: float) -> float:
		"""
		üìà –†–ê–°–ß–Å–¢ –°–ö–û–†–ê –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–ò
		
		–í—ã—á–∏—Å–ª—è–µ—Ç —Å–∫–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (ATR).
		
		–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
		- atr: —Ç–µ–∫—É—â–∏–π ATR
		- atr_mean: —Å—Ä–µ–¥–Ω–∏–π ATR –∑–∞ –ø–µ—Ä–∏–æ–¥
		
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
		- float: —Å–∫–æ—Ä –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (0.0-1.0)
		"""
		if atr_mean == 0:
			return 0.0
		
		volatility_ratio = atr / atr_mean
		if volatility_ratio > SHORT_VOLATILITY_MULTIPLIER:
			return 1.0  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
		else:
			return 0.0  # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å

	def calculate_adaptive_short_score_v2_1(
		self, 
		fear_greed_index: int, 
		funding_rate: float, 
		long_liquidations: float, 
		short_liquidations: float,
		rsi: float,
		ema_short: float,
		ema_long: float,
		atr: float,
		atr_mean: float,
		btc_dominance_change: float,
		fear_history: list = None
	) -> tuple:
		"""
		üßÆ –†–ê–°–ß–Å–¢ –ê–î–ê–ü–¢–ò–í–ù–û–ì–û –°–ö–û–†–ê SHORT v2.1
		
		–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é, BTC dominance –∏ –∏–Ω–µ—Ä—Ü–∏–µ–π —Å—Ç—Ä–∞—Ö–∞.
		
		–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
		- fear_greed_index: –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞/–∂–∞–¥–Ω–æ—Å—Ç–∏ (0-100)
		- funding_rate: funding rate –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
		- long_liquidations: –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ long –ø–æ–∑–∏—Ü–∏–π (USD)
		- short_liquidations: –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ short –ø–æ–∑–∏—Ü–∏–π (USD)
		- rsi: RSI –∑–Ω–∞—á–µ–Ω–∏–µ
		- ema_short: –±—ã—Å—Ç—Ä–∞—è EMA
		- ema_long: –º–µ–¥–ª–µ–Ω–Ω–∞—è EMA
		- atr: —Ç–µ–∫—É—â–∏–π ATR
		- atr_mean: —Å—Ä–µ–¥–Ω–∏–π ATR
		- btc_dominance_change: –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è BTC
		- fear_history: –∏—Å—Ç–æ—Ä–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ç—Ä–∞—Ö–∞
		
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
		- tuple: (score, breakdown) –≥–¥–µ score 0-1, breakdown - –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è
		"""
		# –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∫–æ—Ä–∞ v2.1
		fear_score = 1.0 if fear_greed_index < SHORT_FEAR_MODERATE_THRESHOLD else 0.0
		funding_score = 1.0 if funding_rate < SHORT_FUNDING_RATE_THRESHOLD else 0.0
		
		# –õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏: –±–æ–ª—å—à–µ long –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π = –±–æ–ª—å—à–µ SHORT —Å–∏–≥–Ω–∞–ª–∞
		if short_liquidations > 0:
			liquidation_ratio = long_liquidations / short_liquidations
			liquidation_score = 1.0 if liquidation_ratio > SHORT_LIQUIDATION_RATIO_THRESHOLD else 0.0
		else:
			liquidation_score = 0.0
		
		rsi_score = 1.0 if rsi > RSI_OVERBOUGHT else 0.0
		ema_score = 1.0 if ema_short < ema_long else 0.0
		
		# –ù–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã v2.1
		volatility_score = self.calculate_volatility_score(atr, atr_mean)
		
		# BTC Dominance –±–æ–Ω—É—Å
		btc_dominance_bonus = 0.0
		if (btc_dominance_change > SHORT_BTC_DOMINANCE_THRESHOLD and 
			fear_greed_index < SHORT_BTC_DOMINANCE_FEAR_THRESHOLD):
			btc_dominance_bonus = SHORT_BTC_DOMINANCE_BONUS
		
		# Inertia –±–æ–Ω—É—Å
		inertia_bonus = 0.0
		if fear_history and self.check_fear_inertia(fear_history):
			inertia_bonus = SHORT_FEAR_INERTIA_BONUS
		
		# –í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å–∫–æ—Ä v2.1
		base_score = (
			fear_score * SHORT_FEAR_WEIGHT +
			funding_score * SHORT_FUNDING_WEIGHT +
			liquidation_score * SHORT_LIQUIDATION_WEIGHT +
			rsi_score * SHORT_RSI_WEIGHT +
			ema_score * SHORT_EMA_WEIGHT +
			volatility_score * SHORT_VOLATILITY_WEIGHT
		)
		
		# –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã
		final_score = base_score + btc_dominance_bonus + inertia_bonus
		final_score = min(1.0, final_score)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º–æ–º
		
		# –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
		breakdown = {
			"fear_score": fear_score,
			"funding_score": funding_score,
			"liquidation_score": liquidation_score,
			"rsi_score": rsi_score,
			"ema_score": ema_score,
			"volatility_score": volatility_score,
			"btc_dominance_bonus": btc_dominance_bonus,
			"inertia_bonus": inertia_bonus,
			"base_score": base_score,
			"final_score": final_score,
			"weights": {
				"fear": SHORT_FEAR_WEIGHT,
				"funding": SHORT_FUNDING_WEIGHT,
				"liquidation": SHORT_LIQUIDATION_WEIGHT,
				"rsi": SHORT_RSI_WEIGHT,
				"ema": SHORT_EMA_WEIGHT,
				"volatility": SHORT_VOLATILITY_WEIGHT
			}
		}
		
		return final_score, breakdown

	def get_adaptive_short_position_size(self, fear_greed_index: int) -> float:
		"""
		üìä –ê–î–ê–ü–¢–ò–í–ù–´–ô –†–ê–ó–ú–ï–† –ü–û–ó–ò–¶–ò–ò SHORT
		
		–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è —Å—Ç—Ä–∞—Ö–∞.
		
		–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
		- fear_greed_index: –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞/–∂–∞–¥–Ω–æ—Å—Ç–∏ (0-100)
		
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
		- float: —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç 0.0 –¥–æ 1.0
		"""
		if fear_greed_index < SHORT_FEAR_EXTREME_THRESHOLD:
			return SHORT_POSITION_SIZE_EXTREME_FEAR
		elif fear_greed_index < SHORT_FEAR_HIGH_THRESHOLD:
			return SHORT_POSITION_SIZE_HIGH_FEAR
		elif fear_greed_index < SHORT_FEAR_MODERATE_THRESHOLD:
			return SHORT_POSITION_SIZE_MODERATE_FEAR
		else:
			return SHORT_POSITION_SIZE_NEUTRAL

	def analyze_short_conditions(self, indicators_data: Dict[str, Any], fear_greed_index: int) -> Dict[str, Any]:
		"""
		üî¥ –ê–ù–ê–õ–ò–ó SHORT –£–°–õ–û–í–ò–ô
		
		–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è SHORT —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
		"""
		# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SHORT v2.0 –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
		short_enabled = False
		short_score = 0.0
		short_position_size = 0.0
		short_conditions = []
		short_breakdown = {}
		funding_rate = 0.0
		long_liquidations = 0.0
		short_liquidations = 0.0
		
		# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
		rsi = indicators_data.get("RSI", 50)
		ema_s = indicators_data.get("EMA_short", 0)
		ema_l = indicators_data.get("EMA_long", 0)
		adx = indicators_data.get("ADX", 0)
		atr = indicators_data.get("ATR", 0)
		
		if USE_ADVANCED_SHORT:
			# –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è SHORT v2.1
			funding_rate = self.get_funding_rate("BTCUSDT")
			long_liquidations, short_liquidations = self.get_liquidation_data("BTCUSDT")
			btc_dominance_change = self.get_btc_dominance()
			
			# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º ATR –¥–ª—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
			if hasattr(atr, 'tail'):
				atr_mean = atr.tail(20).mean() if len(atr) >= 20 else atr.mean()
			else:
				# –ï—Å–ª–∏ atr —ç—Ç–æ —Å–∫–∞–ª—è—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ —Å—Ä–µ–¥–Ω–µ–µ
				atr_mean = atr
			
			# –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ç—Ä–∞—Ö–∞ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π)
			fear_history = [fear_greed_index]  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
			
			# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Å–∫–æ—Ä SHORT v2.1
			short_score, short_breakdown = self.calculate_adaptive_short_score_v2_1(
				fear_greed_index, funding_rate, long_liquidations, short_liquidations,
				rsi, ema_s, ema_l, atr, atr_mean, btc_dominance_change, fear_history
			)
			
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é SHORT
			short_enabled = short_score >= SHORT_MIN_SCORE
			
			if short_enabled:
				# –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
				short_position_size = self.get_adaptive_short_position_size(fear_greed_index)
				
				# –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è v2.1
				if short_breakdown["fear_score"] > 0:
					short_conditions.append(f"–°—Ç—Ä–∞—Ö: {fear_greed_index} < {SHORT_FEAR_MODERATE_THRESHOLD}")
				if short_breakdown["funding_score"] > 0:
					short_conditions.append(f"Funding: {funding_rate:.4f}% < 0")
				if short_breakdown["liquidation_score"] > 0:
					short_conditions.append(f"–õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏ Long: ${long_liquidations:.1f}M > Short: ${short_liquidations:.1f}M")
				if short_breakdown["rsi_score"] > 0:
					short_conditions.append(f"RSI: {rsi:.1f} > {RSI_OVERBOUGHT}")
				if short_breakdown["ema_score"] > 0:
					short_conditions.append(f"EMA: {ema_s:.2f} < {ema_l:.2f}")
				if short_breakdown["volatility_score"] > 0:
					volatility_ratio = atr / atr_mean if atr_mean > 0 else 1.0
					short_conditions.append(f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility_ratio:.2f}x > {SHORT_VOLATILITY_MULTIPLIER}x")
				if short_breakdown["btc_dominance_bonus"] > 0:
					short_conditions.append(f"BTC.D: +{btc_dominance_change:.1f}% –ø—Ä–∏ —Å—Ç—Ä–∞—Ö–µ {fear_greed_index}")
				if short_breakdown["inertia_bonus"] > 0:
					short_conditions.append(f"–ò–Ω–µ—Ä—Ü–∏—è —Å—Ç—Ä–∞—Ö–∞: {SHORT_FEAR_INERTIA_CANDLES} —Å–≤–µ—á–µ–π < {SHORT_FEAR_INERTIA_THRESHOLD}")
		else:
			# Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É SHORT v1.0
			short_enabled = self.should_short(self.df, fear_greed_index)
			
			if short_enabled:
				# RSI > 70 (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å)
				if rsi > RSI_OVERBOUGHT:
					short_conditions.append(f"RSI={rsi:.1f} > {RSI_OVERBOUGHT} (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å)")
				
				# –ë—ã—Å—Ç—Ä–∞—è EMA –Ω–∏–∂–µ –º–µ–¥–ª–µ–Ω–Ω–æ–π (–º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥)
				if ema_s < ema_l:
					short_conditions.append(f"EMA_short ({ema_s:.2f}) < EMA_long ({ema_l:.2f})")
				
				# ADX > 20 (–≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–π —Ç—Ä–µ–Ω–¥)
				if adx > ADX_RANGING:
					short_conditions.append(f"ADX={adx:.1f} > {ADX_RANGING} (—Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥)")
		
		return {
			"short_enabled": short_enabled,
			"short_score": short_score,
			"short_position_size": short_position_size,
			"short_conditions": short_conditions,
			"short_breakdown": short_breakdown,
			"funding_rate": funding_rate,
			"long_liquidations": long_liquidations,
			"short_liquidations": short_liquidations,
			"liquidation_ratio": long_liquidations / short_liquidations if short_liquidations > 0 else 0.0,
			"btc_dominance_change": btc_dominance_change if USE_ADVANCED_SHORT else 0.0,
			"volatility_ratio": atr / atr_mean if atr_mean > 0 and USE_ADVANCED_SHORT else 1.0,
			"short_version": SHORT_VERSION if USE_ADVANCED_SHORT else "1.0"
		}
