#!/usr/bin/env python3
"""
üî¥ –¢–ï–°–¢ –õ–û–ì–ò–ö–ò SHORT –ê–ö–¢–ò–í–ê–¶–ò–ò

–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ SHORT —Å–∏–≥–Ω–∞–ª–æ–≤
–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤.
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from signal_generator import SignalGenerator
from config import *
from logger import logger

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ SHORT –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
from config import (
    SHORT_MIN_SCORE, SHORT_FUNDING_RATE_THRESHOLD, SHORT_LIQUIDATION_RATIO_THRESHOLD,
    SHORT_FEAR_EXTREME_THRESHOLD, SHORT_FEAR_HIGH_THRESHOLD, SHORT_FEAR_MODERATE_THRESHOLD,
    SHORT_GREED_THRESHOLD, SHORT_EMA_SLOPE_THRESHOLD, SHORT_MAX_VOTES,
    SHORT_V1_VOTES, SHORT_V1_MIN_CONDITIONS, SHORT_FEAR_INERTIA_THRESHOLD,
    SHORT_FEAR_INERTIA_CANDLES, SHORT_FEAR_INERTIA_BONUS, SHORT_FEAR_WEIGHT,
    SHORT_FUNDING_WEIGHT, SHORT_LIQUIDATION_WEIGHT, SHORT_RSI_WEIGHT,
    SHORT_EMA_WEIGHT, SHORT_VOLATILITY_WEIGHT, SHORT_VOLATILITY_MULTIPLIER,
    SHORT_VOLATILITY_BONUS, SHORT_BTC_DOMINANCE_THRESHOLD, SHORT_BTC_DOMINANCE_FEAR_THRESHOLD,
    SHORT_BTC_DOMINANCE_BONUS, SHORT_API_TIMEOUT, SHORT_FALLBACK_FUNDING_RATE,
    SHORT_FALLBACK_LONG_LIQUIDATIONS, SHORT_FALLBACK_SHORT_LIQUIDATIONS, SHORT_FALLBACK_BTC_DOMINANCE
)

def create_test_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SHORT –ª–æ–≥–∏–∫–∏"""
    # –°–æ–∑–¥–∞–µ–º 100 —Å–≤–µ—á–µ–π —Å —Ç—Ä–µ–Ω–¥–æ–º –≤–Ω–∏–∑
    dates = pd.date_range(start='2025-10-14', periods=100, freq='1H')
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–¥–∞—é—â–∏–π —Ç—Ä–µ–Ω–¥
    base_price = 110000
    prices = []
    for i in range(100):
        # –ü–∞–¥–µ–Ω–∏–µ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –æ—Ç—Å–∫–æ–∫–∞–º–∏
        trend = -i * 50  # –û—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–µ–Ω–¥ –≤–Ω–∏–∑
        noise = np.random.normal(0, 200)  # –®—É–º
        price = base_price + trend + noise
        prices.append(max(price, 100000))  # –ú–∏–Ω–∏–º—É–º 100k
    
    df = pd.DataFrame({
        'timestamp': dates,
        'open': prices,
        'high': [p * 1.01 for p in prices],
        'low': [p * 0.99 for p in prices],
        'close': prices,
        'volume': [1000] * 100
    })
    
    df.set_index('timestamp', inplace=True)
    return df

def test_short_conditions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ª–æ–≤–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ SHORT"""
    logger.info("üî¥ –¢–ï–°–¢ –õ–û–ì–ò–ö–ò SHORT –ê–ö–¢–ò–í–ê–¶–ò–ò")
    logger.info("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    df = create_test_data()
    logger.info(f"üìä –°–æ–∑–¥–∞–Ω–æ {len(df)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–≤–µ—á–µ–π")
    
    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
    generator = SignalGenerator(df)
    
    try:
        # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        generator.compute_indicators()
        logger.info("‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤—ã—á–∏—Å–ª–µ–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    test_scenarios = [
        {
            'name': '–°–∏–ª—å–Ω—ã–π —Å—Ç—Ä–∞—Ö + –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥',
            'fear_greed_index': 25,  # –°–∏–ª—å–Ω—ã–π —Å—Ç—Ä–∞—Ö
            'funding_rate': -0.01,  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π funding
            'long_liquidations': 15.0,  # –í—ã—Å–æ–∫–∏–µ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ long
            'short_liquidations': 5.0,  # –ù–∏–∑–∫–∏–µ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ short
            'btc_dominance_change': 1.5,  # –†–æ—Å—Ç –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è BTC
            'expected_short': True
        },
        {
            'name': '–£–º–µ—Ä–µ–Ω–Ω—ã–π —Å—Ç—Ä–∞—Ö + –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥',
            'fear_greed_index': 35,  # –£–º–µ—Ä–µ–Ω–Ω—ã–π —Å—Ç—Ä–∞—Ö
            'funding_rate': -0.005,  # –°–ª–∞–±–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π funding
            'long_liquidations': 10.0,
            'short_liquidations': 8.0,
            'btc_dominance_change': 0.5,
            'expected_short': True
        },
        {
            'name': '–°–ª–∞–±—ã–π —Å—Ç—Ä–∞—Ö + –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥',
            'fear_greed_index': 45,  # –°–ª–∞–±—ã–π —Å—Ç—Ä–∞—Ö
            'funding_rate': 0.001,  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π funding
            'long_liquidations': 5.0,
            'short_liquidations': 5.0,
            'btc_dominance_change': 0.0,
            'expected_short': False
        },
        {
            'name': '–ñ–∞–¥–Ω–æ—Å—Ç—å + –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥',
            'fear_greed_index': 65,  # –ñ–∞–¥–Ω–æ—Å—Ç—å
            'funding_rate': 0.01,  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π funding
            'long_liquidations': 3.0,
            'short_liquidations': 7.0,
            'btc_dominance_change': -0.5,
            'expected_short': False
        }
    ]
    
    results = []
    
    for scenario in test_scenarios:
        logger.info(f"\nüß™ –¢–ï–°–¢: {scenario['name']}")
        logger.info(f"   –°—Ç—Ä–∞—Ö: {scenario['fear_greed_index']}")
        logger.info(f"   Funding: {scenario['funding_rate']:.3f}%")
        logger.info(f"   Long liq: ${scenario['long_liquidations']:.1f}M")
        logger.info(f"   Short liq: ${scenario['short_liquidations']:.1f}M")
        logger.info(f"   BTC.D: {scenario['btc_dominance_change']:+.1f}%")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            mock_data = {
                'fear_greed_index': scenario['fear_greed_index'],
                'funding_rate': scenario['funding_rate'],
                'long_liquidations': scenario['long_liquidations'],
                'short_liquidations': scenario['short_liquidations'],
                'btc_dominance_change': scenario['btc_dominance_change']
            }
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º SHORT –∞–∫—Ç–∏–≤–∞—Ü–∏—é
            short_score, short_position_size, short_breakdown = generator.calculate_adaptive_short_score_v2_1(
                mock_data['fear_greed_index'],
                mock_data['funding_rate'],
                mock_data['long_liquidations'],
                mock_data['short_liquidations'],
                rsi=45,  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π RSI
                ema_short=109000,  # EMA short
                ema_long=110000,  # EMA long (–º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥)
                atr=500,  # ATR
                atr_mean=400,  # –°—Ä–µ–¥–Ω–∏–π ATR
                btc_dominance_change=mock_data['btc_dominance_change'],
                fear_history=[mock_data['fear_greed_index']] * 5
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é
            short_enabled = short_score > SHORT_MIN_SCORE
            short_conditions = []
            
            if short_breakdown["fear_score"] > 0:
                short_conditions.append("–°—Ç—Ä–∞—Ö")
            if short_breakdown["funding_score"] > 0:
                short_conditions.append("Funding")
            if short_breakdown["liquidation_score"] > 0:
                short_conditions.append("–õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏")
            if short_breakdown["rsi_score"] > 0:
                short_conditions.append("RSI")
            if short_breakdown["ema_score"] > 0:
                short_conditions.append("EMA")
            if short_breakdown["volatility_score"] > 0:
                short_conditions.append("–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
            if short_breakdown["btc_dominance_bonus"] > 0:
                short_conditions.append("BTC.D")
            if short_breakdown["inertia_bonus"] > 0:
                short_conditions.append("–ò–Ω–µ—Ä—Ü–∏—è")
            
            logger.info(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            logger.info(f"      –°–∫–æ—Ä: {short_score:.3f}")
            logger.info(f"      –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {short_position_size:.1%}")
            logger.info(f"      –£—Å–ª–æ–≤–∏—è: {', '.join(short_conditions)}")
            logger.info(f"      –ê–∫—Ç–∏–≤–∞—Ü–∏—è: {'‚úÖ –î–ê' if short_enabled else '‚ùå –ù–ï–¢'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
            expected = scenario['expected_short']
            actual = short_enabled
            status = "‚úÖ –ü–†–û–®–ï–õ" if expected == actual else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            
            logger.info(f"      –û–∂–∏–¥–∞–Ω–∏–µ: {'‚úÖ –î–ê' if expected else '‚ùå –ù–ï–¢'}")
            logger.info(f"      –°—Ç–∞—Ç—É—Å: {status}")
            
            results.append({
                'scenario': scenario['name'],
                'expected': expected,
                'actual': actual,
                'score': short_score,
                'conditions': len(short_conditions),
                'status': status
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            results.append({
                'scenario': scenario['name'],
                'expected': scenario['expected_short'],
                'actual': False,
                'score': 0,
                'conditions': 0,
                'status': f"‚ùå –û–®–ò–ë–ö–ê: {e}"
            })
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 80)
    print("üî¥ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø SHORT –õ–û–ì–ò–ö–ò")
    print("=" * 80)
    
    passed = sum(1 for r in results if "–ü–†–û–®–ï–õ" in r['status'])
    total = len(results)
    
    print(f"üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
    print(f"‚úÖ –ü—Ä–æ—à–ª–æ: {passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed/total*100:.1f}%")
    
    print(f"\nüìã –î–ï–¢–ê–õ–ò –¢–ï–°–¢–û–í:")
    for result in results:
        print(f"   {result['scenario']}: {result['status']}")
        if "–ü–†–û–®–ï–õ" in result['status']:
            print(f"      –°–∫–æ—Ä: {result['score']:.3f}, –£—Å–ª–æ–≤–∏—è: {result['conditions']}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if passed == total:
        print("   ‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ - SHORT –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("   ‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã - —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        failed_tests = [r for r in results if "–ü–†–û–í–ê–õ–ï–ù" in r['status']]
        for test in failed_tests:
            print(f"   - {test['scenario']}: –æ–∂–∏–¥–∞–ª—Å—è {test['expected']}, –ø–æ–ª—É—á–µ–Ω {test['actual']}")
    
    return results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        results = test_short_conditions()
        logger.info("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        return results
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return []

if __name__ == "__main__":
    main()
